<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisitorManagementSystem.Api</name>
    </assembly>
    <members>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Audit.ExportAuditLogsCommand">
            <summary>
            Command to export audit logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Audit.MarkAuditLogsReviewedCommand">
            <summary>
            Command to mark audit logs as reviewed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Audit.ExportAuditLogsCommandHandler">
            <summary>
            Handler for exporting audit logs to various formats
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Audit.MarkAuditLogsReviewedCommandHandler">
            <summary>
            Handler for marking audit logs as reviewed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ChangePasswordCommand">
            <summary>
            Command for changing user password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ChangePasswordCommandHandler">
            <summary>
            Handler for change password command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LoginCommand">
            <summary>
            Command for user login
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LoginCommandHandler">
            <summary>
            Handler for login command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LogoutCommand">
            <summary>
            Command for user logout
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LogoutCommandHandler">
            <summary>
            Handler for logout command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand">
            <summary>
            Command for refreshing authentication tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand.RefreshToken">
            <summary>
            The refresh token to use
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand.IpAddress">
            <summary>
            IP address of the client
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand.UserAgent">
            <summary>
            User agent of the client
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand.DeviceFingerprint">
            <summary>
            âœ… FIXED: Device fingerprint from client (required for validation)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommandHandler">
            <summary>
            Handler for refresh token command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.InitiatePasswordResetCommand">
            <summary>
            Command for initiating password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ResetPasswordCommand">
            <summary>
            Command for completing password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.InitiatePasswordResetCommandHandler">
            <summary>
            Handler for initiate password reset command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ResetPasswordCommandHandler">
            <summary>
            Handler for reset password command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.CreateConfigurationCommand">
            <summary>
            Command to create a new configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.UpdateConfigurationCommand">
            <summary>
            Command to update a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.DeleteConfigurationCommand">
            <summary>
            Command to delete a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.InvalidateConfigurationCacheCommand">
            <summary>
            Command to invalidate configuration cache
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.CreateConfigurationCommandHandler">
            <summary>
            Handler for creating a new configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.DeleteConfigurationCommandHandler">
            <summary>
            Handler for deleting a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.InvalidateConfigurationCacheCommandHandler">
            <summary>
            Handler for invalidating configuration cache
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Configuration.UpdateConfigurationCommandHandler">
            <summary>
            Handler for updating a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand">
            <summary>
            Command to create a new emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.VisitorId">
            <summary>
            Visitor ID this contact belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.Relationship">
            <summary>
            Relationship to visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.Address">
            <summary>
            Address information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.Priority">
            <summary>
            Contact priority (1 = highest)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.IsPrimary">
            <summary>
            Whether this is the primary contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommand.CreatedBy">
            <summary>
            User creating the contact
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.CreateEmergencyContactCommandHandler">
            <summary>
            Handler for create emergency contact command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.DeleteEmergencyContactCommand">
            <summary>
            Command to delete an emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.DeleteEmergencyContactCommand.Id">
            <summary>
            Emergency contact ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.DeleteEmergencyContactCommand.DeletedBy">
            <summary>
            User deleting the contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.DeleteEmergencyContactCommand.PermanentDelete">
            <summary>
            Whether to permanently delete (vs soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.DeleteEmergencyContactCommandHandler">
            <summary>
            Handler for delete emergency contact command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand">
            <summary>
            Command to update an emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Id">
            <summary>
            Emergency contact ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.FirstName">
            <summary>
            First name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Relationship">
            <summary>
            Relationship to visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Address">
            <summary>
            Address information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Priority">
            <summary>
            Contact priority (1 = highest)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.IsPrimary">
            <summary>
            Whether this is the primary contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommand.ModifiedBy">
            <summary>
            User updating the contact
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.EmergencyContacts.UpdateEmergencyContactCommandHandler">
            <summary>
            Handler for update emergency contact command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.ApproveInvitationCommand">
            <summary>
            Command to approve an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.ApproveInvitationCommand.InvitationId">
            <summary>
            Invitation ID to approve
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.ApproveInvitationCommand.Comments">
            <summary>
            Approval comments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.ApproveInvitationCommand.ApprovedBy">
            <summary>
            User approving the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.ApproveInvitationCommandHandler">
            <summary>
            Handler for approve invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CancelInvitationCommand">
            <summary>
            Command to cancel an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CancelInvitationCommand.InvitationId">
            <summary>
            Invitation ID to cancel
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CancelInvitationCommand.Reason">
            <summary>
            Cancellation reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CancelInvitationCommand.CancelledBy">
            <summary>
            User cancelling the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CancelInvitationCommandHandler">
            <summary>
            Handler for cancel invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckInInvitationCommandHandler">
            <summary>
            Handler for check-in invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckOutInvitationCommandHandler">
            <summary>
            Handler for check-out invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand">
            <summary>
            Command to create a new invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.VisitorId">
            <summary>
            Visitor ID this invitation is for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.HostId">
            <summary>
            Host ID (staff member creating invitation)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.VisitPurposeId">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.LocationId">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.Subject">
            <summary>
            Subject/title of the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.Message">
            <summary>
            Message/description of the visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.ScheduledStartTime">
            <summary>
            Scheduled start date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.ScheduledEndTime">
            <summary>
            Scheduled end date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.ExpectedVisitorCount">
            <summary>
            Expected number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.SpecialInstructions">
            <summary>
            Special instructions or requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.RequiresApproval">
            <summary>
            Whether pre-approval is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.RequiresEscort">
            <summary>
            Whether escort is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.RequiresBadge">
            <summary>
            Whether badge printing is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.NeedsParking">
            <summary>
            Whether parking is needed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.TemplateId">
            <summary>
            Template ID to use (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.SubmitForApproval">
            <summary>
            Whether to submit immediately for approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommand.CreatedBy">
            <summary>
            User creating the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CreateInvitationCommandHandler">
            <summary>
            Handler for create invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.DeleteInvitationCommand">
            <summary>
            Command for deleting an invitation (only if status is Cancelled)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.DeleteInvitationCommandHandler">
            <summary>
            Handler for delete invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.SubmitInvitationCommand">
            <summary>
            Command to submit an invitation for approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.SubmitInvitationCommand.InvitationId">
            <summary>
            Invitation ID to submit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.SubmitInvitationCommand.SubmittedBy">
            <summary>
            User submitting the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckInInvitationCommand">
            <summary>
            Command to check in a visitor using invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckInInvitationCommand.InvitationReference">
            <summary>
            Invitation ID or QR code data
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckInInvitationCommand.CheckedInBy">
            <summary>
            User processing the check-in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckInInvitationCommand.Notes">
            <summary>
            Additional check-in notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckOutInvitationCommand">
            <summary>
            Command to check out a visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckOutInvitationCommand.InvitationId">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckOutInvitationCommand.CheckedOutBy">
            <summary>
            User processing the check-out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.CheckOutInvitationCommand.Notes">
            <summary>
            Additional check-out notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.RejectInvitationCommand">
            <summary>
            Command to reject an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.RejectInvitationCommand.InvitationId">
            <summary>
            Invitation ID to reject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.RejectInvitationCommand.Reason">
            <summary>
            Rejection reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.RejectInvitationCommand.RejectedBy">
            <summary>
            User rejecting the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.RejectInvitationCommandHandler">
            <summary>
            Handler for reject invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.SubmitInvitationCommandHandler">
            <summary>
            Handler for submit invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand">
            <summary>
            Command to update an existing invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.Id">
            <summary>
            Invitation ID to update
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.VisitPurposeId">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.LocationId">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.Subject">
            <summary>
            Subject/title of the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.Message">
            <summary>
            Message/description of the visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.ScheduledStartTime">
            <summary>
            Scheduled start date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.ScheduledEndTime">
            <summary>
            Scheduled end date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.ExpectedVisitorCount">
            <summary>
            Expected number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.SpecialInstructions">
            <summary>
            Special instructions or requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.RequiresApproval">
            <summary>
            Whether pre-approval is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.RequiresEscort">
            <summary>
            Whether escort is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.RequiresBadge">
            <summary>
            Whether badge printing is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.NeedsParking">
            <summary>
            Whether parking is needed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommand.ModifiedBy">
            <summary>
            User modifying the invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Invitations.UpdateInvitationCommandHandler">
            <summary>
            Handler for update invitation command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand">
            <summary>
            Command to create a new location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Code">
            <summary>
            Location code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.LocationType">
            <summary>
            Location type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Floor">
            <summary>
            Floor information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Building">
            <summary>
            Building information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.Zone">
            <summary>
            Zone information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.ParentLocationId">
            <summary>
            Parent location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.MaxCapacity">
            <summary>
            Maximum capacity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.RequiresEscort">
            <summary>
            Whether location requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.AccessLevel">
            <summary>
            Required access level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommand.CreatedBy">
            <summary>
            User creating the location
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.CreateLocationCommandHandler">
            <summary>
            Handler for create location command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.DeleteLocationCommand">
            <summary>
            Command to delete a location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.DeleteLocationCommand.Id">
            <summary>
            Location ID to delete
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.DeleteLocationCommand.DeletedBy">
            <summary>
            User deleting the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.DeleteLocationCommand.SoftDelete">
            <summary>
            Whether to perform a soft delete (default) or hard delete
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.DeleteLocationCommandHandler">
            <summary>
            Handler for delete location command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand">
            <summary>
            Command to update an existing location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Id">
            <summary>
            Location ID to update
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Code">
            <summary>
            Location code (unique identifier)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.LocationType">
            <summary>
            Location type (e.g., "Office", "Conference Room", "Building")
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Floor">
            <summary>
            Floor number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Building">
            <summary>
            Building name or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.Zone">
            <summary>
            Zone or area identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.ParentLocationId">
            <summary>
            Parent location ID (for hierarchical locations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.MaxCapacity">
            <summary>
            Maximum capacity for the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.RequiresEscort">
            <summary>
            Whether this location requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.AccessLevel">
            <summary>
            Access level required for this location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.IsActive">
            <summary>
            Whether this location is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommand.UpdatedBy">
            <summary>
            User updating the location
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Locations.UpdateLocationCommandHandler">
            <summary>
            Handler for update location command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.CreateTimeSlotCommandHandler">
            <summary>
            Handler for creating a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.DeleteTimeSlotCommandHandler">
            <summary>
            Handler for deleting a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.CreateTimeSlotCommand">
            <summary>
            Command to create a new time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.UpdateTimeSlotCommand">
            <summary>
            Command to update an existing time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.DeleteTimeSlotCommand">
            <summary>
            Command to delete a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.TimeSlots.UpdateTimeSlotCommandHandler">
            <summary>
            Handler for updating a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.ActivateUserCommand">
            <summary>
            Command for activating a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.ActivateUserCommandHandler">
            <summary>
            Handler for activate user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.AdminPasswordResetCommand">
            <summary>
            Command for admin password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.AdminPasswordResetCommandHandler">
            <summary>
            Handler for AdminPasswordResetCommand
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeactivateUserCommand">
            <summary>
            Command for deactivating a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeactivateUserCommandHandler">
            <summary>
            Handler for deactivate user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeleteUserCommand">
            <summary>
            Command for deleting a user (soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeleteUserCommandHandler">
            <summary>
            Handler for delete user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.RemoveProfilePhotoCommand">
            <summary>
            Command for removing user profile photo
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.RemoveProfilePhotoCommandHandler">
            <summary>
            Handler for removing user profile photo
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UnlockUserCommand">
            <summary>
            Command for unlocking a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UnlockUserCommandHandler">
            <summary>
            Handler for UnlockUserCommand
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserCommand">
            <summary>
            Command for updating an existing user
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserCommandHandler">
            <summary>
            Handler for update user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserPreferencesCommand">
            <summary>
            Command for updating current user's preferences
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserPreferencesCommandHandler">
            <summary>
            Handler for update user preferences command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserProfileCommand">
            <summary>
            Command for updating current user's profile (self-service)
            Excludes admin-only fields like role and status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserProfileCommandHandler">
            <summary>
            Handler for update user profile command (self-service)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UploadProfilePhotoCommand">
            <summary>
            Command for uploading user profile photo
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UploadProfilePhotoCommandHandler">
            <summary>
            Handler for uploading user profile photo
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand">
            <summary>
            Command to create a new visitor document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.VisitorId">
            <summary>
            Visitor ID this document belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.Title">
            <summary>
            Document title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.FilePath">
            <summary>
            File path or URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.OriginalFileName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.MimeType">
            <summary>
            MIME type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.IsSensitive">
            <summary>
            Whether document contains sensitive information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.IsRequired">
            <summary>
            Whether document is required for check-in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.ExpiryDate">
            <summary>
            Document expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.Tags">
            <summary>
            Additional tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommand.CreatedBy">
            <summary>
            User uploading the document
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.CreateVisitorDocumentCommandHandler">
            <summary>
            Handler for create visitor document command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.DeleteVisitorDocumentCommand">
            <summary>
            Command to delete a visitor document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.DeleteVisitorDocumentCommand.Id">
            <summary>
            Document ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.DeleteVisitorDocumentCommand.DeletedBy">
            <summary>
            User deleting the document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.DeleteVisitorDocumentCommand.PermanentDelete">
            <summary>
            Whether to permanently delete (vs soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.DeleteVisitorDocumentCommandHandler">
            <summary>
            Handler for delete visitor document command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand">
            <summary>
            Command to update a visitor document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.Id">
            <summary>
            Document ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.Title">
            <summary>
            Document title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.IsSensitive">
            <summary>
            Whether document contains sensitive information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.IsRequired">
            <summary>
            Whether document is required for check-in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.ExpiryDate">
            <summary>
            Document expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.Tags">
            <summary>
            Additional tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommand.ModifiedBy">
            <summary>
            User updating the document
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorDocuments.UpdateVisitorDocumentCommandHandler">
            <summary>
            Handler for update visitor document command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand">
            <summary>
            Command to create a new visitor note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.VisitorId">
            <summary>
            Visitor ID this note belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.Title">
            <summary>
            Note title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.Category">
            <summary>
            Note category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.Priority">
            <summary>
            Note priority level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.IsFlagged">
            <summary>
            Whether note is flagged for attention
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.IsConfidential">
            <summary>
            Whether note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.FollowUpDate">
            <summary>
            Follow-up date if flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.Tags">
            <summary>
            Additional tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommand.CreatedBy">
            <summary>
            User creating the note
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.CreateVisitorNoteCommandHandler">
            <summary>
            Handler for create visitor note command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.DeleteVisitorNoteCommand">
            <summary>
            Command to delete a visitor note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.DeleteVisitorNoteCommand.Id">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.DeleteVisitorNoteCommand.DeletedBy">
            <summary>
            User deleting the note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.DeleteVisitorNoteCommand.PermanentDelete">
            <summary>
            Whether to permanently delete (vs soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.DeleteVisitorNoteCommandHandler">
            <summary>
            Handler for delete visitor note command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand">
            <summary>
            Command to update a visitor note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Id">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Title">
            <summary>
            Note title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Category">
            <summary>
            Note category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Priority">
            <summary>
            Note priority level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.IsFlagged">
            <summary>
            Whether note is flagged for attention
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.IsConfidential">
            <summary>
            Whether note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.FollowUpDate">
            <summary>
            Follow-up date if flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.Tags">
            <summary>
            Additional tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommand.ModifiedBy">
            <summary>
            User updating the note
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitorNotes.UpdateVisitorNoteCommandHandler">
            <summary>
            Handler for update visitor note command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.BlacklistVisitorCommand">
            <summary>
            Command for blacklisting a visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.BlacklistVisitorCommandHandler">
            <summary>
            Handler for blacklist visitor command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.CreateVisitorCommand">
            <summary>
            Command for creating a new visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.CreateVisitorCommandHandler">
            <summary>
            Handler for create visitor command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.DeleteVisitorCommand">
            <summary>
            Command for deleting a visitor (soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.DeleteVisitorCommandHandler">
            <summary>
            Handler for delete visitor command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.MarkAsVipCommand">
            <summary>
            Command for marking a visitor as VIP
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.MarkAsVipCommandHandler">
            <summary>
            Handler for mark as VIP command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.RemoveBlacklistCommand">
            <summary>
            Command for removing blacklist status from a visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.RemoveBlacklistCommandHandler">
            <summary>
            Handler for remove blacklist command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.RemoveVipStatusCommand">
            <summary>
            Command for removing VIP status from a visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.RemoveVipStatusCommandHandler">
            <summary>
            Handler for remove VIP status command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.UpdateVisitorCommand">
            <summary>
            Command for updating an existing visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Visitors.UpdateVisitorCommandHandler">
            <summary>
            Handler for update visitor command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand">
            <summary>
            Command to create a new visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.Name">
            <summary>
            Visit purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.Description">
            <summary>
            Visit purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.RequiresApproval">
            <summary>
            Whether this purpose requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.IsActive">
            <summary>
            Whether this purpose is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.ColorCode">
            <summary>
            Color code for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.IconName">
            <summary>
            Icon name for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommand.CreatedBy">
            <summary>
            User creating the visit purpose
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.CreateVisitPurposeCommandHandler">
            <summary>
            Handler for create visit purpose command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.DeleteVisitPurposeCommand">
            <summary>
            Command to delete a visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.DeleteVisitPurposeCommand.Id">
            <summary>
            Visit purpose ID to delete
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.DeleteVisitPurposeCommand.DeletedBy">
            <summary>
            User deleting the visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.DeleteVisitPurposeCommand.SoftDelete">
            <summary>
            Whether to perform a soft delete (default) or hard delete
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.DeleteVisitPurposeCommandHandler">
            <summary>
            Handler for delete visit purpose command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand">
            <summary>
            Command to update an existing visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.Id">
            <summary>
            Visit purpose ID to update
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.Name">
            <summary>
            Visit purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.Description">
            <summary>
            Visit purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.RequiresApproval">
            <summary>
            Whether this purpose requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.IsActive">
            <summary>
            Whether this purpose is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.ColorCode">
            <summary>
            Color code for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.IconName">
            <summary>
            Icon name for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommand.UpdatedBy">
            <summary>
            User updating the visit purpose
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.VisitPurposes.UpdateVisitPurposeCommandHandler">
            <summary>
            Handler for update visit purpose command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Audit.AuditLogDto">
            <summary>
            DTO for audit log data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Audit.AuditLogDetailDto">
            <summary>
            DTO for detailed audit log data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Audit.MarkAuditLogsReviewedDto">
            <summary>
            DTO for marking audit logs as reviewed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Audit.ExportAuditLogsResultDto">
            <summary>
            DTO for export audit logs result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Audit.MarkReviewedResultDto">
            <summary>
            DTO for mark reviewed result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult">
            <summary>
            Authentication result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.IsSuccess">
            <summary>
            Authentication success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.ErrorMessage">
            <summary>
            Error message if authentication failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.AccessToken">
            <summary>
            Access token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.AccessTokenExpiry">
            <summary>
            Access token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RefreshTokenExpiry">
            <summary>
            Refresh token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.User">
            <summary>
            Current user information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RequiresPasswordChange">
            <summary>
            Whether user needs to change password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RequiresTwoFactor">
            <summary>
            Whether two-factor authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.LockoutTimeRemaining">
            <summary>
            Lockout time remaining if account is locked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.Errors">
            <summary>
            List of authentication errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto">
            <summary>
            Change password request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.CurrentPassword">
            <summary>
            Current password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.NewPassword">
            <summary>
            New password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo">
            <summary>
            Cookie token information data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo.AccessToken">
            <summary>
            Access token from cookie
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo.RefreshToken">
            <summary>
            Refresh token from cookie
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto">
            <summary>
            Current user information data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Permissions">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.PasswordChangedDate">
            <summary>
            Password changed date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.ForgotPasswordRequestDto">
            <summary>
            Forgot password request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto">
            <summary>
            Login request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.RememberMe">
            <summary>
            Remember me flag for extended session
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.DeviceFingerprint">
            <summary>
            Device fingerprint for security
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto">
            <summary>
            Login response data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.IsSuccess">
            <summary>
            Login success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.ErrorMessage">
            <summary>
            Error message if login failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.User">
            <summary>
            Current user information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.RequiresPasswordChange">
            <summary>
            Whether user needs to change password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.RequiresTwoFactor">
            <summary>
            Whether two-factor authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.LockoutTimeRemaining">
            <summary>
            Lockout time remaining if account is locked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult">
            <summary>
            Logout result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.IsSuccess">
            <summary>
            Logout success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.Message">
            <summary>
            Result message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.TokensRevoked">
            <summary>
            Number of tokens revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.ErrorMessage">
            <summary>
            Error message if logout failed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult">
            <summary>
            Password change result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.IsSuccess">
            <summary>
            Password change success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.ErrorMessage">
            <summary>
            Error message if password change failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.RequiresReauthentication">
            <summary>
            Whether re-authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto">
            <summary>
            Password reset result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.IsSuccess">
            <summary>
            Password reset success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ErrorMessage">
            <summary>
            Error message if password reset failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ResetToken">
            <summary>
            Reset token (for development only)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ResetTokenExpiry">
            <summary>
            Reset token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.EmailSent">
            <summary>
            Whether email was sent
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto">
            <summary>
            Refresh token request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto.RefreshToken">
            <summary>
            Refresh token value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto.DeviceFingerprint">
            <summary>
            Device fingerprint for security validation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto">
            <summary>
            Reset password request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.Token">
            <summary>
            Password reset token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.NewPassword">
            <summary>
            New password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationDto">
            <summary>
            Token validation response DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult">
            <summary>
            Token validation result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsValid">
            <summary>
            Token validation success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.UserId">
            <summary>
            User ID from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.UserEmail">
            <summary>
            User email from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Roles">
            <summary>
            User roles from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Permissions">
            <summary>
            User permissions from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Expiry">
            <summary>
            Token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.SecurityStamp">
            <summary>
            Security stamp from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.ErrorMessage">
            <summary>
            Error message if validation failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsExpired">
            <summary>
            Whether token is expired
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsNearExpiry">
            <summary>
            Whether token is near expiry
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus">
            <summary>
            User lockout status data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.IsLockedOut">
            <summary>
            Whether user is locked out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.LockoutEnd">
            <summary>
            Lockout end date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.FailedAttempts">
            <summary>
            Number of failed attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.MaxFailedAttempts">
            <summary>
            Maximum allowed failed attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.TimeRemaining">
            <summary>
            Time remaining in lockout
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.Reason">
            <summary>
            Lockout reason
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto">
            <summary>
            User permissions data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.Permissions">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.PermissionsByCategory">
            <summary>
            Permissions grouped by category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.HasElevatedPrivileges">
            <summary>
            Whether user has elevated privileges
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto">
            <summary>
            User session data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.DeviceFingerprint">
            <summary>
            Device fingerprint
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IpAddress">
            <summary>
            IP address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.UserAgent">
            <summary>
            User agent string
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.DeviceType">
            <summary>
            Device type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.Location">
            <summary>
            Geographic location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.CreatedOn">
            <summary>
            Session creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.ExpiryDate">
            <summary>
            Session expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.LastUsed">
            <summary>
            Last activity date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IsActive">
            <summary>
            Whether session is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IsCurrent">
            <summary>
            Whether this is the current session
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacitySettingsDto">
            <summary>
            DTO for capacity settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateCapacitySettingsDto">
            <summary>
            DTO for creating capacity settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.UpdateCapacitySettingsDto">
            <summary>
            DTO for updating capacity settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.OccupancyDto">
            <summary>
            DTO for occupancy information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityStatisticsDto">
            <summary>
            DTO for capacity statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.DailyCapacityDto">
            <summary>
            DTO for daily capacity breakdown
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityTrendsDto">
            <summary>
            DTO for capacity trends
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto">
            <summary>
            DTO for capacity validation request
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.LocationId">
            <summary>
            Location ID to check capacity for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.TimeSlotId">
            <summary>
            Time slot ID to check capacity for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.DateTime">
            <summary>
            Date and time for the appointment
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.ExpectedVisitors">
            <summary>
            Number of expected visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.IsVipRequest">
            <summary>
            Whether this is a VIP request (can override capacity)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto.ExcludeInvitationId">
            <summary>
            Invitation ID to exclude from capacity calculation (for updates)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto">
            <summary>
            DTO for capacity validation response
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.IsAvailable">
            <summary>
            Whether capacity is available
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.CurrentOccupancy">
            <summary>
            Current occupancy count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.MaxCapacity">
            <summary>
            Maximum capacity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.AvailableSlots">
            <summary>
            Available slots remaining
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.OccupancyPercentage">
            <summary>
            Occupancy percentage
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.IsWarningLevel">
            <summary>
            Warning level reached (>80% capacity)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.Messages">
            <summary>
            Validation messages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationResponseDto.AlternativeSlots">
            <summary>
            Alternative time slots if current is unavailable
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.LocationCapacityOverviewDto">
            <summary>
            DTO for location capacity overview
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotCapacityDto">
            <summary>
            DTO for time slot capacity within a location
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.AlternativeTimeSlotDto">
            <summary>
            DTO for alternative time slot suggestion
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityTrendDataPointDto">
            <summary>
            DTO for individual trend data point
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityTrendSummaryDto">
            <summary>
            DTO for capacity trend summary
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto">
            <summary>
            DTO for time slot information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.Id">
            <summary>
            Time slot ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.Name">
            <summary>
            Time slot name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.MaxVisitors">
            <summary>
            Maximum visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.ActiveDays">
            <summary>
            Active days
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.LocationId">
            <summary>
            Location ID (if specific to a location)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.LocationName">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.IsActive">
            <summary>
            Whether the slot is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.BufferMinutes">
            <summary>
            Buffer minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.DurationMinutes">
            <summary>
            Duration in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.TimeSlotDto.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto">
            <summary>
            DTO for creating a time slot
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.Name">
            <summary>
            Time slot name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.EndTime">
            <summary>
            End time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.MaxVisitors">
            <summary>
            Maximum visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.ActiveDays">
            <summary>
            Active days (1=Monday, 7=Sunday)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.LocationId">
            <summary>
            Location ID (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.BufferMinutes">
            <summary>
            Buffer minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Capacity.CreateTimeSlotDto.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.AddressDto">
            <summary>
            Data transfer object for address information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.CreateAddressDto">
            <summary>
            Data transfer object for creating address information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1">
            <summary>
            Standard API response wrapper
            </summary>
            <typeparam name="T">Response data type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Success">
            <summary>
            Success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Data">
            <summary>
            Response data
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Errors">
            <summary>
            Error messages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Metadata">
            <summary>
            Response metadata
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.SuccessResponse(`0,System.String,System.String)">
            <summary>
            Creates a successful response
            </summary>
            <param name="data">Response data</param>
            <param name="message">Success message</param>
             <param name="correlationId">Correlation Id</param>
            <returns>Successful API response</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.ErrorResponse(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            Creates an error response
            </summary>
            <param name="errors">Error messages</param>
            <param name="message">Error message</param>
            <param name="correlationId">Correlation Id</param>
            <returns>Error API response</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.ErrorResponse(System.String,System.String,System.String)">
            <summary>
            Creates an error response with single error
            </summary>
            <param name="error">Error message</param>
            <param name="message">Error message</param>
            <param name="correlationId">Correlation Id</param>
            <returns>Error API response</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1">
            <summary>
            Paginated result data transfer object
            </summary>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.Items">
            <summary>
            List of items
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.TotalCount">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.PageIndex">
            <summary>
            Current page index (0-based)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.HasPreviousPage">
            <summary>
            Whether there is a previous page
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.HasNextPage">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.Create(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a paginated result
            </summary>
            <param name="items">Items for current page</param>
            <param name="totalCount">Total number of items</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto">
            <summary>
            Select list item data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Value">
            <summary>
            Item value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Text">
            <summary>
            Item display text
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Description">
            <summary>
            Item description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Selected">
            <summary>
            Whether item is selected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Disabled">
            <summary>
            Whether item is disabled
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Data">
            <summary>
            Additional data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.ConfigurationDto">
            <summary>
            DTO for configuration data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.CreateConfigurationDto">
            <summary>
            DTO for creating a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.ConfigurationHistoryDto">
            <summary>
            DTO for configuration history entry
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.UpdateConfigurationDto">
            <summary>
            DTO for updating a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.DeleteConfigurationDto">
            <summary>
            DTO for deleting a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.ValidateConfigurationDto">
            <summary>
            DTO for validating a configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.ConfigurationValidationResultDto">
            <summary>
            DTO for configuration validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.ConfigurationUpdateResultDto">
            <summary>
            DTO for configuration update result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Configuration.CacheInvalidationResultDto">
            <summary>
            DTO for cache invalidation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto">
            <summary>
            DTO for creating a new invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.VisitorId">
            <summary>
            Visitor ID this invitation is for (for single visitor invitations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.VisitorIds">
            <summary>
            Multiple visitor IDs for group invitations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.VisitPurposeId">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.LocationId">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.Subject">
            <summary>
            Subject/title of the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.Message">
            <summary>
            Message/description of the visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.ScheduledStartTime">
            <summary>
            Scheduled start date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.ScheduledEndTime">
            <summary>
            Scheduled end date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.ExpectedVisitorCount">
            <summary>
            Expected number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.SpecialInstructions">
            <summary>
            Special instructions or requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.RequiresApproval">
            <summary>
            Whether pre-approval is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.RequiresEscort">
            <summary>
            Whether escort is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.RequiresBadge">
            <summary>
            Whether badge printing is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.NeedsParking">
            <summary>
            Whether parking is needed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.TemplateId">
            <summary>
            Template ID to use (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.SubmitForApproval">
            <summary>
            Whether to submit immediately for approval
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Custom validation logic
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.ApproveInvitationDto">
            <summary>
            DTO for approving an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.ApproveInvitationDto.Comments">
            <summary>
            Approval comments
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.RejectInvitationDto">
            <summary>
            DTO for rejecting an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.RejectInvitationDto.Reason">
            <summary>
            Rejection reason
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto">
            <summary>
            Invitation data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Id">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.InvitationNumber">
            <summary>
            Unique invitation reference number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.HostId">
            <summary>
            Host ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.VisitPurposeId">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.LocationId">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Status">
            <summary>
            Current status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Subject">
            <summary>
            Subject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ScheduledStartTime">
            <summary>
            Scheduled start time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ScheduledEndTime">
            <summary>
            Scheduled end time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ExpectedVisitorCount">
            <summary>
            Expected visitor count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.SpecialInstructions">
            <summary>
            Special instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RequiresApproval">
            <summary>
            Requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RequiresEscort">
            <summary>
            Requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RequiresBadge">
            <summary>
            Requires badge
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.NeedsParking">
            <summary>
            Needs parking
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.QrCode">
            <summary>
            QR code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.SentOn">
            <summary>
            Sent date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ApprovedOn">
            <summary>
            Approved date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ApprovedBy">
            <summary>
            Approved by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ApprovalComments">
            <summary>
            Approval comments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RejectedOn">
            <summary>
            Rejected date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RejectedBy">
            <summary>
            Rejected by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.RejectionReason">
            <summary>
            Rejection reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.CheckedInAt">
            <summary>
            Check-in time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.CheckedOutAt">
            <summary>
            Check-out time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.ModifiedOn">
            <summary>
            Modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Visitor">
            <summary>
            Visitor information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Host">
            <summary>
            Host information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.VisitPurpose">
            <summary>
            Visit purpose information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.Location">
            <summary>
            Location information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.VisitDurationHours">
            <summary>
            Visit duration in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.IsActive">
            <summary>
            Whether invitation is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.IsApproved">
            <summary>
            Whether invitation is approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.CanBeModified">
            <summary>
            Whether invitation can be modified
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.CanBeCancelled">
            <summary>
            Whether invitation can be cancelled
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationDto.IsExpired">
            <summary>
            Whether invitation is expired
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto">
            <summary>
            DTO for invitation approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.Id">
            <summary>
            Approval ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.InvitationId">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.ApproverId">
            <summary>
            Approver ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.ApproverName">
            <summary>
            Approver name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.StepOrder">
            <summary>
            Step order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.Decision">
            <summary>
            Approval decision
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.DecisionDate">
            <summary>
            Decision date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.Comments">
            <summary>
            Comments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.IsRequired">
            <summary>
            Is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.EscalatedToUserId">
            <summary>
            Escalated to user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.EscalatedToUserName">
            <summary>
            Escalated to user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.EscalatedOn">
            <summary>
            Escalation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.IsPending">
            <summary>
            Whether approval is pending
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.IsCompleted">
            <summary>
            Whether approval is completed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationApprovalDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto">
            <summary>
            DTO for invitation event
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.Id">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.InvitationId">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.TriggeredBy">
            <summary>
            Triggered by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.TriggeredByUserName">
            <summary>
            Triggered by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.EventData">
            <summary>
            Event data
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationEventDto.EventTimestamp">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto">
            <summary>
            DTO for invitation template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.Id">
            <summary>
            Template ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.Name">
            <summary>
            Template name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.Description">
            <summary>
            Template description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.Category">
            <summary>
            Template category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.SubjectTemplate">
            <summary>
            Subject template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.MessageTemplate">
            <summary>
            Message template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultVisitPurposeId">
            <summary>
            Default visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultVisitPurposeName">
            <summary>
            Default visit purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultLocationId">
            <summary>
            Default location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultLocationName">
            <summary>
            Default location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultDurationHours">
            <summary>
            Default duration in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultRequiresApproval">
            <summary>
            Default requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultRequiresEscort">
            <summary>
            Default requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultRequiresBadge">
            <summary>
            Default requires badge
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.DefaultSpecialInstructions">
            <summary>
            Default special instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.IsShared">
            <summary>
            Is shared template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.IsSystemTemplate">
            <summary>
            Is system template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.UsageCount">
            <summary>
            Usage count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.LastUsedOn">
            <summary>
            Last used date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.CreatedByName">
            <summary>
            Created by name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.ModifiedByName">
            <summary>
            Modified by name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.InvitationTemplateDto.ModifiedOn">
            <summary>
            Modified date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto">
            <summary>
            DTO for updating an existing invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.VisitPurposeId">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.LocationId">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.Subject">
            <summary>
            Subject/title of the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.Message">
            <summary>
            Message/description of the visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.ScheduledStartTime">
            <summary>
            Scheduled start date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.ScheduledEndTime">
            <summary>
            Scheduled end date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.ExpectedVisitorCount">
            <summary>
            Expected number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.SpecialInstructions">
            <summary>
            Special instructions or requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.RequiresApproval">
            <summary>
            Whether pre-approval is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.RequiresEscort">
            <summary>
            Whether escort is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.RequiresBadge">
            <summary>
            Whether badge printing is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.NeedsParking">
            <summary>
            Whether parking is needed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto">
            <summary>
            Data transfer object for creating a new location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Code">
            <summary>
            Location code/identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Building">
            <summary>
            Building name/number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Floor">
            <summary>
            Floor number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Room">
            <summary>
            Room number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.LocationType">
            <summary>
            Location type (Office, Conference Room, Lobby, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Zone">
            <summary>
            Zone or area within the facility
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.ParentLocationId">
            <summary>
            Parent location ID for hierarchical locations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.MaxOccupancy">
            <summary>
            Maximum occupancy allowed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.MaxCapacity">
            <summary>
            Maximum capacity alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.RequiresEscort">
            <summary>
            Whether visitors require an escort to access this location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.IsAccessible">
            <summary>
            Whether the location is accessible (ADA compliant)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.RequiresSecurityClearance">
            <summary>
            Whether security clearance is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.SecurityClearanceLevel">
            <summary>
            Required security clearance level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.AccessLevel">
            <summary>
            Access level alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.AccessInstructions">
            <summary>
            Special access instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Latitude">
            <summary>
            Latitude coordinate for mapping
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto.Longitude">
            <summary>
            Longitude coordinate for mapping
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto">
            <summary>
            DTO for updating a location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Code">
            <summary>
            Location code (unique identifier)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.LocationType">
            <summary>
            Location type (e.g., "Office", "Conference Room", "Building")
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Floor">
            <summary>
            Floor number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Building">
            <summary>
            Building name or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.Zone">
            <summary>
            Zone or area identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.ParentLocationId">
            <summary>
            Parent location ID (for hierarchical locations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.MaxCapacity">
            <summary>
            Maximum capacity for the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.RequiresEscort">
            <summary>
            Whether this location requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.AccessLevel">
            <summary>
            Access level required for this location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto.IsActive">
            <summary>
            Whether this location is active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto">
            <summary>
            Location data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Id">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Code">
            <summary>
            Location code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.LocationType">
            <summary>
            Location type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Floor">
            <summary>
            Floor information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Building">
            <summary>
            Building information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.Zone">
            <summary>
            Zone information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ParentLocationId">
            <summary>
            Parent location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ParentLocationName">
            <summary>
            Parent location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.MaxCapacity">
            <summary>
            Maximum capacity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.RequiresEscort">
            <summary>
            Whether location requires escort
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.AccessLevel">
            <summary>
            Required access level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.IsActive">
            <summary>
            Whether location is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.CreatedBy">
            <summary>
            Created by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ModifiedBy">
            <summary>
            Modified by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.CreatedByUser">
            <summary>
            Created by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ModifiedByUser">
            <summary>
            Modified by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ModifiedOn">
            <summary>
            Modification date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.IsDeleted">
            <summary>
            Whether this location is soft deleted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.DeletedOn">
            <summary>
            Deletion date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.DeletedBy">
            <summary>
            Deleted by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.DeletedByUser">
            <summary>
            Deleted by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.InvitationsCount">
            <summary>
            Related invitations count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Locations.LocationDto.ChildLocations">
            <summary>
            Child locations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.TimeSlots.CreateTimeSlotDto">
            <summary>
            DTO for creating a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.TimeSlots.UpdateTimeSlotDto">
            <summary>
            DTO for updating a time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.TimeSlots.AvailableTimeSlotDto">
            <summary>
            DTO for available time slot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.TimeSlots.TimeSlotDto">
            <summary>
            DTO for time slot data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.AdminPasswordResetDto">
            <summary>
            Admin password reset request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.RoleDto">
            <summary>
            Role DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto">
            <summary>
            Update user preferences request data transfer object
            Handles only user-controllable preference settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto">
            <summary>
            Update user profile request data transfer object for self-service profile updates
            Excludes admin-only fields like role and status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.AddressType">
            <summary>
            Address type (Home, Work, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Street1">
            <summary>
            Street address line 1
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Street2">
            <summary>
            Street address line 2 (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.State">
            <summary>
            State or province
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.PostalCode">
            <summary>
            Postal or ZIP code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Country">
            <summary>
            Country name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserActivationDto">
            <summary>
            User activation request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserDeactivationDto">
            <summary>
            User deactivation request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto">
            <summary>
            User list item data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.PhoneNumber">
            <summary>
            Enhanced phone fields
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.CreatedOn">
            <summary>
            User creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.IsActive">
            <summary>
            Whether user is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.IsLockedOut">
            <summary>
            Whether user is locked out
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto">
            <summary>
            User profile data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Department">
            <summary>
            Department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.JobTitle">
            <summary>
            Job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.AddressType">
            <summary>
            Address type (Home, Work, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Street1">
            <summary>
            Street address line 1
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Street2">
            <summary>
            Street address line 2
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.State">
            <summary>
            State or province
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.PostalCode">
            <summary>
            Postal or ZIP code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Country">
            <summary>
            Country
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Latitude">
            <summary>
            Latitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Longitude">
            <summary>
            Longitude coordinate
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserUnlockDto">
            <summary>
            User unlock request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto">
            <summary>
            DTO for creating a new emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.FirstName">
            <summary>
            Contact first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.LastName">
            <summary>
            Contact last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.Relationship">
            <summary>
            Relationship to visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.Priority">
            <summary>
            Priority order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.IsPrimary">
            <summary>
            Whether this is the primary contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto">
            <summary>
            DTO for creating a new visitor document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.DocumentName">
            <summary>
            Document name/title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.Title">
            <summary>
            Title alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.FilePath">
            <summary>
            File path where document is stored
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.IsRequired">
            <summary>
            Whether the document is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.IsSensitive">
            <summary>
            Whether document is sensitive
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.ExpirationDate">
            <summary>
            Document expiration date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.ExpiryDate">
            <summary>
            Expiry date alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.Tags">
            <summary>
            Tags associated with document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.AccessLevel">
            <summary>
            Access level required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.FileContent">
            <summary>
            File content as base64 string (for small files)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.OriginalFileName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.ContentType">
            <summary>
            MIME type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto.MimeType">
            <summary>
            MIME type alias for consistency
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto">
            <summary>
            DTO for creating a new visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.FirstName">
            <summary>
            Visitor first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.LastName">
            <summary>
            Visitor last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Email">
            <summary>
            Visitor email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.PhoneNumber">
            <summary>
            Visitor phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.JobTitle">
            <summary>
            Job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Address">
            <summary>
            Address information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.DateOfBirth">
            <summary>
            Date of birth
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.GovernmentId">
            <summary>
            Government ID number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.GovernmentIdType">
            <summary>
            Type of government ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Nationality">
            <summary>
            Nationality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Language">
            <summary>
            Preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.DietaryRequirements">
            <summary>
            Dietary requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.AccessibilityRequirements">
            <summary>
            Accessibility requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.SecurityClearance">
            <summary>
            Security clearance level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.IsVip">
            <summary>
            Whether visitor is VIP
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.ExternalId">
            <summary>
            External system ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto.EmergencyContacts">
            <summary>
            Emergency contacts
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto">
            <summary>
            DTO for creating a new visitor note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.Title">
            <summary>
            Note title/subject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.Category">
            <summary>
            Note category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.Priority">
            <summary>
            Priority level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.IsFlagged">
            <summary>
            Whether note is flagged for follow-up
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.IsConfidential">
            <summary>
            Whether note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.FollowUpDate">
            <summary>
            Follow-up date if flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto.Tags">
            <summary>
            Tags associated with the note
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto">
            <summary>
            Emergency contact data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Id">
            <summary>
            Contact ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.FirstName">
            <summary>
            Contact first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.LastName">
            <summary>
            Contact last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.FullName">
            <summary>
            Contact full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Relationship">
            <summary>
            Relationship to visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Priority">
            <summary>
            Priority order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.IsPrimary">
            <summary>
            Whether this is the primary contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.ModifiedOn">
            <summary>
            Last modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.EmergencyContactDto.IsActive">
            <summary>
            Whether contact is active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto">
            <summary>
            DTO for updating an existing emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.FirstName">
            <summary>
            Contact first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.LastName">
            <summary>
            Contact last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.Relationship">
            <summary>
            Relationship to visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.Priority">
            <summary>
            Priority order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.IsPrimary">
            <summary>
            Whether this is the primary contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto">
            <summary>
            DTO for updating an existing visitor document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.DocumentName">
            <summary>
            Document name/title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.Title">
            <summary>
            Title alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.IsSensitive">
            <summary>
            Whether document is sensitive
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.IsRequired">
            <summary>
            Whether the document is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.ExpirationDate">
            <summary>
            Document expiration date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.ExpiryDate">
            <summary>
            Expiry date alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.Tags">
            <summary>
            Tags associated with document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto.AccessLevel">
            <summary>
            Access level required
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto">
            <summary>
            DTO for updating an existing visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.FirstName">
            <summary>
            Visitor first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.LastName">
            <summary>
            Visitor last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Email">
            <summary>
            Visitor email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.PhoneNumber">
            <summary>
            Visitor phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.JobTitle">
            <summary>
            Job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Address">
            <summary>
            Address information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.DateOfBirth">
            <summary>
            Date of birth
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.GovernmentId">
            <summary>
            Government ID number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.GovernmentIdType">
            <summary>
            Type of government ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Nationality">
            <summary>
            Nationality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Language">
            <summary>
            Preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.DietaryRequirements">
            <summary>
            Dietary requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.AccessibilityRequirements">
            <summary>
            Accessibility requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.SecurityClearance">
            <summary>
            Security clearance level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto.ExternalId">
            <summary>
            External system ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto">
            <summary>
            DTO for updating an existing visitor note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.Title">
            <summary>
            Note title/subject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.Category">
            <summary>
            Note category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.Priority">
            <summary>
            Priority level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.IsFlagged">
            <summary>
            Whether note is flagged for follow-up
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.IsConfidential">
            <summary>
            Whether note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.FollowUpDate">
            <summary>
            Follow-up date if flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto.Tags">
            <summary>
            Tags associated with the note
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto">
            <summary>
            Visitor document data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.Id">
            <summary>
            Document ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.DocumentName">
            <summary>
            Document name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.DocumentType">
            <summary>
            Document type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.OriginalFileName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.FormattedFileSize">
            <summary>
            File size formatted for display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.ContentType">
            <summary>
            MIME type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.FileExtension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.IsEncrypted">
            <summary>
            Whether document is encrypted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.IsSensitive">
            <summary>
            Whether document is sensitive
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.ExpirationDate">
            <summary>
            Document expiration date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.IsExpired">
            <summary>
            Whether document is expired
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.Version">
            <summary>
            Document version
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.Tags">
            <summary>
            Tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.AccessLevel">
            <summary>
            Access level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.DownloadUrl">
            <summary>
            Download URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.CreatedByName">
            <summary>
            Created by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.ModifiedOn">
            <summary>
            Last modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDocumentDto.IsActive">
            <summary>
            Whether document is active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto">
            <summary>
            Visitor data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Id">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.FirstName">
            <summary>
            Visitor first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.LastName">
            <summary>
            Visitor last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.FullName">
            <summary>
            Visitor full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Email">
            <summary>
            Visitor email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.PhoneNumber">
            <summary>
            Visitor phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.JobTitle">
            <summary>
            Job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Address">
            <summary>
            Address information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.DateOfBirth">
            <summary>
            Date of birth
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Age">
            <summary>
            Age calculated from date of birth
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.GovernmentId">
            <summary>
            Government ID number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.GovernmentIdType">
            <summary>
            Type of government ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Nationality">
            <summary>
            Nationality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Language">
            <summary>
            Preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.DietaryRequirements">
            <summary>
            Dietary requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.AccessibilityRequirements">
            <summary>
            Accessibility requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.SecurityClearance">
            <summary>
            Security clearance level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.IsVip">
            <summary>
            Whether visitor is VIP
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.IsBlacklisted">
            <summary>
            Whether visitor is blacklisted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.BlacklistReason">
            <summary>
            Blacklist reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.BlacklistedOn">
            <summary>
            Date when blacklisted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.VisitCount">
            <summary>
            Number of visits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.LastVisitDate">
            <summary>
            Date of last visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.Notes">
            <summary>
            Additional notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.ExternalId">
            <summary>
            External system ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.ModifiedOn">
            <summary>
            Last modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.IsActive">
            <summary>
            Whether visitor is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.EmergencyContacts">
            <summary>
            Emergency contacts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.DocumentsCount">
            <summary>
            Documents count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorDto.NotesCount">
            <summary>
            Notes count
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto">
            <summary>
            Simplified visitor list DTO for display purposes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.Id">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.FullName">
            <summary>
            Visitor full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.Email">
            <summary>
            Visitor email address (masked if sensitive)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.PhoneNumber">
            <summary>
            Phone number (masked)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.PhoneCountryCode">
            <summary>
            Phone country code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.PhoneType">
            <summary>
            Phone type (Mobile, Landline, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.IsVip">
            <summary>
            Whether visitor is VIP
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.IsBlacklisted">
            <summary>
            Whether visitor is blacklisted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.VisitCount">
            <summary>
            Number of visits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.LastVisitDate">
            <summary>
            Date of last visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto.IsActive">
            <summary>
            Whether visitor is active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto">
            <summary>
            Visitor note data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Id">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Title">
            <summary>
            Note title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Category">
            <summary>
            Note category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Priority">
            <summary>
            Priority level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.IsFlagged">
            <summary>
            Whether note is flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.IsConfidential">
            <summary>
            Whether note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.FollowUpDate">
            <summary>
            Follow-up date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.IsFollowUpOverdue">
            <summary>
            Whether follow-up is overdue
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.Tags">
            <summary>
            Tags
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.CreatedByName">
            <summary>
            Created by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.ModifiedOn">
            <summary>
            Last modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.ModifiedByName">
            <summary>
            Modified by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorNoteDto.IsActive">
            <summary>
            Whether note is active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto">
            <summary>
            DTO for visitor search parameters
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.SearchTerm">
            <summary>
            Search term for name, email, or company
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.Company">
            <summary>
            Company filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.IsVip">
            <summary>
            VIP status filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.IsBlacklisted">
            <summary>
            Blacklisted status filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.IsActive">
            <summary>
            Active status filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.Nationality">
            <summary>
            Nationality filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.SecurityClearance">
            <summary>
            Security clearance filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.MinVisitCount">
            <summary>
            Minimum visit count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.MaxVisitCount">
            <summary>
            Maximum visit count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.CreatedFrom">
            <summary>
            Created date from
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.CreatedTo">
            <summary>
            Created date to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.LastVisitFrom">
            <summary>
            Last visit date from
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.LastVisitTo">
            <summary>
            Last visit date to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.PageIndex">
            <summary>
            Page index for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.PageSize">
            <summary>
            Page size for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.SortDirection">
            <summary>
            Sort direction
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto.IncludeDeleted">
            <summary>
            Include deleted visitors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto">
            <summary>
            DTO for visitor statistics
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.TotalVisitors">
            <summary>
            Total number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.ActiveVisitors">
            <summary>
            Number of active visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.VipVisitors">
            <summary>
            Number of VIP visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.BlacklistedVisitors">
            <summary>
            Number of blacklisted visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.IncompleteProfiles">
            <summary>
            Number of visitors with incomplete profiles
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.VisitorsThisMonth">
            <summary>
            Visitors created this month
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.VisitorsThisYear">
            <summary>
            Visitors created this year
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.AverageVisitsPerVisitor">
            <summary>
            Average visits per visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.TopCompanies">
            <summary>
            Top companies by visitor count
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.GrowthData">
            <summary>
            Visitor growth data (monthly)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.NationalityDistribution">
            <summary>
            Visitor distribution by nationality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorStatsDto.RecentRegistrations">
            <summary>
            Recent visitor registrations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.CompanyVisitorCountDto">
            <summary>
            Company visitor count DTO
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CompanyVisitorCountDto.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CompanyVisitorCountDto.VisitorCount">
            <summary>
            Number of unique visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CompanyVisitorCountDto.TotalVisits">
            <summary>
            Total number of visits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.CompanyVisitorCountDto.LastVisit">
            <summary>
            Date of last visit from this company
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorGrowthDto">
            <summary>
            Visitor growth data DTO
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorGrowthDto.Period">
            <summary>
            Month/period
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorGrowthDto.NewVisitors">
            <summary>
            Number of new visitors in the period
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorGrowthDto.TotalVisits">
            <summary>
            Total visits in the period
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorGrowthDto.GrowthPercentage">
            <summary>
            Growth percentage from previous period
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto">
            <summary>
            Visit purpose data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Id">
            <summary>
            Purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Name">
            <summary>
            Purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Code">
            <summary>
            Purpose code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Description">
            <summary>
            Purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Icon">
            <summary>
            Icon for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.Color">
            <summary>
            Color for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.DisplayOrder">
            <summary>
            Display order
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.RequiresApproval">
            <summary>
            Whether this purpose requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.MaxDurationHours">
            <summary>
            Maximum duration in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.IsActive">
            <summary>
            Whether purpose is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.CreatedOn">
            <summary>
            Creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.CreatedBy">
            <summary>
            Created by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.ModifiedBy">
            <summary>
            Modified by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.CreatedByUser">
            <summary>
            Created by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.ModifiedByUser">
            <summary>
            Modified by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.ModifiedOn">
            <summary>
            Modification date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.IsDeleted">
            <summary>
            Whether this purpose is soft deleted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.DeletedOn">
            <summary>
            Deletion date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.DeletedBy">
            <summary>
            Deleted by user ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.DeletedByUser">
            <summary>
            Deleted by user name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.VisitPurposeDto.InvitationsCount">
            <summary>
            Related invitations count
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto">
            <summary>
            DTO for creating a visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.Name">
            <summary>
            Visit purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.Description">
            <summary>
            Visit purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.RequiresApproval">
            <summary>
            Whether this purpose requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.IsActive">
            <summary>
            Whether this purpose is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.ColorCode">
            <summary>
            Color code for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto.IconName">
            <summary>
            Icon name for UI display
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto">
            <summary>
            DTO for updating a visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.Name">
            <summary>
            Visit purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.Description">
            <summary>
            Visit purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.RequiresApproval">
            <summary>
            Whether this purpose requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.IsActive">
            <summary>
            Whether this purpose is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.ColorCode">
            <summary>
            Color code for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto.IconName">
            <summary>
            Icon name for UI display
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Mapping.InvitationMappingProfile">
            <summary>
            AutoMapper profile for invitation domain
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Mapping.LocationMappingProfile">
            <summary>
            AutoMapper profile for location mappings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Mapping.UserMappingProfile">
            <summary>
            AutoMapper profile for User entity and related DTO mappings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Mapping.VisitorMappingProfile">
            <summary>
            AutoMapper profile for visitor domain
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Mapping.VisitPurposeMappingProfile">
            <summary>
            AutoMapper profile for visit purpose mappings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetAuditLogsQuery">
            <summary>
            Query to get audit logs with filtering and pagination
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetAuditLogByIdQuery">
            <summary>
            Query to get a specific audit log by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetUserActivityQuery">
            <summary>
            Query to get user activity logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetSystemEventsQuery">
            <summary>
            Query to get system events logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetSecurityEventsQuery">
            <summary>
            Query to get security events logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.SearchAuditLogsQuery">
            <summary>
            Query to search audit logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetAuditLogByIdQueryHandler">
            <summary>
            Handler for getting a specific audit log by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetAuditLogsQueryHandler">
            <summary>
            Handler for getting audit logs with filtering and pagination
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetSecurityEventsQueryHandler">
            <summary>
            Handler for getting security events
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetSystemEventsQueryHandler">
            <summary>
            Handler for getting system events
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.GetUserActivityQueryHandler">
            <summary>
            Handler for getting user activity logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Audit.SearchAuditLogsQueryHandler">
            <summary>
            Handler for searching audit logs
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetCurrentUserQuery">
            <summary>
            Query for getting current user information
            UPDATED: Now uses UserId from JWT claims instead of AccessToken
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetCurrentUserQueryHandler">
            <summary>
            Handler for get current user query
            UPDATED: Now works with UserId from JWT claims
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetUserPermissionsQuery">
            <summary>
            Query for getting user permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetUserPermissionsQueryHandler">
            <summary>
            Handler for get user permissions query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.ValidateTokenQuery">
            <summary>
            Query for validating access token
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.ValidateTokenQueryHandler">
            <summary>
            Handler for validate token query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetCapacityOverviewQuery">
            <summary>
            Query to get capacity overview for multiple locations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetCapacityUtilizationTrendsQuery">
            <summary>
            Query to get capacity utilization trends
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetAlternativeTimeSlotsQuery">
            <summary>
            Query to get alternative time slots
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetCapacitySettingsQuery">
            <summary>
            Query to get capacity settings for all locations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetLocationCapacitySettingsQuery">
            <summary>
            Query to get capacity settings for a specific location
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetOccupancyQuery">
            <summary>
            Query to get current occupancy
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetCapacityStatisticsQuery">
            <summary>
            Query to get capacity statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.GetCapacityTrendsQuery">
            <summary>
            Query to get capacity trends
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery">
            <summary>
            Query to validate capacity for an invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.LocationId">
            <summary>
            Location ID to check capacity for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.TimeSlotId">
            <summary>
            Time slot ID to check capacity for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.DateTime">
            <summary>
            Date and time for the appointment
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.ExpectedVisitors">
            <summary>
            Number of expected visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.IsVipRequest">
            <summary>
            Whether this is a VIP request (can override capacity)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQuery.ExcludeInvitationId">
            <summary>
            Invitation ID to exclude from capacity calculation (for updates)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Capacity.ValidateCapacityQueryHandler">
            <summary>
            Handler for capacity validation query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetAllConfigurationsQuery">
            <summary>
            Query to get all configurations grouped by category
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetCategoryConfigurationQuery">
            <summary>
            Query to get configurations for a specific category
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetConfigurationQuery">
            <summary>
            Query to get a specific configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetConfigurationHistoryQuery">
            <summary>
            Query to get configuration history
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.SearchConfigurationsQuery">
            <summary>
            Query to search configurations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.ValidateConfigurationQuery">
            <summary>
            Query to validate a configuration value
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetAllConfigurationsQueryHandler">
            <summary>
            Handler for getting all configurations grouped by category
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetCategoryConfigurationQueryHandler">
            <summary>
            Handler for getting configurations by category
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetConfigurationHistoryQueryHandler">
            <summary>
            Handler for getting configuration history
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.GetConfigurationQueryHandler">
            <summary>
            Handler for getting a specific configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.SearchConfigurationsQueryHandler">
            <summary>
            Handler for searching configurations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Configuration.ValidateConfigurationQueryHandler">
            <summary>
            Handler for validating configuration values
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactByIdQuery">
            <summary>
            Query to get an emergency contact by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactByIdQuery.Id">
            <summary>
            Emergency contact ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactByIdQuery.IncludeDeleted">
            <summary>
            Include deleted contact
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactByIdQueryHandler">
            <summary>
            Handler for get emergency contact by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactsByVisitorIdQuery">
            <summary>
            Query to get emergency contacts by visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactsByVisitorIdQuery.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactsByVisitorIdQuery.IncludeDeleted">
            <summary>
            Include deleted contacts
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.EmergencyContacts.GetEmergencyContactsByVisitorIdQueryHandler">
            <summary>
            Handler for get emergency contacts by visitor ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQuery">
            <summary>
            Query to get an invitation by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQuery.Id">
            <summary>
            Invitation ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQuery.IncludeDeleted">
            <summary>
            Include deleted invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQuery.IncludeEvents">
            <summary>
            Include events timeline
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQuery.IncludeApprovals">
            <summary>
            Include approvals workflow
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByIdQueryHandler">
            <summary>
            Handler for get invitation by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByNumberQuery">
            <summary>
            Query to get invitation by invitation number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByNumberQuery.InvitationNumber">
            <summary>
            Invitation number to search for
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationByNumberQueryHandler">
            <summary>
            Handler for getting invitation by number query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery">
            <summary>
            Query to get invitations with filtering and paging
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.PageNumber">
            <summary>
            Page number (1-based)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.SearchTerm">
            <summary>
            Search term (searches invitation number, visitor name, host name, subject)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.Status">
            <summary>
            Filter by invitation status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.Type">
            <summary>
            Filter by invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.HostId">
            <summary>
            Filter by host ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.VisitorId">
            <summary>
            Filter by visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.VisitPurposeId">
            <summary>
            Filter by visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.LocationId">
            <summary>
            Filter by location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.StartDate">
            <summary>
            Filter by date range - start date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.EndDate">
            <summary>
            Filter by date range - end date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.IncludeDeleted">
            <summary>
            Include deleted invitations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.PendingApprovalsOnly">
            <summary>
            Only pending approvals
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.ActiveOnly">
            <summary>
            Only active invitations (checked in visitors)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.ExpiredOnly">
            <summary>
            Only expired invitations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.SortBy">
            <summary>
            Sort field
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQuery.SortDirection">
            <summary>
            Sort direction (asc/desc)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationsQueryHandler">
            <summary>
            Handler for get invitations query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQuery">
            <summary>
            Query to get invitation statistics
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQuery.StartDate">
            <summary>
            Optional date range filter - start date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQuery.EndDate">
            <summary>
            Optional date range filter - end date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQuery.HostId">
            <summary>
            Optional host filter - only statistics for specific host
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQuery.IncludeDeleted">
            <summary>
            Include deleted invitations in statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Invitations.GetInvitationStatisticsQueryHandler">
            <summary>
            Handler for getting invitation statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationByIdQuery">
            <summary>
            Query to get location by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationByIdQuery.Id">
            <summary>
            Location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationByIdQuery.IncludeChildren">
            <summary>
            Include child locations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationByIdQueryHandler">
            <summary>
            Handler for getting location by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQuery">
            <summary>
            Query to get all locations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQuery.LocationType">
            <summary>
            Location type filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQuery.RootOnly">
            <summary>
            Only root locations (no parent)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQuery.IncludeChildren">
            <summary>
            Include child locations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQuery.IncludeInactive">
            <summary>
            Include inactive locations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Locations.GetLocationsQueryHandler">
            <summary>
            Handler for get locations query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetAvailableTimeSlotsQueryHandler">
            <summary>
            Handler for getting available time slots for a specific date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetTimeSlotByIdQueryHandler">
            <summary>
            Handler for getting a time slot by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetTimeSlotsQueryHandler">
            <summary>
            Handler for getting paginated time slots
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetTimeSlotsQuery">
            <summary>
            Query to get time slots with filtering and pagination
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetTimeSlotByIdQuery">
            <summary>
            Query to get a time slot by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.TimeSlots.GetAvailableTimeSlotsQuery">
            <summary>
            Query to get available time slots for a specific date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetAvailableRolesQuery">
            <summary>
            Query for getting available user roles
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetAvailableRolesQueryHandler">
            <summary>
            Handler for GetAvailableRolesQuery
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetCurrentUserProfileQuery">
            <summary>
            Query to get current user's profile information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetCurrentUserProfileQueryHandler">
            <summary>
            Handler for getting current user profile
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserActivityQuery">
            <summary>
            Query for getting user activity log
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserActivityQueryHandler">
            <summary>
            Handler for GetUserActivityQuery
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserByIdQuery">
            <summary>
            Query for getting a specific user by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUsersQuery">
            <summary>
            Query for getting paginated list of users with filtering and sorting
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentByIdQuery">
            <summary>
            Query to get a visitor document by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentByIdQuery.Id">
            <summary>
            Document ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentByIdQuery.IncludeDeleted">
            <summary>
            Include deleted document
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentByIdQueryHandler">
            <summary>
            Handler for get visitor document by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentsByVisitorIdQuery">
            <summary>
            Query to get visitor documents by visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentsByVisitorIdQuery.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentsByVisitorIdQuery.DocumentType">
            <summary>
            Document type filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentsByVisitorIdQuery.IncludeDeleted">
            <summary>
            Include deleted documents
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorDocuments.GetVisitorDocumentsByVisitorIdQueryHandler">
            <summary>
            Handler for get visitor documents by visitor ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNoteByIdQuery">
            <summary>
            Query to get a visitor note by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNoteByIdQuery.Id">
            <summary>
            Note ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNoteByIdQuery.IncludeDeleted">
            <summary>
            Include deleted note
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNoteByIdQueryHandler">
            <summary>
            Handler for get visitor note by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery">
            <summary>
            Query to get visitor notes by visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery.VisitorId">
            <summary>
            Visitor ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery.Category">
            <summary>
            Category filter
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery.IsFlagged">
            <summary>
            Only flagged notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery.IsConfidential">
            <summary>
            Only confidential notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQuery.IncludeDeleted">
            <summary>
            Include deleted notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitorNotes.GetVisitorNotesByVisitorIdQueryHandler">
            <summary>
            Handler for get visitor notes by visitor ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetBlacklistedVisitorsQuery">
            <summary>
            Query for getting blacklisted visitors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetBlacklistedVisitorsQueryHandler">
            <summary>
            Handler for get blacklisted visitors query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVipVisitorsQuery">
            <summary>
            Query for getting VIP visitors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVipVisitorsQueryHandler">
            <summary>
            Handler for get VIP visitors query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorByIdQuery">
            <summary>
            Query for getting a visitor by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorByIdQueryHandler">
            <summary>
            Handler for get visitor by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorsQuery">
            <summary>
            Query for getting visitors with pagination and filtering
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorsQueryHandler">
            <summary>
            Handler for get visitors query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorStatsQuery">
            <summary>
            Query for getting visitor statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.GetVisitorStatsQueryHandler">
            <summary>
            Handler for get visitor stats query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.SearchVisitorsQuery">
            <summary>
            Query for advanced visitor search
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Visitors.SearchVisitorsQueryHandler">
            <summary>
            Handler for search visitors query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposeByIdQuery">
            <summary>
            Query to get visit purpose by ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposeByIdQuery.Id">
            <summary>
            Visit purpose ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposeByIdQueryHandler">
            <summary>
            Handler for getting visit purpose by ID query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposesQuery">
            <summary>
            Query to get all visit purposes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposesQuery.RequiresApproval">
            <summary>
            Only purposes that require approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposesQuery.IncludeInactive">
            <summary>
            Include inactive purposes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.VisitPurposes.GetVisitPurposesQueryHandler">
            <summary>
            Handler for get visit purposes query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.AuthService">
            <summary>
            Authentication service implementation with cookie-based token management
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService">
            <summary>
            Authentication service interface for login, logout, and token management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LoginAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates user with email and password
            </summary>
            <param name="loginRequest">Login request with credentials</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Authentication result with tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.RefreshTokenAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Refreshes access token using refresh token
            </summary>
            <param name="refreshTokenRequest">Refresh token request</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New authentication tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LogoutAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs out user and revokes refresh token
            </summary>
            <param name="userId">User ID</param>
            <param name="refreshToken">Refresh token to revoke</param>
            <param name="ipAddress">Client IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Logout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LogoutFromAllDevicesAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs out user from all devices
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Reason for logout</param>
            <param name="ipAddress">Client IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Logout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ChangePasswordAsync(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto,System.Threading.CancellationToken)">
            <summary>
            Changes user password
            </summary>
            <param name="userId">User ID</param>
            <param name="changePasswordRequest">Password change request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password change result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.InitiatePasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates password reset process
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ResetPasswordAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets password using reset token
            </summary>
            <param name="resetPasswordRequest">Password reset request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ValidateTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates access token
            </summary>
            <param name="accessToken">Access token to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetCurrentUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current user information from token
            </summary>
            <param name="accessToken">Access token</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Current user information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ValidateCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates user credentials without creating session
            </summary>
            <param name="email">User email</param>
            <param name="password">User password</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if credentials are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetLockoutStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user account is locked out
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.UnlockAccountAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Unlocks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="unlockedBy">ID of user performing unlock</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unlocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetUserSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user sessions information
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.TerminateSessionAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Terminates specific user session
            </summary>
            <param name="userId">User ID</param>
            <param name="sessionId">Session ID to terminate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if session terminated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetSecureCookieOptions(System.Boolean,Microsoft.AspNetCore.Http.SameSiteMode)">
            <summary>
            Generates secure cookie options for authentication
            </summary>
            <param name="isSecure">Whether to use secure flag</param>
            <param name="sameSite">SameSite policy</param>
            <returns>Cookie options</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.SetAuthenticationCookies(Microsoft.AspNetCore.Http.HttpResponse,VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult,System.Boolean)">
            <summary>
            Creates authentication cookies for response
            </summary>
            <param name="response">HTTP response</param>
            <param name="authResult">Authentication result</param>
            <param name="isSecure">Whether to use secure cookies</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ClearAuthenticationCookies(Microsoft.AspNetCore.Http.HttpResponse,System.Boolean)">
            <summary>
            Clears authentication cookies from response
            </summary>
            <param name="response">HTTP response</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ExtractTokensFromCookies(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Extracts tokens from request cookies
            </summary>
            <param name="request">HTTP request</param>
            <returns>Token information from cookies</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService">
            <summary>
            JWT token service interface for generating and validating JWT tokens
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateAccessTokenAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates an access token for the user
            </summary>
            <param name="user">User entity</param>
            <param name="permissions">User permissions</param>
            <param name="additionalClaims">Additional claims to include</param>
            <returns>JWT token information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateRefreshTokenAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a refresh token for the user
            </summary>
            <param name="user">User entity</param>
            <param name="jwtId">JWT ID from access token</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <returns>Refresh token entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateTokenAsync(System.String,System.Boolean)">
            <summary>
            Validates and parses a JWT token
            </summary>
            <param name="token">JWT token to validate</param>
            <param name="validateLifetime">Whether to validate token expiration</param>
            <returns>Token validation result with claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetClaimsFromToken(System.String)">
            <summary>
            Extracts claims from a JWT token without validation
            </summary>
            <param name="token">JWT token</param>
            <returns>Claims principal</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetTokenExpiration(System.String)">
            <summary>
            Gets the expiration time of a JWT token
            </summary>
            <param name="token">JWT token</param>
            <returns>Expiration time or null if invalid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetJwtId(System.String)">
            <summary>
            Gets the JWT ID from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>JWT ID or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetUserId(System.String)">
            <summary>
            Gets the user ID from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>User ID or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetSecurityStamp(System.String)">
            <summary>
            Gets the security stamp from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>Security stamp or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.IsTokenExpired(System.String)">
            <summary>
            Checks if a token is expired
            </summary>
            <param name="token">JWT token</param>
            <returns>True if token is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.IsTokenNearExpiry(System.String,System.Int32)">
            <summary>
            Checks if a token is close to expiration
            </summary>
            <param name="token">JWT token</param>
            <param name="thresholdMinutes">Threshold in minutes</param>
            <returns>True if token expires within threshold</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GeneratePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates a password reset token
            </summary>
            <param name="user">User entity</param>
            <param name="purpose">Token purpose</param>
            <returns>Reset token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidatePasswordResetToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Validates a password reset token
            </summary>
            <param name="token">Reset token</param>
            <param name="user">User entity</param>
            <param name="purpose">Expected token purpose</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateEmailConfirmationToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates an email confirmation token
            </summary>
            <param name="user">User entity</param>
            <returns>Email confirmation token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateEmailConfirmationToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates an email confirmation token
            </summary>
            <param name="token">Confirmation token</param>
            <param name="user">User entity</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateTwoFactorToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates a two-factor authentication token
            </summary>
            <param name="user">User entity</param>
            <returns>2FA token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateTwoFactorToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates a two-factor authentication token
            </summary>
            <param name="token">2FA token</param>
            <param name="user">User entity</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.CreateUserClaims(VisitorManagementSystem.Api.Domain.Entities.User,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates claims for a user
            </summary>
            <param name="user">User entity</param>
            <param name="permissions">User permissions</param>
            <param name="additionalClaims">Additional claims</param>
            <returns>List of claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.RevokeAllUserTokensAsync(System.Int32)">
            <summary>
            Revokes all tokens for a user by updating security stamp
            </summary>
            <param name="userId">User ID</param>
            <returns>New security stamp</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.JwtTokenResult">
            <summary>
            JWT token generation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.JwtValidationResult">
            <summary>
            JWT validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService">
            <summary>
            Password service interface for password hashing, validation, and policy enforcement
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.HashPassword(System.String)">
            <summary>
            Hashes a password with a new salt
            </summary>
            <param name="password">Plain text password</param>
            <returns>Password hash result with hash and salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.VerifyPassword(System.String,System.String,System.String)">
            <summary>
            Verifies a password against its hash
            </summary>
            <param name="password">Plain text password</param>
            <param name="hash">Stored password hash</param>
            <param name="salt">Password salt</param>
            <returns>True if password is correct</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePassword(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates password against security policy
            </summary>
            <param name="password">Password to validate</param>
            <param name="user">User entity (for context-specific validation)</param>
            <returns>Password validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GeneratePassword(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates a secure random password
            </summary>
            <param name="length">Password length</param>
            <param name="includeSpecialCharacters">Include special characters</param>
            <param name="excludeSimilarCharacters">Exclude visually similar characters</param>
            <returns>Generated password</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.CalculateStrength(System.String)">
            <summary>
            Calculates password strength score
            </summary>
            <param name="password">Password to analyze</param>
            <returns>Password strength result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.MeetsMinimumRequirements(System.String)">
            <summary>
            Checks if password meets minimum requirements
            </summary>
            <param name="password">Password to check</param>
            <returns>True if password meets requirements</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordCompromisedAsync(System.String)">
            <summary>
            Checks if password is commonly used or compromised
            </summary>
            <param name="password">Password to check</param>
            <returns>True if password is compromised</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordRecentlyUsedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if password has been used recently by user
            </summary>
            <param name="userId">User ID</param>
            <param name="password">New password</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if password was used recently</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.SavePasswordHistoryAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves password to user's password history
            </summary>
            <param name="userId">User ID</param>
            <param name="passwordHash">Password hash</param>
            <param name="passwordSalt">Password salt</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordExpired(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Checks if password is expired for user
            </summary>
            <param name="user">User entity</param>
            <returns>True if password is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordExpiryDate(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Gets password expiry date for user
            </summary>
            <param name="user">User entity</param>
            <returns>Password expiry date</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetDaysUntilPasswordExpiry(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Gets days until password expires
            </summary>
            <param name="user">User entity</param>
            <returns>Days until expiry, or null if no expiry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GenerateResetInstructions(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates password reset instructions
            </summary>
            <param name="user">User entity</param>
            <returns>Password reset instructions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePasswordChangeAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String,System.String)">
            <summary>
            Validates new password change request
            </summary>
            <param name="user">User entity</param>
            <param name="currentPassword">Current password</param>
            <param name="newPassword">New password</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordPolicy">
            <summary>
            Gets password policy configuration
            </summary>
            <returns>Password policy</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.UpdatePasswordPolicyAsync(VisitorManagementSystem.Api.Application.Services.Auth.PasswordPolicy)">
            <summary>
            Updates password policy
            </summary>
            <param name="policy">New password policy</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordRequirements">
            <summary>
            Gets password complexity requirements as user-friendly text
            </summary>
            <returns>List of requirements</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ContainsPersonalInformation(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Checks if password contains user's personal information
            </summary>
            <param name="password">Password to check</param>
            <param name="user">User entity</param>
            <returns>True if password contains personal info</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GeneratePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates password reset token for user
            </summary>
            <param name="user">User entity</param>
            <returns>Reset token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Validates password reset token
            </summary>
            <param name="user">User entity</param>
            <param name="token">Reset token</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ClearPasswordHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Clears password history for user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GenerateTemporaryPassword">
            <summary>
            Generates a temporary password for administrative password resets
            </summary>
            <returns>Generated temporary password</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordHashResult">
            <summary>
            Password hash result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordValidationResult">
            <summary>
            Password validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordStrengthResult">
            <summary>
            Password strength result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordStrength">
            <summary>
            Password strength levels
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordChangeValidationResult">
            <summary>
            Password change validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordResetInstructions">
            <summary>
            Password reset instructions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordPolicy">
            <summary>
            Password policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordHistory">
            <summary>
            Password history entry
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService">
            <summary>
            Permission service interface for managing user permissions and authorization
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetUserPermissionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all permissions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of user permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetUserPermissionsByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all permissions for a user by email
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of user permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetRolePermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets permissions for a specific role
            </summary>
            <param name="role">User role</param>
            <returns>List of role permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasPermissionAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user has a specific permission
            </summary>
            <param name="userId">User ID</param>
            <param name="permission">Permission to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasAnyPermissionAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Checks if user has any of the specified permissions
            </summary>
            <param name="userId">User ID</param>
            <param name="permissions">Permissions to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has any of the permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasAllPermissionsAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Checks if user has all of the specified permissions
            </summary>
            <param name="userId">User ID</param>
            <param name="permissions">Permissions to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanPerformActionAsync(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if user can perform an action on a resource
            </summary>
            <param name="userId">User ID</param>
            <param name="action">Action to perform</param>
            <param name="resource">Resource type</param>
            <param name="resourceId">Resource ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Authorization result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetAllPermissions">
            <summary>
            Gets all available permissions in the system
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of category to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.IsValidPermission(System.String)">
            <summary>
            Validates if a permission exists
            </summary>
            <param name="permission">Permission to validate</param>
            <returns>True if permission exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionCategory(System.String)">
            <summary>
            Gets permission category
            </summary>
            <param name="permission">Permission</param>
            <returns>Category name or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionDescription(System.String)">
            <summary>
            Gets permission description
            </summary>
            <param name="permission">Permission</param>
            <returns>Permission description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanManageUserAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if user can manage another user (role hierarchy)
            </summary>
            <param name="managerId">Manager user ID</param>
            <param name="targetUserId">Target user ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if manager can manage target user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetAssignableRolesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets roles that can be assigned by a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of assignable roles</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanAssignRoleAsync(System.Int32,VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Threading.CancellationToken)">
            <summary>
            Checks if user can assign a specific role
            </summary>
            <param name="userId">User ID</param>
            <param name="targetRole">Role to assign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user can assign the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetResourcePermissionsAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets resource-specific permissions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="resourceType">Resource type</param>
            <param name="resourceId">Resource ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of permissions for the specific resource</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.BuildPermissionClaims(System.Collections.Generic.List{System.String})">
            <summary>
            Builds permission claims for JWT token
            </summary>
            <param name="permissions">User permissions</param>
            <returns>Permission claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ExtractPermissionsFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Extracts permissions from claims
            </summary>
            <param name="claims">Claims collection</param>
            <returns>List of permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateApiAccessAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates permission-based access to API endpoint
            </summary>
            <param name="userId">User ID</param>
            <param name="httpMethod">HTTP method</param>
            <param name="endpoint">API endpoint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetRequiredPermissions(System.String,System.String)">
            <summary>
            Gets permissions required for an API endpoint
            </summary>
            <param name="httpMethod">HTTP method</param>
            <param name="endpoint">API endpoint</param>
            <returns>List of required permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasElevatedPrivilegesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if user has elevated privileges
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has elevated privileges</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionAuditInfoAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets permission audit information
            </summary>
            <param name="userId">User ID</param>
            <param name="permission">Permission</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Permission audit information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateTimeBasedAccessAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Validates time-based access restrictions
            </summary>
            <param name="userId">User ID</param>
            <param name="currentTime">Current time</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed at current time</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateIpBasedAccessAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user can access from current IP address
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed from IP</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.AuthorizationResult">
            <summary>
            Authorization result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionAuditInfo">
            <summary>
            Permission audit information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionRequirement">
            <summary>
            Permission requirement attribute data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.ApiEndpointPermission">
            <summary>
            API endpoint permission mapping
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService">
            <summary>
            Refresh token service interface for managing refresh token lifecycle
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.CreateRefreshTokenAsync(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new refresh token for user
            </summary>
            <param name="userId">User ID</param>
            <param name="jwtId">Associated JWT ID</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New refresh token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ValidateRefreshTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates and retrieves refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.UseRefreshTokenAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uses refresh token (marks as used and creates replacement)
            </summary>
            <param name="token">Token value</param>
            <param name="newJwtId">New JWT ID for replacement</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage result with new token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeRefreshTokenAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes a specific refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token was revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeAllUserTokensAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeTokensByDeviceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetActiveTokensAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets active refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenByJwtIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh token by JWT ID
            </summary>
            <param name="jwtId">JWT ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.IsTokenValidAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if token is valid and not expired
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenExpirationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets token expiration time
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Expiration time or null if token not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ExtendTokenExpirationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Extends token expiration
            </summary>
            <param name="token">Token value</param>
            <param name="extensionPeriod">Extension period</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if extended successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.CleanupExpiredTokensAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Performs token cleanup (removes expired tokens)
            </summary>
            <param name="retentionPeriod">How long to keep expired tokens</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenUsageStatisticsAsync(System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets token usage statistics
            </summary>
            <param name="userId">Optional user ID filter</param>
            <param name="days">Number of days to analyze</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.DetectSuspiciousActivityAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Detects suspicious token activity
            </summary>
            <param name="hours">Hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of suspicious activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetConcurrentSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets concurrent sessions for user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of concurrent sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.EnforceSessionLimitsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Enforces concurrent session limits
            </summary>
            <param name="userId">User ID</param>
            <param name="maxSessions">Maximum allowed sessions</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of sessions terminated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ValidateDeviceConsistencyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates device fingerprint consistency
            </summary>
            <param name="token">Token value</param>
            <param name="currentDeviceFingerprint">Current device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Device validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenFamilyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets token family/chain information
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token family information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RotateTokenAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Rotates refresh token (security best practice)
            </summary>
            <param name="oldToken">Current token</param>
            <param name="newJwtId">New JWT ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token rotation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GenerateSecureTokenValue">
            <summary>
            Generates secure refresh token value
            </summary>
            <returns>Secure token value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.IsValidTokenFormat(System.String)">
            <summary>
            Validates token format and structure
            </summary>
            <param name="token">Token value</param>
            <returns>True if token format is valid</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenValidationResult">
            <summary>
            Refresh token validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenUsageResult">
            <summary>
            Refresh token usage result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenInfo">
            <summary>
            Refresh token information for display
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenUsageStatistics">
            <summary>
            Token usage statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.UserSessionInfo">
            <summary>
            User session information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.DeviceValidationResult">
            <summary>
            Device validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenFamilyInfo">
            <summary>
            Token family/chain information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenRotationResult">
            <summary>
            Token rotation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService">
            <summary>
            Interface for two-factor authentication operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.GenerateCodeAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a two-factor authentication code for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Generated code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.ValidateCodeAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a two-factor authentication code
            </summary>
            <param name="userId">User ID</param>
            <param name="code">Code to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if code is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.EnableTwoFactorAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Enables two-factor authentication for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Setup key/QR code data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.DisableTwoFactorAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Disables two-factor authentication for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.IsTwoFactorEnabledAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if two-factor authentication is enabled for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if enabled</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.GenerateRecoveryCodesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates recovery codes for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of recovery codes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.ITwoFactorService.ValidateRecoveryCodeAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a recovery code
            </summary>
            <param name="userId">User ID</param>
            <param name="recoveryCode">Recovery code to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if code is valid</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.JwtService">
            <summary>
            JWT service implementation for token generation and validation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordService">
            <summary>
            Password service implementation for hashing, validation, and policy enforcement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionService">
            <summary>
            Permission service implementation for managing user permissions and authorization
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenService">
            <summary>
            Refresh token service implementation for managing token lifecycle
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TwoFactorService">
            <summary>
            Two-factor authentication service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService">
            <summary>
            Service for managing facility capacity and occupancy
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.ValidateCapacityAsync(VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto,System.Threading.CancellationToken)">
            <summary>
            Validates if capacity is available for a new invitation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.GetCurrentOccupancyAsync(System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets current occupancy for a specific date/time/location
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.GetMaxCapacityAsync(System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets maximum capacity for a specific date/time/location
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.GetActiveTimeSlotForDateTime(System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets active time slot for a specific date/time
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.GetAlternativeTimeSlotsAsync(System.DateTime,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets alternative time slots when capacity is unavailable
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.UpdateOccupancyForInvitationAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates occupancy when invitation status changes
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.CapacityService.GetOccupancyStatisticsAsync(System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets occupancy statistics for a date range
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService">
            <summary>
            Interface for capacity management services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.ValidateCapacityAsync(VisitorManagementSystem.Api.Application.DTOs.Capacity.CapacityValidationRequestDto,System.Threading.CancellationToken)">
            <summary>
            Validates if capacity is available for a new invitation
            </summary>
            <param name="request">Capacity validation request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Capacity validation response</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.GetCurrentOccupancyAsync(System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets current occupancy for a specific date/time/location
            </summary>
            <param name="dateTime">Date and time</param>
            <param name="locationId">Location ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Current occupancy count</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.GetMaxCapacityAsync(System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets maximum capacity for a specific date/time/location
            </summary>
            <param name="dateTime">Date and time</param>
            <param name="locationId">Location ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Maximum capacity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.GetAlternativeTimeSlotsAsync(System.DateTime,System.Int32,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets alternative time slots when capacity is unavailable
            </summary>
            <param name="originalDateTime">Original requested date/time</param>
            <param name="expectedVisitors">Number of expected visitors</param>
            <param name="locationId">Location ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of alternative time slots</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.UpdateOccupancyForInvitationAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates occupancy when invitation status changes
            </summary>
            <param name="invitationId">Invitation ID</param>
            <param name="oldStatus">Previous status</param>
            <param name="newStatus">New status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Capacity.ICapacityService.GetOccupancyStatisticsAsync(System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets occupancy statistics for a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="locationId">Location ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Occupancy statistics</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Configuration.DynamicConfigurationService">
            <summary>
            Dynamic configuration service implementation for managing database-driven settings
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.DynamicConfigurationService.ConvertValue``1(System.String,System.String)">
            <summary>
            Converts configuration value to specified type
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.DynamicConfigurationService.LogConfigurationChangeAsync(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs configuration changes to audit table
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService">
            <summary>
            Interface for dynamic configuration management service
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetConfigurationAsync``1(System.String,System.String,``0,System.Threading.CancellationToken)">
            <summary>
            Gets a configuration value with strong typing
            </summary>
            <typeparam name="T">Type to convert value to</typeparam>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Configuration value or default</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetConfigurationValueAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a configuration value as string
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="defaultValue">Default value if not found</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Configuration value or default</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.SetConfigurationAsync``1(System.String,System.String,``0,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets a configuration value with strong typing
            </summary>
            <typeparam name="T">Type of the value</typeparam>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="value">Configuration value</param>
            <param name="modifiedBy">User making the change</param>
            <param name="reason">Reason for change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.SetConfigurationValueAsync(System.String,System.String,System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sets a configuration value as string
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="value">Configuration value</param>
            <param name="modifiedBy">User making the change</param>
            <param name="reason">Reason for change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetCategoryConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all configurations for a category as a dictionary
            </summary>
            <param name="category">Configuration category</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary of key-value pairs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetAllConfigurationsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all configurations as a hierarchical structure
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary grouped by category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.DeleteConfigurationAsync(System.String,System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a configuration
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="modifiedBy">User making the change</param>
            <param name="reason">Reason for deletion</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.InvalidateCacheAsync(System.String)">
            <summary>
            Invalidates cache for specific category or all configurations
            </summary>
            <param name="category">Category to invalidate, null for all</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.InvalidateAllCacheAsync">
            <summary>
            Invalidates all configuration caches
            </summary>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetConfigurationMetadataAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets configuration metadata
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Configuration metadata</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.GetConfigurationHistoryAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets configuration history
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="pageSize">Number of records to retrieve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.ValidateConfigurationAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a configuration value
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="value">Value to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.CreateConfigurationAsync(VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Creates a new configuration
            </summary>
            <param name="configuration">Configuration to create</param>
            <param name="modifiedBy">User creating the configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created configuration</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Configuration.IDynamicConfigurationService.SearchConfigurationsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Searches configurations
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="category">Optional category filter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching configurations</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Configuration.ValidationResult">
            <summary>
            Configuration validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Csv.CsvService">
            <summary>
            CSV service implementation for invitation workflows
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GenerateInvitationTemplateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates a blank CSV template for manual invitation creation with reference sheets
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GetActiveHostsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets active hosts from the database for reference data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GetRecentVisitorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets recent visitors from the database for reference data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.CreateMainTemplateCSV(System.IO.Compression.ZipArchive,System.Boolean)">
            <summary>
            Creates the main invitation template CSV in the archive
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.CreateHostsReferenceCSV(System.IO.Compression.ZipArchive,System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto})">
            <summary>
            Creates the hosts reference CSV in the archive
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.CreateVisitorsReferenceCSV(System.IO.Compression.ZipArchive,System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto})">
            <summary>
            Creates the visitors reference CSV in the archive
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.CreateInstructionsCSV(System.IO.Compression.ZipArchive,System.Boolean)">
            <summary>
            Creates the instructions CSV in the archive
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GenerateEnhancedTemplateRows(System.Boolean)">
            <summary>
            Generates enhanced template rows with reference to IDs
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ParseFilledInvitationAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses a filled CSV invitation file
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GenerateFilledInvitationCsvAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates a filled invitation CSV for an existing invitation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ValidateCsvStructureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Validates CSV structure and required fields
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GenerateFilledRows(VisitorManagementSystem.Api.Domain.Entities.Invitation)">
            <summary>
            Generates filled rows for an existing invitation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ParseHostSection(System.Collections.Generic.List{VisitorManagementSystem.Api.Application.Services.Csv.CsvInvitationRow},VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Parses host section from CSV records
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ParseVisitorSections(System.Collections.Generic.List{VisitorManagementSystem.Api.Application.Services.Csv.CsvInvitationRow},VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Parses visitor sections from CSV records
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ParseMeetingSection(System.Collections.Generic.List{VisitorManagementSystem.Api.Application.Services.Csv.CsvInvitationRow},VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Parses meeting section from CSV records
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ValidateParsedData(VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Validates parsed invitation data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GetFieldValue(System.Collections.Generic.List{VisitorManagementSystem.Api.Application.Services.Csv.CsvInvitationRow},System.String)">
            <summary>
            Gets field value from CSV records
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.ParseBooleanField(System.String)">
            <summary>
            Parses boolean field from string
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvService.GetCsvConfiguration">
            <summary>
            Gets CSV configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Csv.CsvInvitationRow">
            <summary>
            CSV invitation row model
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Csv.ICsvService">
            <summary>
            CSV service interface for invitation workflows
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.ICsvService.GenerateInvitationTemplateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates a blank CSV template for manual invitation creation
            </summary>
            <param name="includeMultipleVisitors">Whether to include rows for multiple visitors</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>CSV template as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.ICsvService.ParseFilledInvitationAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses a filled CSV invitation file
            </summary>
            <param name="csvStream">CSV stream to parse</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Parsed invitation data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.ICsvService.GenerateFilledInvitationCsvAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates a filled invitation CSV for an existing invitation
            </summary>
            <param name="invitation">Invitation entity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Filled CSV as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.ICsvService.ValidateCsvStructureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Validates CSV structure and required fields
            </summary>
            <param name="csvStream">CSV stream to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult">
            <summary>
            CSV validation result
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.IsValid">
            <summary>
            Whether the CSV is valid
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.Errors">
            <summary>
            Validation errors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.RowCount">
            <summary>
            Number of rows found
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.ColumnHeaders">
            <summary>
            List of found column headers
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.VisitorRowCount">
            <summary>
            Number of visitor rows detected
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.Success(System.Int32,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Creates a successful validation result
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Csv.CsvValidationResult.Failure(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a failed validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment">
            <summary>
            Email attachment model
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment.FileName">
            <summary>
            Attachment file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment.Content">
            <summary>
            Attachment content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment.MimeType">
            <summary>
            MIME type of the attachment
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment.Create(System.String,System.Byte[],System.String)">
            <summary>
            Creates an email attachment
            </summary>
            <param name="fileName">File name</param>
            <param name="content">File content</param>
            <param name="mimeType">MIME type</param>
            <returns>Email attachment</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage">
            <summary>
            Email message model
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.To">
            <summary>
            Recipient email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.Subject">
            <summary>
            Email subject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.Body">
            <summary>
            Email body (HTML or plain text)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.IsHtml">
            <summary>
            Whether the body is HTML
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.CcAddresses">
            <summary>
            CC recipients
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.BccAddresses">
            <summary>
            BCC recipients
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.Attachments">
            <summary>
            Email attachments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Email.EmailMessage.Priority">
            <summary>
            Priority level
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.EmailPriority">
            <summary>
            Email priority levels
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.EmailService">
            <summary>
            Email service implementation using MailKit
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailService.GetEmailConfigurationAsync(System.Threading.CancellationToken)">
            <summary>
            Gets email configuration with caching
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Populated EmailConfiguration object</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailService.LoadEmailConfigurationFromDatabaseAsync(System.Threading.CancellationToken)">
            <summary>
            Loads all email configuration from database and populates EmailConfiguration object
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Populated EmailConfiguration object</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailService.InvalidateConfigurationCache">
            <summary>
            Invalidates email configuration cache (call this when email settings are updated)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailService.GetConfigValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Helper method to safely get configuration values with type conversion
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="configs">Configuration dictionary</param>
            <param name="key">Configuration key</param>
            <param name="defaultValue">Default value if not found or conversion fails</param>
            <returns>Converted value or default</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.EmailTemplateService">
            <summary>
            Email template service implementation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailTemplateService.GenerateCsvInvitationTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates CSV invitation template email
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.EmailTemplateService.GenerateXlsxInvitationTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates XLSX invitation template email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.IEmailService">
            <summary>
            Email service interface
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.SendAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a simple email
            </summary>
            <param name="to">Recipient email</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.SendWithAttachmentsAsync(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{VisitorManagementSystem.Api.Application.Services.Email.EmailAttachment},System.Threading.CancellationToken)">
            <summary>
            Sends an email with attachments
            </summary>
            <param name="to">Recipient email</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body</param>
            <param name="attachments">Email attachments</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.SendAsync(VisitorManagementSystem.Api.Application.Services.Email.EmailMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a complex email message
            </summary>
            <param name="message">Email message</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.ValidateConfigurationAsync(System.Threading.CancellationToken)">
            <summary>
            Validates email configuration
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if configuration is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.TestConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Tests email connectivity
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if connection successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.ValidateConnectionAsync">
            <summary>
            Validates the email connection and configuration (synchronous wrapper)
            </summary>
            <returns>True if connection is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailService.InvalidateConfigurationCache">
            <summary>
            Invalidates email configuration cache (call this when email settings are updated)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService">
            <summary>
            Email template service interface
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GenerateInvitationApprovedTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation)">
            <summary>
            Generates invitation approved email template
            </summary>
            <param name="invitation">Invitation</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GeneratePasswordResetTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates password reset email template
            </summary>
            <param name="user">User</param>
            <param name="resetToken">Reset token</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GeneratePdfInvitationTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates PDF invitation template email
            </summary>
            <param name="host">Host user</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GenerateVisitorCheckedInTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation)">
            <summary>
            Generates visitor check-in notification template
            </summary>
            <param name="invitation">Invitation</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GenerateWelcomeTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates welcome email template
            </summary>
            <param name="user">User</param>
            <param name="temporaryPassword">Temporary password</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GenerateCsvInvitationTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates CSV invitation template email
            </summary>
            <param name="host">Host user</param>
            <param name="customMessage">Custom message to include</param>
            <returns>Email content</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Email.IEmailTemplateService.GenerateXlsxInvitationTemplateAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates XLSX invitation template email
            </summary>
            <param name="host">Host user</param>
            <param name="customMessage">Custom message to include</param>
            <returns>Email content</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.FileUploadService">
            <summary>
            Implementation of file upload service for handling profile photos
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.IFileUploadService">
            <summary>
            Service for handling file uploads, particularly profile photos
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.UploadProfilePhotoAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads a profile photo for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="file">Image file</param>
            <returns>File path/URL of uploaded photo</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.RemoveProfilePhotoAsync(System.Int32)">
            <summary>
            Removes a user's profile photo
            </summary>
            <param name="userId">User ID</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.IsValidImageFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validates if file is a valid image
            </summary>
            <param name="file">File to validate</param>
            <returns>True if valid image</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.GetProfilePhotoUrl(System.String)">
            <summary>
            Gets the full URL for a profile photo
            </summary>
            <param name="filePath">File path</param>
            <returns>Full URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.UploadVisitorDocumentAsync(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String)">
            <summary>
            Uploads a visitor document
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="file">Document file</param>
            <param name="documentType">Type of document</param>
            <returns>File path/URL of uploaded document</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.RemoveVisitorDocumentAsync(System.String)">
            <summary>
            Removes a visitor document file
            </summary>
            <param name="filePath">File path to remove</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.IsValidDocumentFile(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validates if file is a valid visitor document
            </summary>
            <param name="file">File to validate</param>
            <returns>True if valid document</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.GetVisitorDocumentUrl(System.String)">
            <summary>
            Gets the full URL for a visitor document
            </summary>
            <param name="filePath">File path</param>
            <returns>Full URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.GetAllowedDocumentExtensions">
            <summary>
            Gets allowed document file extensions
            </summary>
            <returns>List of allowed extensions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.IFileUploadService.GetMaxDocumentFileSize">
            <summary>
            Gets maximum document file size in bytes
            </summary>
            <returns>Maximum file size</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult">
            <summary>
            Document upload result
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.Success">
            <summary>
            Whether the upload was successful
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.FilePath">
            <summary>
            File path if successful
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.OriginalFileName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.MimeType">
            <summary>
            MIME type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.ErrorMessage">
            <summary>
            Error message if failed
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.CreateSuccess(System.String,System.String,System.Int64,System.String)">
            <summary>
            Creates a successful result
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.DocumentUploadResult.Failure(System.String)">
            <summary>
            Creates a failed result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService">
            <summary>
            PDF service interface for invitation workflows
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService.GenerateInvitationTemplateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates a blank PDF template for manual invitation creation
            </summary>
            <param name="includeMultipleVisitors">Whether to include sections for multiple visitors</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>PDF template as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService.ParseFilledInvitationAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses a filled PDF invitation form
            </summary>
            <param name="pdfStream">PDF stream to parse</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Parsed invitation data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService.GenerateFilledInvitationPdfAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates a filled invitation PDF for an existing invitation
            </summary>
            <param name="invitation">Invitation entity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Filled PDF as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService.GenerateInvitationSummaryPdfAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Generates an invitation summary PDF with QR code
            </summary>
            <param name="invitation">Invitation entity</param>
            <param name="qrCodeBytes">QR code image bytes</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Summary PDF as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.IPdfService.ValidatePdfStructureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Validates PDF structure and form fields
            </summary>
            <param name="pdfStream">PDF stream to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData">
            <summary>
            Parsed invitation data from PDF
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData.Host">
            <summary>
            Host information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData.Visitors">
            <summary>
            List of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData.Meeting">
            <summary>
            Meeting information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData.ValidationErrors">
            <summary>
            Validation errors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData.IsValid">
            <summary>
            Whether the parsed data is valid
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedHostData">
            <summary>
            Parsed host data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedVisitorData">
            <summary>
            Parsed visitor data
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedVisitorData.IsExistingVisitor">
            <summary>
            Indicates if this is an existing visitor from the system
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedVisitorData.ExistingVisitorId">
            <summary>
            The ID of the existing visitor (if IsExistingVisitor is true)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedEmergencyContact">
            <summary>
            Parsed emergency contact
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.ParsedMeetingData">
            <summary>
            Parsed meeting data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult">
            <summary>
            PDF validation result
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.IsValid">
            <summary>
            Whether the PDF is valid
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.Errors">
            <summary>
            Validation errors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.HasFormFields">
            <summary>
            Whether the PDF has form fields
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.FormFieldNames">
            <summary>
            List of found form field names
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.Success(System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a successful validation result
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Pdf.PdfValidationResult.Failure(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a failed validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Pdf.PdfService">
            <summary>
            PDF service implementation using iText7
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService">
            <summary>
            QR code service interface
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.GenerateQrCodeImageAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates QR code image as byte array
            </summary>
            <param name="data">Data to encode in QR code</param>
            <param name="size">Size of the QR code in pixels (default: 300)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>QR code image as PNG byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.GenerateInvitationQrDataAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates QR code data for an invitation
            </summary>
            <param name="invitation">Invitation entity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>QR code data string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.ValidateQrCodeDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates QR code data format
            </summary>
            <param name="qrData">QR code data to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if QR data is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.ExtractInvitationNumberFromQrData(System.String)">
            <summary>
            Extracts invitation number from QR code data
            </summary>
            <param name="qrData">QR code data</param>
            <returns>Invitation number if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.GenerateVisitorCheckInQrDataAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates visitor check-in QR code data
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="invitationId">Invitation ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>QR code data for visitor check-in</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.IQrCodeService.GenerateBrandedQrCodeImageAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates QR code with logo/branding
            </summary>
            <param name="data">Data to encode</param>
            <param name="logoPath">Path to logo image (optional)</param>
            <param name="size">QR code size</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Branded QR code image</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult">
            <summary>
            QR code validation result
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.IsValid">
            <summary>
            Whether the QR code is valid
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.InvitationNumber">
            <summary>
            Extracted invitation number (if valid)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.VisitorId">
            <summary>
            Extracted visitor ID (if valid)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.Type">
            <summary>
            QR code type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.ErrorMessage">
            <summary>
            Validation error message (if invalid)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.Success(System.String,System.Nullable{System.Int32},VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeType)">
            <summary>
            Creates a successful validation result
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeValidationResult.Failure(System.String)">
            <summary>
            Creates a failed validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeType">
            <summary>
            QR code types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.QrCode.QrCodeService">
            <summary>
            QR code service implementation using QRCoder
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService">
            <summary>
            Interface for user activity tracking and management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService.GetUserActivityAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user activity history
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of user activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService.GetUserActivityAsync(System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets paginated user activity history
            </summary>
            <param name="userId">User ID</param>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated user activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService.RecordActivityAsync(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records a user activity
            </summary>
            <param name="userId">User ID</param>
            <param name="activityType">Type of activity</param>
            <param name="description">Activity description</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService.GetActivityStatsAsync(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Gets user activity statistics
            </summary>
            <param name="userId">User ID</param>
            <param name="fromDate">Start date</param>
            <param name="toDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Activity statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserActivityService.CleanupOldActivitiesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Clears old activity records
            </summary>
            <param name="olderThanDays">Delete records older than specified days</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of deleted records</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserActivityStatsDto">
            <summary>
            User activity statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService">
            <summary>
            User lockout service interface for managing account lockouts and failed login attempts
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.RecordFailedLoginAttemptAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records a failed login attempt for user
            </summary>
            <param name="email">User email</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="failureReason">Reason for failure</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.RecordSuccessfulLoginEventAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login event only (no database changes)
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.RecordSuccessfulLoginWithoutSaveAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login without calling SaveChanges (for transaction coordination)
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.RecordSuccessfulLoginAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records a successful login and resets failed attempts
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetLockoutStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user account is currently locked out
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.LockUserAccountAsync(System.Int32,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Manually locks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Lockout reason</param>
            <param name="duration">Lockout duration (null for indefinite)</param>
            <param name="lockedBy">ID of user performing the lockout</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.UnlockUserAccountAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Manually unlocks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Unlock reason</param>
            <param name="unlockedBy">ID of user performing the unlock</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unlocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetFailedLoginAttemptsAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets failed login attempts for user within time period
            </summary>
            <param name="email">User email</param>
            <param name="timeWindow">Time window to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of failed attempts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetFailedLoginAttemptsByIpAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets failed login attempts by IP address
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="timeWindow">Time window to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of failed attempts from IP</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.CheckIpRateLimitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if IP address is rate limited
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rate limit status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.BlockIpAddressAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Temporarily blocks IP address
            </summary>
            <param name="ipAddress">IP address to block</param>
            <param name="reason">Block reason</param>
            <param name="duration">Block duration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if blocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.UnblockIpAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Unblocks IP address
            </summary>
            <param name="ipAddress">IP address to unblock</param>
            <param name="reason">Unblock reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unblocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetLockoutConfiguration">
            <summary>
            Gets lockout configuration
            </summary>
            <returns>Lockout configuration</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.UpdateLockoutConfigurationAsync(VisitorManagementSystem.Api.Application.Services.Users.LockoutConfiguration,System.Threading.CancellationToken)">
            <summary>
            Updates lockout configuration
            </summary>
            <param name="configuration">New configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetUserSecurityEventsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets security events for user
            </summary>
            <param name="userId">User ID</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of security events</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetSystemSecurityEventsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets system-wide security events
            </summary>
            <param name="hours">Hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of security events</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.AnalyzeLoginPatternAsync(System.Int32,VisitorManagementSystem.Api.Application.Services.Users.LoginAttempt,System.Threading.CancellationToken)">
            <summary>
            Analyzes login patterns for anomalies
            </summary>
            <param name="userId">User ID</param>
            <param name="currentAttempt">Current login attempt details</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Anomaly detection result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetLockedUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets locked users that require attention
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locked users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GetUsersAtRiskAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users close to lockout threshold
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users at risk</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.GenerateLockoutReportAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Generates lockout report
            </summary>
            <param name="startDate">Report start date</param>
            <param name="endDate">Report end date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout report</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.PerformAutomatedCleanupAsync(System.Threading.CancellationToken)">
            <summary>
            Performs automated lockout cleanup
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.SendLockoutNotificationAsync(System.Int32,VisitorManagementSystem.Api.Application.Services.Users.LockoutResult,System.Threading.CancellationToken)">
            <summary>
            Sends lockout notifications
            </summary>
            <param name="userId">User ID</param>
            <param name="lockoutResult">Lockout result</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserLockoutService.ValidateLockoutBypassAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Validates lockout bypass attempt
            </summary>
            <param name="userId">User ID</param>
            <param name="bypassCode">Bypass code</param>
            <param name="requestedBy">User requesting bypass</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Bypass validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockoutResult">
            <summary>
            Lockout result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockoutStatus">
            <summary>
            Lockout status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.RateLimitStatus">
            <summary>
            Rate limit status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockoutConfiguration">
            <summary>
            Lockout configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.SecurityEvent">
            <summary>
            Security event
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LoginAttempt">
            <summary>
            Login attempt details
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.AnomalyDetectionResult">
            <summary>
            Anomaly detection result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockedUserInfo">
            <summary>
            Locked user information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserAtRiskInfo">
            <summary>
            User at risk information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockoutReport">
            <summary>
            Lockout report
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.LockoutCleanupResult">
            <summary>
            Lockout cleanup result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.BypassValidationResult">
            <summary>
            Bypass validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService">
            <summary>
            Interface for user preferences management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.UpdatePreferencesAsync(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto,System.Threading.CancellationToken)">
            <summary>
            Updates user preferences
            </summary>
            <param name="userId">User ID</param>
            <param name="preferences">Preferences to update</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.GetPreferencesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user preferences
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User preferences</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.ResetToDefaultsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Resets user preferences to defaults
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.UpdateThemeAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates user theme preference
            </summary>
            <param name="userId">User ID</param>
            <param name="theme">Theme name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.UpdateLanguageAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates user language preference
            </summary>
            <param name="userId">User ID</param>
            <param name="language">Language code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserPreferencesService.UpdateTimeZoneAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Updates user timezone preference
            </summary>
            <param name="userId">User ID</param>
            <param name="timeZone">Timezone</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.IUserService">
            <summary>
            Interface for user management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.GetUserByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user by ID
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.CreateUserAsync(VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto,System.Threading.CancellationToken)">
            <summary>
            Creates a new user
            </summary>
            <param name="createUserDto">User creation data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Created user ID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.UpdateUserAsync(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto,System.Threading.CancellationToken)">
            <summary>
            Updates user information
            </summary>
            <param name="userId">User ID</param>
            <param name="updateUserDto">Update data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.DeleteUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deletes a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.GetUsersAsync(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets users with pagination
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="searchTerm">Search term</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.ActivateUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Activates a user account
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.IUserService.DeactivateUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Deactivates a user account
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserActivityService">
            <summary>
            User activity service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserLockoutService">
            <summary>
            User lockout service implementation for managing account lockouts and failed login attempts
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.UserLockoutService.RecordSuccessfulLoginEventAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login event only (no database changes)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.UserLockoutService.RecordSuccessfulLoginWithoutSaveAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login without calling SaveChanges (for transaction coordination)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Users.UserLockoutService.RecordFailedAttemptForIpAsync(System.String)">
            <summary>
            Records a failed login attempt for an IP address
            </summary>
            <param name="ipAddress">IP address</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserPreferencesService">
            <summary>
            User preferences service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Users.UserService">
            <summary>
            User service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService">
            <summary>
            Service interface for visitor business logic
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ValidateVisitorForCreationAsync(VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto)">
            <summary>
            Validates visitor information before creation
            </summary>
            <param name="createDto">Visitor creation data</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ValidateVisitorForUpdateAsync(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto)">
            <summary>
            Validates visitor information before update
            </summary>
            <param name="id">Visitor ID</param>
            <param name="updateDto">Visitor update data</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ValidateVisitorForDeletionAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if visitor can be deleted
            </summary>
            <param name="id">Visitor ID</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.MergeVisitorsAsync(System.Int32,System.Collections.Generic.List{System.Int32},System.Int32)">
            <summary>
            Merges duplicate visitor records
            </summary>
            <param name="primaryVisitorId">Primary visitor to keep</param>
            <param name="duplicateVisitorIds">Duplicate visitors to merge</param>
            <param name="mergedBy">User performing the merge</param>
            <returns>Merged visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.FindPotentialDuplicatesAsync(VisitorManagementSystem.Api.Domain.Entities.Visitor)">
            <summary>
            Finds potential duplicate visitors
            </summary>
            <param name="visitor">Visitor to check for duplicates</param>
            <returns>List of potential duplicates</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.UpdateProfilePhotoAsync(System.Int32,System.String,System.Int32)">
            <summary>
            Updates visitor's profile photo
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="photoPath">Path to the new photo</param>
            <param name="updatedBy">User performing the update</param>
            <returns>Updated visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.RemoveProfilePhotoAsync(System.Int32,System.Int32)">
            <summary>
            Removes visitor's profile photo
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="updatedBy">User performing the update</param>
            <returns>Updated visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.GetCompleteVisitorProfileAsync(System.Int32)">
            <summary>
            Gets visitor's complete profile with all related data
            </summary>
            <param name="visitorId">Visitor ID</param>
            <returns>Complete visitor profile</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ArchiveOldVisitorsAsync(System.Int32,System.Int32)">
            <summary>
            Archives old visitor records
            </summary>
            <param name="olderThanDays">Archive visitors older than specified days</param>
            <param name="archivedBy">User performing the archival</param>
            <returns>Number of archived visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.RestoreVisitorAsync(System.Int32,System.Int32)">
            <summary>
            Restores archived visitor records
            </summary>
            <param name="visitorId">Visitor ID to restore</param>
            <param name="restoredBy">User performing the restoration</param>
            <returns>Restored visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ExportVisitorsAsync(System.Collections.Generic.List{System.Int32},System.String)">
            <summary>
            Exports visitor data
            </summary>
            <param name="visitorIds">List of visitor IDs to export</param>
            <param name="format">Export format (CSV, Excel, JSON)</param>
            <returns>Exported data as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.AnonymizeVisitorDataAsync(System.Int32,System.Int32)">
            <summary>
            Anonymizes visitor data for GDPR compliance
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="anonymizedBy">User performing the anonymization</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Visitors.IVisitorService.ValidateBusinessRulesAsync(VisitorManagementSystem.Api.Domain.Entities.Visitor,VisitorManagementSystem.Api.Application.Services.Visitors.VisitorOperation)">
            <summary>
            Validates business rules for visitor operations
            </summary>
            <param name="visitor">Visitor entity</param>
            <param name="operation">Operation being performed</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Visitors.ValidationResult">
            <summary>
            Validation result for visitor operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Visitors.VisitorOperation">
            <summary>
            Visitor operation types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Visitors.VisitorService">
            <summary>
            Service for visitor business logic
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Xlsx.IXlsxService">
            <summary>
            XLSX service interface for invitation workflows with dropdown support
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.IXlsxService.GenerateInvitationTemplateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates a blank XLSX template with dropdowns for manual invitation creation
            </summary>
            <param name="includeMultipleVisitors">Whether to include rows for multiple visitors</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>XLSX template as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.IXlsxService.ParseFilledInvitationAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses a filled XLSX invitation file
            </summary>
            <param name="xlsxStream">XLSX stream to parse</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Parsed invitation data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.IXlsxService.GenerateFilledInvitationXlsxAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates a filled invitation XLSX for an existing invitation
            </summary>
            <param name="invitation">Invitation entity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Filled XLSX as byte array</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.IXlsxService.ValidateXlsxStructureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Validates XLSX structure and required fields
            </summary>
            <param name="xlsxStream">XLSX stream to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult">
            <summary>
            XLSX validation result
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.IsValid">
            <summary>
            Whether the XLSX is valid
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.Errors">
            <summary>
            Validation errors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.DataRowCount">
            <summary>
            Number of data rows found
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.WorksheetNames">
            <summary>
            List of found worksheets
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.VisitorRowCount">
            <summary>
            Number of visitor rows detected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.HasRequiredWorksheets">
            <summary>
            Whether required worksheets exist
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.Success(System.Int32,System.Collections.Generic.List{System.String},System.Int32,System.Boolean)">
            <summary>
            Creates a successful validation result
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxValidationResult.Failure(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a failed validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService">
            <summary>
            XLSX service implementation for invitation workflows with dropdown support
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GenerateInvitationTemplateAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Generates a blank XLSX template with dropdowns for manual invitation creation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GetActiveHostsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets active hosts from the database for dropdown population
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GetRecentVisitorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets recent visitors from the database for dropdown population
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateInstructionsWorksheet(OfficeOpenXml.ExcelPackage)">
            <summary>
            Creates the instructions worksheet with usage guide
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateMainDataWorksheet(OfficeOpenXml.ExcelPackage,System.Boolean)">
            <summary>
            Creates the main data entry worksheet with structured input fields
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateHostSection(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates the host selection section
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateMeetingSection(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            Creates the meeting details section
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateVisitorsSection(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            Creates the visitors section with support for multiple visitors
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateHostsReferenceWorksheet(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto})">
            <summary>
            Creates the hosts reference worksheet (hidden from users)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateVisitorsReferenceWorksheet(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto})">
            <summary>
            Creates the visitors reference worksheet (hidden from users)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.CreateMetadataWorksheet(OfficeOpenXml.ExcelPackage,System.Boolean)">
            <summary>
            Creates the metadata worksheet with template information
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ConfigureDropdownsAndValidation(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto},System.Collections.Generic.List{VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorListDto},System.Boolean)">
            <summary>
            Configures dropdowns and data validation for the main worksheet
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.FindFieldRow(OfficeOpenXml.ExcelWorksheet,System.String,System.Int32)">
            <summary>
            Finds the row number for a specific field in the worksheet
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ConfigureYesNoDropdowns(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Configures Yes/No dropdowns for boolean fields
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ConfigureDateValidation(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            Configures date validation for date/time fields
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseFilledInvitationAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Parses a filled XLSX invitation file
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseHostInformation(OfficeOpenXml.ExcelWorksheet,VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData,OfficeOpenXml.ExcelPackage,System.Threading.CancellationToken)">
            <summary>
            Parses host information from the XLSX file
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseHostFromDropdownValue(System.String,OfficeOpenXml.ExcelPackage)">
            <summary>
            Parses host information from dropdown value format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseMeetingInformation(OfficeOpenXml.ExcelWorksheet,VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Parses meeting information from the XLSX file
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GetFieldValue(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            Gets field value from worksheet by field name
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseBooleanField(System.String)">
            <summary>
            Parses boolean field from string value
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseVisitorInformation(OfficeOpenXml.ExcelWorksheet,VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData,OfficeOpenXml.ExcelPackage,System.Threading.CancellationToken)">
            <summary>
            Parses visitor information from the XLSX file
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GetVisitorFieldValue(OfficeOpenXml.ExcelWorksheet,System.String,System.Int32)">
            <summary>
            Gets visitor-specific field value by visitor index
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ParseVisitorFromDropdownValue(System.String,OfficeOpenXml.ExcelPackage,System.Threading.CancellationToken)">
            <summary>
            Parses existing visitor from dropdown value
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GetWorksheetByName(System.String)">
            <summary>
            Gets worksheet by name from the package
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ValidateParsedData(VisitorManagementSystem.Api.Application.Services.Pdf.ParsedInvitationData)">
            <summary>
            Validates the parsed invitation data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.GenerateFilledInvitationXlsxAsync(VisitorManagementSystem.Api.Domain.Entities.Invitation,System.Threading.CancellationToken)">
            <summary>
            Generates a filled invitation XLSX for an existing invitation
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.FillInvitationData(OfficeOpenXml.ExcelPackage,VisitorManagementSystem.Api.Domain.Entities.Invitation)">
            <summary>
            Fills the XLSX template with invitation data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.SetFieldValue(OfficeOpenXml.ExcelWorksheet,System.String,System.String)">
            <summary>
            Sets field value in worksheet by field name
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Xlsx.XlsxService.ValidateXlsxStructureAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Validates XLSX structure and required fields
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.EmailConfiguration">
            <summary>
            Email service configuration
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.SmtpHost">
            <summary>
            SMTP server host
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.SmtpPort">
            <summary>
            SMTP server port
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.Username">
            <summary>
            SMTP username
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.Password">
            <summary>
            SMTP password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.FromEmail">
            <summary>
            From email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.FromName">
            <summary>
            From display name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.EnableSsl">
            <summary>
            Enable SSL/TLS
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.TimeoutSeconds">
            <summary>
            Connection timeout in seconds
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.MaxAttachmentSizeMB">
            <summary>
            Maximum attachment size in MB
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.EnableSending">
            <summary>
            Enable email sending (for testing/staging environments)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.TestEmail">
            <summary>
            Fallback email for testing (when EnableSending is false)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.TemplateDirectory">
            <summary>
            Email template directory path
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.CompanyLogoUrl">
            <summary>
            Company logo URL for email templates
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.CompanyWebsiteUrl">
            <summary>
            Company website URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.EmailConfiguration.SupportEmail">
            <summary>
            Support email address
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.JwtConfiguration">
            <summary>
            JWT configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.SecretKey">
            <summary>
            Secret key for signing JWT tokens (must be at least 256 bits)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Issuer">
            <summary>
            Token issuer
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Audience">
            <summary>
            Token audience
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ExpiryInMinutes">
            <summary>
            Access token expiry time in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RefreshTokenExpiryInDays">
            <summary>
            Refresh token expiry time in days
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Algorithm">
            <summary>
            Algorithm used for signing tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateIssuerSigningKey">
            <summary>
            Whether to validate the issuer signing key
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateIssuer">
            <summary>
            Whether to validate the issuer
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateAudience">
            <summary>
            Whether to validate the audience
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateLifetime">
            <summary>
            Whether to validate the token lifetime
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RequireExpirationTime">
            <summary>
            Whether to require expiration time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ClockSkewMinutes">
            <summary>
            Clock skew tolerance in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.PasswordResetTokenExpiryMinutes">
            <summary>
            Password reset token expiry in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.EmailConfirmationTokenExpiryHours">
            <summary>
            Email confirmation token expiry in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.TwoFactorTokenExpiryMinutes">
            <summary>
            Two-factor authentication token expiry in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.AllowConcurrentSessions">
            <summary>
            Whether to allow multiple concurrent sessions per user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.MaxConcurrentSessions">
            <summary>
            Maximum number of concurrent sessions per user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RotateRefreshTokens">
            <summary>
            Whether to rotate refresh tokens on usage
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RevokeFamilyOnSuspiciousActivity">
            <summary>
            Whether to revoke refresh token families on suspicious activity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SecurityConfiguration">
            <summary>
            Security configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.PasswordPolicy">
            <summary>
            Password policy settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Lockout">
            <summary>
            Account lockout settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.RateLimiting">
            <summary>
            Rate limiting settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.EncryptionKeys">
            <summary>
            Encryption keys
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.SessionSecurity">
            <summary>
            Session security settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Cors">
            <summary>
            CORS settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Https">
            <summary>
            HTTPS settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.ContentSecurityPolicy">
            <summary>
            Content Security Policy settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.PasswordPolicyConfiguration">
            <summary>
            Password policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.LockoutConfiguration">
            <summary>
            Account lockout configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.RateLimitingConfiguration">
            <summary>
            Rate limiting configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ApiRateLimit">
            <summary>
            API rate limit settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.EncryptionKeysConfiguration">
            <summary>
            Encryption keys configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SessionSecurityConfiguration">
            <summary>
            Session security configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.CorsConfiguration">
            <summary>
            CORS configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.HttpsConfiguration">
            <summary>
            HTTPS configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ContentSecurityPolicyConfiguration">
            <summary>
            Content Security Policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.Admin.AuditController">
            <summary>
            Admin controller for managing audit logs and system activity tracking
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.GetAuditLogs(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.String,System.Boolean)">
            <summary>
            Gets paginated audit logs with filtering and sorting
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.GetAuditLog(System.Int32)">
            <summary>
            Gets a specific audit log entry
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.GetUserActivity(System.Int32,System.Int32,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets user activity audit logs
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.GetSystemEvents(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gets system events audit logs
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.GetSecurityEvents(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Gets security events audit logs
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.SearchAuditLogs(System.String,System.Int32,System.Int32,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Searches audit logs
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.ExportAuditLogs(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
            <summary>
            Exports audit logs to CSV or Excel
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.AuditController.MarkAuditLogsAsReviewed(VisitorManagementSystem.Api.Application.DTOs.Audit.MarkAuditLogsReviewedDto)">
            <summary>
            Marks audit logs as reviewed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController">
            <summary>
            Admin controller for managing system configurations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.GetAllConfigurations">
            <summary>
            Gets all configurations grouped by category
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.GetCategoryConfiguration(System.String)">
            <summary>
            Gets all configurations for a specific category
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.GetConfiguration(System.String,System.String)">
            <summary>
            Gets a specific configuration value
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.UpdateConfiguration(System.String,System.String,VisitorManagementSystem.Api.Application.DTOs.Configuration.UpdateConfigurationDto)">
            <summary>
            Updates a configuration value
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.CreateConfiguration(VisitorManagementSystem.Api.Application.DTOs.Configuration.CreateConfigurationDto)">
            <summary>
            Creates a new configuration
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.DeleteConfiguration(System.String,System.String,VisitorManagementSystem.Api.Application.DTOs.Configuration.DeleteConfigurationDto)">
            <summary>
            Deletes a configuration
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.GetConfigurationHistory(System.String,System.String,System.Int32)">
            <summary>
            Gets configuration history/audit trail
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.SearchConfigurations(System.String,System.String)">
            <summary>
            Searches configurations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.ValidateConfiguration(System.String,System.String,VisitorManagementSystem.Api.Application.DTOs.Configuration.ValidateConfigurationDto)">
            <summary>
            Validates a configuration value without saving
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.Admin.ConfigurationController.InvalidateCache(System.String)">
            <summary>
            Invalidates configuration cache
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.AuthController">
            <summary>
            Authentication controller for login, logout, and token management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.Login(VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto)">
            <summary>
            Authenticates user and sets secure cookies
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.RefreshToken(VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto)">
            <summary>
            Refreshes access token using refresh token from cookies
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.Logout(System.Boolean)">
            <summary>
            Logs out user and clears authentication cookies
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ChangePassword(VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto)">
            <summary>
            Changes user password
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ForgotPassword(VisitorManagementSystem.Api.Application.DTOs.Auth.ForgotPasswordRequestDto)">
            <summary>
            Initiates password reset process
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ResetPassword(VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto)">
            <summary>
            Resets password using reset token
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetCurrentUser">
            <summary>
            Gets current user information
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetUserPermissions">
            <summary>
            Gets user permissions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ValidateToken">
            <summary>
            Validates current access token
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetUserSessions">
            <summary>
            Gets user's active sessions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.TerminateSession(System.Int32)">
            <summary>
            Terminates a specific session
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.DebugClaims">
            <summary>
            Debug endpoint to view user claims
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.BaseController">
            <summary>
            Base controller providing common functionality for all API controllers
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserId">
            <summary>
            Gets the current user ID from claims
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserEmail">
            <summary>
            Gets the current user email from claims
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserName">
            <summary>
            Gets the current user's full name from claims
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserRole">
            <summary>
            Gets the current user's role from claims
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserPermissions">
            <summary>
            Gets all user permissions from claims
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasPermission(System.String)">
            <summary>
            Checks if current user has a specific permission
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAnyPermission(System.String[])">
            <summary>
            Checks if current user has any of the specified permissions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAllPermissions(System.String[])">
            <summary>
            Checks if current user has all of the specified permissions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasRole(System.String)">
            <summary>
            Checks if current user has a specific role
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAnyRole(System.String[])">
            <summary>
            Checks if current user has any of the specified roles
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetClientIpAddress">
            <summary>
            Gets the client IP address
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetUserAgent">
            <summary>
            Gets the user agent string
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCorrelationId">
            <summary>
            Gets the correlation ID for request tracking
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestId">
            <summary>
            Gets the request ID from headers or generates a new one
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSessionId">
            <summary>
            Gets the session ID if available
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetModelStateErrors">
            <summary>
            Gets model state errors as a list
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetModelStateErrorsByField">
            <summary>
            Gets model state errors grouped by field
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SuccessResponse``1(``0,System.String)">
            <summary>
            Creates a successful response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SuccessResponse(System.String)">
            <summary>
            Creates a successful response without data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.BadRequestResponse(System.String,System.String)">
            <summary>
            Creates a bad request response with single error
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.BadRequestResponse(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a bad request response with multiple errors
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ValidationError(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a validation error response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ValidationError(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            Creates a validation error response with field-specific errors
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.UnauthorizedResponse(System.String)">
            <summary>
            Creates an unauthorized response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ForbiddenResponse(System.String)">
            <summary>
            Creates a forbidden response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.NotFoundResponse(System.String,System.Object)">
            <summary>
            Creates a not found response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ServerErrorResponse(System.String)">
            <summary>
            Creates a server error response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.CreatedResponse``1(``0,System.String,System.String)">
            <summary>
            Creates a created response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.CanAccessUserResource(System.Int32,System.String)">
            <summary>
            Validates that the current user can access a resource owned by a specific user
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetPaginationParameters(System.Int32,System.Int32)">
            <summary>
            Gets pagination parameters from query string
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSortParameters(System.String,System.String[])">
            <summary>
            Gets sort parameters from query string
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSearchTerm(System.Int32)">
            <summary>
            Gets search term from query string
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetCacheHeaders(System.TimeSpan,System.Boolean)">
            <summary>
            Adds cache control headers
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetNoCacheHeaders">
            <summary>
            Adds no-cache headers
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetSecurityHeaders">
            <summary>
            Adds security headers to the response.
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.IsMobileRequest">
            <summary>
            Checks if request is from mobile device
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestProtocol">
            <summary>
            Gets request protocol
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestUrl">
            <summary>
            Gets full request URL
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetBaseUrl">
            <summary>
            Gets base URL
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.CapacityController">
            <summary>
            Controller for capacity monitoring and validation operations
            Focuses on monitoring existing capacity rather than CRUD operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.ValidateCapacity(System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime,System.Int32,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Validates capacity for a specific date/time/location
            </summary>
            <param name="locationId">Location ID (optional)</param>
            <param name="timeSlotId">Time slot ID (optional)</param>
            <param name="dateTime">Date and time</param>
            <param name="expectedVisitors">Expected number of visitors</param>
            <param name="isVipRequest">Whether this is a VIP request</param>
            <param name="excludeInvitationId">Invitation ID to exclude (for updates)</param>
            <returns>Capacity validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.GetOccupancy(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Gets current occupancy for a specific date/time/location
            </summary>
            <param name="dateTime">Date and time</param>
            <param name="locationId">Location ID (optional)</param>
            <returns>Current occupancy information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.GetCapacityStatistics(System.DateTime,System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Gets occupancy statistics for a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="locationId">Location ID (optional)</param>
            <returns>Capacity statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.GetAlternativeTimeSlots(System.DateTime,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets alternative time slots when capacity is unavailable
            </summary>
            <param name="originalDateTime">Original requested date/time</param>
            <param name="expectedVisitors">Number of expected visitors</param>
            <param name="locationId">Location ID (optional)</param>
            <returns>Alternative time slots</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.GetCapacityOverview(System.Nullable{System.DateTime},System.Int32[])">
            <summary>
            Gets real-time capacity overview for multiple locations
            </summary>
            <param name="dateTime">Date and time to check</param>
            <param name="locationIds">Specific location IDs (optional)</param>
            <returns>Capacity overview for all/specified locations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CapacityController.GetCapacityTrends(System.DateTime,System.DateTime,System.Nullable{System.Int32},System.String)">
            <summary>
            Gets capacity utilization trends for monitoring
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="locationId">Location ID (optional)</param>
            <param name="groupBy">Group by period (hour, day, week)</param>
            <returns>Capacity utilization trends</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.CsvController">
            <summary>
            Controller for CSV operations in visitor management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CsvController.DownloadInvitationTemplate(System.Boolean)">
            <summary>
            Downloads a blank CSV invitation template with reference sheets
            </summary>
            <param name="multipleVisitors">Include sections for multiple visitors</param>
            <returns>ZIP file containing CSV template and reference sheets</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CsvController.UploadFilledInvitation(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads and processes a filled CSV invitation
            </summary>
            <param name="csvFile">Filled CSV invitation file</param>
            <returns>Processing result with created invitation details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CsvController.ValidateCsv(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validates CSV structure and required fields
            </summary>
            <param name="csvFile">CSV file to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.CsvController.SendCsvTemplate(VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto)">
            <summary>
            Sends CSV invitation template via email to a host
            </summary>
            <param name="emailDto">Email details</param>
            <returns>Email sending result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto">
            <summary>
            DTO for sending CSV template via email
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto.HostName">
            <summary>
            Host name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto.HostEmail">
            <summary>
            Host email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto.IncludeMultipleVisitors">
            <summary>
            Include multiple visitor sections
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendCsvTemplateDto.CustomMessage">
            <summary>
            Custom message to include in email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.EmergencyContactsController">
            <summary>
            Controller for emergency contact management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.EmergencyContactsController.GetEmergencyContacts(System.Int32,System.Boolean)">
            <summary>
            Gets emergency contacts for a visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="includeDeleted">Include deleted contacts</param>
            <returns>List of emergency contacts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.EmergencyContactsController.GetEmergencyContact(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an emergency contact by ID
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Emergency contact ID</param>
            <param name="includeDeleted">Include deleted contact</param>
            <returns>Emergency contact details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.EmergencyContactsController.CreateEmergencyContact(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateEmergencyContactDto)">
            <summary>
            Creates a new emergency contact
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="createDto">Emergency contact creation data</param>
            <returns>Created emergency contact</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.EmergencyContactsController.UpdateEmergencyContact(System.Int32,System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateEmergencyContactDto)">
            <summary>
            Updates an existing emergency contact
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Emergency contact ID</param>
            <param name="updateDto">Emergency contact update data</param>
            <returns>Updated emergency contact</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.EmergencyContactsController.DeleteEmergencyContact(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes an emergency contact (soft delete)
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Emergency contact ID</param>
            <param name="permanentDelete">Whether to permanently delete</param>
            <returns>Success result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.InvitationsController">
            <summary>
            Controller for invitation management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitations(System.Int32,System.Int32,System.String,System.Nullable{VisitorManagementSystem.Api.Domain.Enums.InvitationStatus},System.Nullable{VisitorManagementSystem.Api.Domain.Enums.InvitationType},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Gets invitations with filtering and paging
            </summary>
            <param name="pageNumber">Page number</param>
            <param name="pageSize">Page size</param>
            <param name="searchTerm">Search term</param>
            <param name="status">Status filter</param>
            <param name="type">Type filter</param>
            <param name="hostId">Host filter</param>
            <param name="visitorId">Visitor filter</param>
            <param name="visitPurposeId">Visit purpose filter</param>
            <param name="locationId">Location filter</param>
            <param name="startDate">Start date filter</param>
            <param name="endDate">End date filter</param>
            <param name="includeDeleted">Include deleted</param>
            <param name="pendingApprovalsOnly">Only pending approvals</param>
            <param name="activeOnly">Only active invitations</param>
            <param name="expiredOnly">Only expired invitations</param>
            <param name="sortBy">Sort field</param>
            <param name="sortDirection">Sort direction</param>
            <returns>Paged list of invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitation(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets an invitation by ID
            </summary>
            <param name="id">Invitation ID</param>
            <param name="includeDeleted">Include deleted invitation</param>
            <param name="includeEvents">Include events timeline</param>
            <param name="includeApprovals">Include approvals workflow</param>
            <returns>Invitation details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.CreateInvitation(VisitorManagementSystem.Api.Application.DTOs.Invitations.CreateInvitationDto)">
            <summary>
            Creates a new invitation
            </summary>
            <param name="createDto">Invitation creation data</param>
            <returns>Created invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.UpdateInvitation(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Invitations.UpdateInvitationDto)">
            <summary>
            Updates an existing invitation
            </summary>
            <param name="id">Invitation ID</param>
            <param name="updateDto">Invitation update data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.ApproveInvitation(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Invitations.ApproveInvitationDto)">
            <summary>
            Approves an invitation
            </summary>
            <param name="id">Invitation ID</param>
            <param name="approvalDto">Approval data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.RejectInvitation(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Invitations.RejectInvitationDto)">
            <summary>
            Rejects an invitation
            </summary>
            <param name="id">Invitation ID</param>
            <param name="rejectionDto">Rejection data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetPendingApprovals(System.Boolean)">
            <summary>
            Gets pending approvals for the current user or all (admin)
            </summary>
            <param name="forCurrentUserOnly">Only for current user</param>
            <returns>List of pending approvals</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitationStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets invitation statistics
            </summary>
            <param name="startDate">Optional start date filter</param>
            <param name="endDate">Optional end date filter</param>
            <param name="hostId">Optional host filter</param>
            <param name="includeDeleted">Include deleted invitations</param>
            <returns>Statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitationQrCode(System.Int32)">
            <summary>
            Generates QR code for invitation
            </summary>
            <param name="id">Invitation ID</param>
            <returns>QR code data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.CancelInvitation(System.Int32,VisitorManagementSystem.Api.Controllers.CancelInvitationDto)">
            <summary>
            Cancels an invitation
            </summary>
            <param name="id">Invitation ID</param>
            <param name="cancellationDto">Cancellation data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.DeleteInvitation(System.Int32)">
            <summary>
            Deletes an invitation (only if status is Cancelled)
            </summary>
            <param name="id">Invitation ID</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.SubmitInvitation(System.Int32)">
            <summary>
            Submits an invitation for approval
            </summary>
            <param name="id">Invitation ID</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.CheckInInvitation(VisitorManagementSystem.Api.Controllers.CheckInInvitationDto)">
            <summary>
            Checks in a visitor using invitation
            </summary>
            <param name="checkInDto">Check-in data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.CheckOutInvitation(System.Int32,VisitorManagementSystem.Api.Controllers.CheckOutInvitationDto)">
            <summary>
            Checks out a visitor
            </summary>
            <param name="id">Invitation ID</param>
            <param name="checkOutDto">Check-out data</param>
            <returns>Updated invitation</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitationQrCodeImage(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets QR code image for an invitation
            </summary>
            <param name="id">Invitation ID</param>
            <param name="size">QR code size in pixels (default: 300)</param>
            <param name="branded">Include company branding (default: false)</param>
            <returns>QR code image as PNG</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.ValidateQrCode(VisitorManagementSystem.Api.Controllers.ValidateQrCodeDto)">
            <summary>
            Validates QR code data
            </summary>
            <param name="qrData">QR code data to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.GetInvitationQrCodeData(System.Int32)">
            <summary>
            Gets QR code data for an invitation
            </summary>
            <param name="id">Invitation ID</param>
            <returns>QR code data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.InvitationsController.SendQrCodeEmail(System.Int32,VisitorManagementSystem.Api.Controllers.SendQrEmailDto)">
            <summary>
            Sends QR code to visitor via email
            </summary>
            <param name="id">Invitation ID</param>
            <param name="emailDto">Email sending options</param>
            <returns>Email sending result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.CancelInvitationDto">
            <summary>
            Additional DTOs for workflow operations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.CancelInvitationDto.Reason">
            <summary>
            Cancellation reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.CheckInInvitationDto.InvitationReference">
            <summary>
            Invitation reference (ID or QR code)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.CheckInInvitationDto.Notes">
            <summary>
            Check-in notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.CheckOutInvitationDto.Notes">
            <summary>
            Check-out notes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.ValidateQrCodeDto">
            <summary>
            DTO for QR code validation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.ValidateQrCodeDto.QrData">
            <summary>
            QR code data to validate
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.SendQrEmailDto">
            <summary>
            DTO for sending QR code via email
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendQrEmailDto.CustomMessage">
            <summary>
            Custom message to include in email (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendQrEmailDto.IncludeQrImage">
            <summary>
            Include QR code as image attachment
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendQrEmailDto.AlternativeEmail">
            <summary>
            Alternative email address (if different from visitor's email)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.LocationsController">
            <summary>
            Controller for location management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.LocationsController.GetLocations(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all locations
            </summary>
            <param name="locationType">Location type filter</param>
            <param name="rootOnly">Only root locations</param>
            <param name="includeChildren">Include child locations</param>
            <param name="includeInactive">Include inactive locations</param>
            <returns>List of locations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.LocationsController.GetLocation(System.Int32,System.Boolean)">
            <summary>
            Gets a specific location by ID
            </summary>
            <param name="id">Location ID</param>
            <param name="includeChildren">Include child locations</param>
            <returns>Location details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.LocationsController.CreateLocation(VisitorManagementSystem.Api.Application.DTOs.Locations.CreateLocationDto)">
            <summary>
            Creates a new location
            </summary>
            <param name="createDto">Location creation data</param>
            <returns>Created location</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.LocationsController.UpdateLocation(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Locations.UpdateLocationDto)">
            <summary>
            Updates an existing location
            </summary>
            <param name="id">Location ID</param>
            <param name="updateDto">Location update data</param>
            <returns>Updated location</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.LocationsController.DeleteLocation(System.Int32,System.Boolean)">
            <summary>
            Deletes a location
            </summary>
            <param name="id">Location ID</param>
            <param name="hardDelete">Whether to perform hard delete (default: false)</param>
            <returns>Deletion result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.PdfController">
            <summary>
            Controller for PDF operations in visitor management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.PdfController.DownloadInvitationTemplate(System.Boolean)">
            <summary>
            Downloads a blank PDF invitation template
            </summary>
            <param name="multipleVisitors">Include sections for multiple visitors</param>
            <returns>PDF template file</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.PdfController.UploadFilledInvitation(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads and processes a filled PDF invitation
            </summary>
            <param name="pdfFile">Filled PDF invitation file</param>
            <returns>Processing result with created invitation details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.PdfController.ValidatePdf(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validates PDF structure and form fields
            </summary>
            <param name="pdfFile">PDF file to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.PdfController.SendPdfTemplate(VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto)">
            <summary>
            Sends PDF invitation template via email to a host
            </summary>
            <param name="emailDto">Email details</param>
            <returns>Email sending result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto">
            <summary>
            DTO for sending PDF template via email
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto.HostName">
            <summary>
            Host name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto.HostEmail">
            <summary>
            Host email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto.IncludeMultipleVisitors">
            <summary>
            Include multiple visitor sections
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendPdfTemplateDto.CustomMessage">
            <summary>
            Custom message to include in email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.TimeSlotsController">
            <summary>
            Controller for time slot management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.GetTimeSlots(System.Nullable{System.Int32},System.Boolean,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets all time slots with optional filtering
            </summary>
            <param name="locationId">Filter by location ID</param>
            <param name="activeOnly">Only return active time slots</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="sortBy">Sort field</param>
            <param name="sortDirection">Sort direction</param>
            <returns>List of time slots</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.GetTimeSlot(System.Int32)">
            <summary>
            Gets a specific time slot by ID
            </summary>
            <param name="id">Time slot ID</param>
            <returns>Time slot details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.CreateTimeSlot(VisitorManagementSystem.Api.Application.DTOs.TimeSlots.CreateTimeSlotDto)">
            <summary>
            Creates a new time slot
            </summary>
            <param name="createDto">Time slot creation data</param>
            <returns>Created time slot</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.UpdateTimeSlot(System.Int32,VisitorManagementSystem.Api.Application.DTOs.TimeSlots.UpdateTimeSlotDto)">
            <summary>
            Updates an existing time slot
            </summary>
            <param name="id">Time slot ID</param>
            <param name="updateDto">Time slot update data</param>
            <returns>Updated time slot</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.DeleteTimeSlot(System.Int32,System.Boolean)">
            <summary>
            Deletes a time slot (soft delete)
            </summary>
            <param name="id">Time slot ID</param>
            <param name="hardDelete">Whether to perform hard delete</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.TimeSlotsController.GetAvailableTimeSlots(System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Gets available time slots for a specific date and location
            </summary>
            <param name="date">Date</param>
            <param name="locationId">Location ID</param>
            <returns>Available time slots</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UsersController">
            <summary>
            User management controller for CRUD operations and user administration
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUsers(System.Int32,System.Int32,System.String,System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserRole},System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserStatus},System.String,System.String,System.Boolean)">
            <summary>
            Gets paginated list of users
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUser(System.Int32)">
            <summary>
            Gets user by ID
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.CreateUser(VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto)">
            <summary>
            Creates a new user
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UpdateUser(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto)">
            <summary>
            Updates an existing user
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.ActivateUser(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UserActivationDto)">
            <summary>
            Activates a user account
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.DeactivateUser(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UserDeactivationDto)">
            <summary>
            Deactivates a user account
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Deletes a user (soft delete)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UnlockUser(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UserUnlockDto)">
            <summary>
            Unlocks a user account
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUserActivity(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets user's activity log
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.ResetUserPassword(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.AdminPasswordResetDto)">
            <summary>
            Resets user password (admin function)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetCurrentUserProfile">
            <summary>
            Gets current user's profile
            GET /api/Users/profile
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UpdateCurrentUserProfile(VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserProfileDto)">
            <summary>
            Updates current user's profile (self-service)
            PUT /api/Users/profile
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UpdateCurrentUserPreferences(VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserPreferencesDto)">
            <summary>
            Updates current user's preferences
            PUT /api/Users/profile/preferences
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UploadProfilePhoto(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads current user's profile photo
            POST /api/Users/profile/photo
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.RemoveProfilePhoto">
            <summary>
            Removes current user's profile photo
            DELETE /api/Users/profile/photo
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetAvailableRoles">
            <summary>
            Gets available roles for assignment
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController">
            <summary>
            Controller for visitor document management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.GetVisitorDocuments(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets visitor documents for a visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="documentType">Document type filter</param>
            <param name="includeDeleted">Include deleted documents</param>
            <returns>List of visitor documents</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.GetVisitorDocument(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a visitor document by ID
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Document ID</param>
            <param name="includeDeleted">Include deleted document</param>
            <returns>Visitor document details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.CreateVisitorDocument(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDocumentDto)">
            <summary>
            Creates a new visitor document
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="createDto">Visitor document creation data</param>
            <returns>Created visitor document</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.UpdateVisitorDocument(System.Int32,System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDocumentDto)">
            <summary>
            Updates an existing visitor document
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Document ID</param>
            <param name="updateDto">Visitor document update data</param>
            <returns>Updated visitor document</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.DeleteVisitorDocument(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes a visitor document (soft delete)
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Document ID</param>
            <param name="permanentDelete">Whether to permanently delete</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.DownloadVisitorDocument(System.Int32,System.Int32)">
            <summary>
            Downloads a visitor document
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Document ID</param>
            <returns>File stream</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.UploadVisitorDocument(System.Int32,Microsoft.AspNetCore.Http.IFormFile,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Nullable{System.DateTime},System.String)">
            <summary>
            Uploads a visitor document file
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="file">Document file to upload</param>
            <param name="title">Document title</param>
            <param name="documentType">Document type</param>
            <param name="description">Document description</param>
            <param name="isSensitive">Whether document contains sensitive information</param>
            <param name="isRequired">Whether document is required for check-in</param>
            <param name="expiryDate">Document expiry date</param>
            <param name="tags">Additional tags</param>
            <returns>Created visitor document</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorDocumentsController.GetUploadInfo">
            <summary>
            Gets allowed document types and file restrictions
            </summary>
            <returns>File upload restrictions</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.VisitorNotesController">
            <summary>
            Controller for visitor note management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorNotesController.GetVisitorNotes(System.Int32,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets visitor notes for a visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="category">Category filter</param>
            <param name="isFlagged">Flagged filter</param>
            <param name="isConfidential">Confidential filter</param>
            <param name="includeDeleted">Include deleted notes</param>
            <returns>List of visitor notes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorNotesController.GetVisitorNote(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a visitor note by ID
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Note ID</param>
            <param name="includeDeleted">Include deleted note</param>
            <returns>Visitor note details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorNotesController.CreateVisitorNote(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorNoteDto)">
            <summary>
            Creates a new visitor note
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="createDto">Visitor note creation data</param>
            <returns>Created visitor note</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorNotesController.UpdateVisitorNote(System.Int32,System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorNoteDto)">
            <summary>
            Updates an existing visitor note
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Note ID</param>
            <param name="updateDto">Visitor note update data</param>
            <returns>Updated visitor note</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorNotesController.DeleteVisitorNote(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes a visitor note (soft delete)
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="id">Note ID</param>
            <param name="permanentDelete">Whether to permanently delete</param>
            <returns>Success result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.VisitorsController">
            <summary>
            Controller for visitor management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVisitors(System.Int32,System.Int32,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.Boolean)">
            <summary>
            Gets a paginated list of visitors with optional filtering
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="searchTerm">Search term</param>
            <param name="company">Company filter</param>
            <param name="isVip">VIP status filter</param>
            <param name="isBlacklisted">Blacklisted status filter</param>
            <param name="isActive">Active status filter</param>
            <param name="sortBy">Sort field</param>
            <param name="sortDirection">Sort direction</param>
            <param name="includeDeleted">Include deleted visitors</param>
            <returns>Paginated list of visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVisitor(System.Int32,System.Boolean)">
            <summary>
            Gets a visitor by ID
            </summary>
            <param name="id">Visitor ID</param>
            <param name="includeDeleted">Include deleted visitor</param>
            <returns>Visitor details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.CreateVisitor(VisitorManagementSystem.Api.Application.DTOs.Visitors.CreateVisitorDto)">
            <summary>
            Creates a new visitor
            </summary>
            <param name="createDto">Visitor creation data</param>
            <returns>Created visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.UpdateVisitor(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Visitors.UpdateVisitorDto)">
            <summary>
            Updates an existing visitor
            </summary>
            <param name="id">Visitor ID</param>
            <param name="updateDto">Visitor update data</param>
            <returns>Updated visitor</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.DeleteVisitor(System.Int32,System.Boolean)">
            <summary>
            Deletes a visitor (soft delete)
            </summary>
            <param name="id">Visitor ID</param>
            <param name="permanentDelete">Whether to permanently delete</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.SearchVisitors(VisitorManagementSystem.Api.Application.DTOs.Visitors.VisitorSearchDto)">
            <summary>
            Searches for visitors with advanced filtering
            </summary>
            <param name="searchDto">Search parameters</param>
            <returns>Paginated search results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.BlacklistVisitor(System.Int32,System.String)">
            <summary>
            Blacklists a visitor
            </summary>
            <param name="id">Visitor ID</param>
            <param name="reason">Blacklist reason</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.RemoveBlacklist(System.Int32)">
            <summary>
            Removes blacklist status from a visitor
            </summary>
            <param name="id">Visitor ID</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.MarkAsVip(System.Int32)">
            <summary>
            Marks a visitor as VIP
            </summary>
            <param name="id">Visitor ID</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.RemoveVipStatus(System.Int32)">
            <summary>
            Removes VIP status from a visitor
            </summary>
            <param name="id">Visitor ID</param>
            <returns>Success result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVipVisitors(System.Boolean)">
            <summary>
            Gets VIP visitors
            </summary>
            <param name="includeDeleted">Include deleted visitors</param>
            <returns>List of VIP visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetBlacklistedVisitors(System.Boolean)">
            <summary>
            Gets blacklisted visitors
            </summary>
            <param name="includeDeleted">Include deleted visitors</param>
            <returns>List of blacklisted visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVisitorStatistics(System.Boolean)">
            <summary>
            Gets visitor statistics
            </summary>
            <param name="includeDeleted">Include deleted visitors in statistics</param>
            <returns>Visitor statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVisitorDocuments(System.Int32)">
            <summary>
            Gets visitor's documents
            </summary>
            <param name="id">Visitor ID</param>
            <returns>List of visitor documents</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetVisitorNotes(System.Int32)">
            <summary>
            Gets visitor's notes
            </summary>
            <param name="id">Visitor ID</param>
            <returns>List of visitor notes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitorsController.GetEmergencyContacts(System.Int32)">
            <summary>
            Gets visitor's emergency contacts
            </summary>
            <param name="id">Visitor ID</param>
            <returns>List of emergency contacts</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.VisitPurposesController">
            <summary>
            Controller for visit purpose management operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitPurposesController.GetVisitPurposes(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets all visit purposes
            </summary>
            <param name="requiresApproval">Filter by approval requirement</param>
            <param name="includeInactive">Include inactive purposes</param>
            <returns>List of visit purposes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitPurposesController.GetVisitPurpose(System.Int32)">
            <summary>
            Gets a specific visit purpose by ID
            </summary>
            <param name="id">Visit purpose ID</param>
            <returns>Visit purpose details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitPurposesController.CreateVisitPurpose(VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.CreateVisitPurposeDto)">
            <summary>
            Creates a new visit purpose
            </summary>
            <param name="createDto">Visit purpose creation data</param>
            <returns>Created visit purpose</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitPurposesController.UpdateVisitPurpose(System.Int32,VisitorManagementSystem.Api.Application.DTOs.VisitPurposes.UpdateVisitPurposeDto)">
            <summary>
            Updates an existing visit purpose
            </summary>
            <param name="id">Visit purpose ID</param>
            <param name="updateDto">Visit purpose update data</param>
            <returns>Updated visit purpose</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.VisitPurposesController.DeleteVisitPurpose(System.Int32,System.Boolean)">
            <summary>
            Deletes a visit purpose
            </summary>
            <param name="id">Visit purpose ID</param>
            <param name="hardDelete">Whether to perform hard delete (default: false)</param>
            <returns>Deletion result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.XlsxController">
            <summary>
            Controller for XLSX operations in visitor management with dropdown support
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.XlsxController.DownloadInvitationTemplate(System.Boolean)">
            <summary>
            Downloads a blank XLSX invitation template with dropdowns
            </summary>
            <param name="multipleVisitors">Include sections for multiple visitors</param>
            <returns>XLSX template file with embedded dropdowns</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.XlsxController.UploadFilledInvitation(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Uploads and processes a filled XLSX invitation with dropdown selections
            </summary>
            <param name="xlsxFile">Filled XLSX invitation file</param>
            <returns>Processing result with created invitation details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.XlsxController.ValidateXlsx(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Validates XLSX structure and required fields
            </summary>
            <param name="xlsxFile">XLSX file to validate</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.XlsxController.SendXlsxTemplate(VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto)">
            <summary>
            Sends XLSX invitation template via email to a host
            </summary>
            <param name="emailDto">Email details</param>
            <returns>Email sending result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto">
            <summary>
            DTO for sending XLSX template via email
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto.HostName">
            <summary>
            Host name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto.HostEmail">
            <summary>
            Host email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto.IncludeMultipleVisitors">
            <summary>
            Include multiple visitor sections
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Controllers.SendXlsxTemplateDto.CustomMessage">
            <summary>
            Custom message to include in email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions">
            <summary>
            Contains all permission constants used throughout the application
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.User">
            <summary>
            User management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Invitation">
            <summary>
            Invitation management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Visitor">
            <summary>
            Visitor management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.VisitorDocument">
            <summary>
            Visitor document permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.VisitorNote">
            <summary>
            Visitor note permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.EmergencyContact">
            <summary>
            Emergency contact permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.CheckIn">
            <summary>
            Check-in/Check-out permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.WalkIn">
            <summary>
            Walk-in management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.BulkImport">
            <summary>
            Bulk import permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Watchlist">
            <summary>
            Watchlist management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.CustomField">
            <summary>
            Custom field management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.FRSystem">
            <summary>
            Facial recognition system permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Alert">
            <summary>
            Alert management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.SystemConfig">
            <summary>
            System configuration permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Configuration">
            <summary>
            Dynamic configuration management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Report">
            <summary>
            Report management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Audit">
            <summary>
            Audit management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Template">
            <summary>
            Template management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Dashboard">
            <summary>
            Dashboard permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Profile">
            <summary>
            Profile management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Notification">
            <summary>
            Notification permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Calendar">
            <summary>
            Calendar permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Emergency">
            <summary>
            Emergency management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Badge">
            <summary>
            Badge management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.QRCode">
            <summary>
            QR Code permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Manual">
            <summary>
            Manual operation permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Integration">
            <summary>
            Integration permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Sync">
            <summary>
            Sync operation permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Offline">
            <summary>
            Offline operation permissions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetAllPermissions">
            <summary>
            Gets all permissions as a flat list
            </summary>
            <returns>List of all permission strings</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of category to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.IsValidPermission(System.String)">
            <summary>
            Checks if a permission string is valid
            </summary>
            <param name="permission">Permission string to validate</param>
            <returns>True if valid permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetPermissionCategory(System.String)">
            <summary>
            Gets the category for a given permission
            </summary>
            <param name="permission">Permission string</param>
            <returns>Category name or null if not found</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.UserRoles">
            <summary>
            Contains user role constants and related functionality
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Staff">
            <summary>
            Staff role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Administrator">
            <summary>
            Administrator role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Operator">
            <summary>
            Operator role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.SuperAdministrator">
            <summary>
            Super administrator role (system level)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.System">
            <summary>
            System role for internal operations
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Guest">
            <summary>
            Guest role for limited access
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAllRoles">
            <summary>
            Gets all available role names
            </summary>
            <returns>List of all role names</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAssignableRoles">
            <summary>
            Gets assignable roles (excludes system roles)
            </summary>
            <returns>List of assignable role names</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleHierarchy(System.String)">
            <summary>
            Gets the role hierarchy level
            </summary>
            <param name="roleName">Role name</param>
            <returns>Hierarchy level (higher number = more privileges)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsRoleHigher(System.String,System.String)">
            <summary>
            Checks if one role is higher than another in hierarchy
            </summary>
            <param name="role1">First role</param>
            <param name="role2">Second role</param>
            <returns>True if role1 is higher than role2</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.CanManageRole(System.String,System.String)">
            <summary>
            Checks if a role can manage another role
            </summary>
            <param name="managerRole">Manager's role</param>
            <param name="targetRole">Target role to be managed</param>
            <returns>True if manager can manage target role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetDefaultPermissions(System.String)">
            <summary>
            Gets the default permissions for a role
            </summary>
            <param name="roleName">Role name</param>
            <returns>List of default permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetStaffPermissions">
            <summary>
            Gets staff permissions
            </summary>
            <returns>List of staff permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetOperatorPermissions">
            <summary>
            Gets operator permissions
            </summary>
            <returns>List of operator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAdministratorPermissions">
            <summary>
            Gets administrator permissions
            </summary>
            <returns>List of administrator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetSuperAdministratorPermissions">
            <summary>
            Gets super administrator permissions
            </summary>
            <returns>List of super administrator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetSystemPermissions">
            <summary>
            Gets system permissions (for internal operations)
            </summary>
            <returns>List of system permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetGuestPermissions">
            <summary>
            Gets guest permissions (very limited)
            </summary>
            <returns>List of guest permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleName(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Converts UserRole enum to string
            </summary>
            <param name="userRole">UserRole enum value</param>
            <returns>Role name string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetUserRole(System.String)">
            <summary>
            Converts role string to UserRole enum
            </summary>
            <param name="roleName">Role name string</param>
            <returns>UserRole enum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleDescription(System.String)">
            <summary>
            Gets role description
            </summary>
            <param name="roleName">Role name</param>
            <returns>Role description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsValidRole(System.String)">
            <summary>
            Checks if a role name is valid
            </summary>
            <param name="roleName">Role name to validate</param>
            <returns>True if valid role name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsAssignableRole(System.String)">
            <summary>
            Checks if a role is assignable to users
            </summary>
            <param name="roleName">Role name</param>
            <returns>True if role is assignable</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRolesWithPermission(System.String)">
            <summary>
            Gets roles that have a specific permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>List of roles that have the permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetMinimumRoleForPermission(System.String)">
            <summary>
            Gets the minimum role required for a permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>Minimum role name or null if permission not found</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages">
            <summary>
            Contains all validation error messages used throughout the application
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.General">
            <summary>
            General validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.User">
            <summary>
            User validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Invitation">
            <summary>
            Invitation validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Visitor">
            <summary>
            Visitor validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.CheckIn">
            <summary>
            Check-in validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.WalkIn">
            <summary>
            Walk-in validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.BulkImport">
            <summary>
            Bulk import validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Watchlist">
            <summary>
            Watchlist validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.CustomField">
            <summary>
            Custom field validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FacialRecognition">
            <summary>
            Facial recognition validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.System">
            <summary>
            System validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Security">
            <summary>
            Security validation messages
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Format(System.String,System.Object[])">
            <summary>
            Gets a formatted validation message with parameters
            </summary>
            <param name="message">Message template</param>
            <param name="parameters">Parameters to format</param>
            <returns>Formatted message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.RequiredField(System.String)">
            <summary>
            Gets a validation message for a required field
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Required field message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FieldTooLong(System.String,System.Int32)">
            <summary>
            Gets a validation message for field length
            </summary>
            <param name="fieldName">Field name</param>
            <param name="maxLength">Maximum length</param>
            <returns>Field length message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FieldOutOfRange(System.String,System.Object,System.Object)">
            <summary>
            Gets a validation message for field range
            </summary>
            <param name="fieldName">Field name</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Field range message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.InvalidFormat(System.String,System.String)">
            <summary>
            Gets a validation message for invalid format
            </summary>
            <param name="fieldName">Field name</param>
            <param name="expectedFormat">Expected format</param>
            <returns>Invalid format message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.AlreadyExists(System.String,System.String)">
            <summary>
            Gets a validation message for already exists
            </summary>
            <param name="itemType">Type of item</param>
            <param name="value">Value that already exists</param>
            <returns>Already exists message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.NotFound(System.String,System.String)">
            <summary>
            Gets a validation message for not found
            </summary>
            <param name="itemType">Type of item</param>
            <param name="identifier">Item identifier</param>
            <returns>Not found message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.InvalidStateTransition(System.String,System.String)">
            <summary>
            Gets a validation message for invalid state transition
            </summary>
            <param name="fromState">Current state</param>
            <param name="toState">Target state</param>
            <returns>Invalid transition message</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity">
            <summary>
            Base entity class that provides audit trail functionality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.CreatedBy">
            <summary>
            ID of the user who created the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.ModifiedBy">
            <summary>
            ID of the user who last modified the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.CreatedByUser">
            <summary>
            Navigation property for the user who created the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.ModifiedByUser">
            <summary>
            Navigation property for the user who last modified the entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.UpdateModifiedBy(System.Int32)">
            <summary>
            Updates the entity with modification details
            </summary>
            <param name="modifiedBy">ID of the user making the modification</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.SetCreatedBy(System.Int32)">
            <summary>
            Sets the entity creation details
            </summary>
            <param name="createdBy">ID of the user creating the entity</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.Deactivate(System.Int32)">
            <summary>
            Deactivates the entity with user information
            </summary>
            <param name="deactivatedBy">ID of the user deactivating the entity</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.Activate(System.Int32)">
            <summary>
            Activates the entity with user information
            </summary>
            <param name="activatedBy">ID of the user activating the entity</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.AuditLog">
            <summary>
            Represents an audit log entry for tracking system activities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EventType">
            <summary>
            Type of event that occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EntityName">
            <summary>
            Name of the entity that was affected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EntityId">
            <summary>
            ID of the entity that was affected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Action">
            <summary>
            Action that was performed (Create, Update, Delete, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Description">
            <summary>
            Description of the action performed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.OldValues">
            <summary>
            Old values before the change (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.NewValues">
            <summary>
            New values after the change (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Metadata">
            <summary>
            Additional metadata about the event (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IpAddress">
            <summary>
            IP address of the client that initiated the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.UserAgent">
            <summary>
            User agent of the client
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CorrelationId">
            <summary>
            Correlation ID for tracking related operations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SessionId">
            <summary>
            Session ID for tracking user sessions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestId">
            <summary>
            Request ID for tracking individual requests
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.HttpMethod">
            <summary>
            HTTP method used for the request
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestPath">
            <summary>
            URL path of the request
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ResponseStatusCode">
            <summary>
            Status code of the response
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Duration">
            <summary>
            Duration of the request in milliseconds
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestSize">
            <summary>
            Size of the request in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ResponseSize">
            <summary>
            Size of the response in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IsSuccess">
            <summary>
            Indicates if the action was successful
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ErrorMessage">
            <summary>
            Error message if the action failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ExceptionDetails">
            <summary>
            Exception details if an error occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.UserId">
            <summary>
            ID of the user who performed the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.User">
            <summary>
            Navigation property to the user who performed the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RiskLevel">
            <summary>
            Risk level of the action (Low, Medium, High, Critical)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequiresAttention">
            <summary>
            Indicates if this entry requires attention
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IsReviewed">
            <summary>
            Indicates if this entry has been reviewed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewedBy">
            <summary>
            ID of the user who reviewed this entry
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewedDate">
            <summary>
            Date when this entry was reviewed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewComments">
            <summary>
            Review comments
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CreateSuccessEntry(VisitorManagementSystem.Api.Domain.Enums.EventType,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates an audit log entry for a successful action
            </summary>
            <param name="eventType">Type of event</param>
            <param name="entityName">Name of the affected entity</param>
            <param name="entityId">ID of the affected entity</param>
            <param name="action">Action performed</param>
            <param name="description">Description of the action</param>
            <param name="userId">ID of the user performing the action</param>
            <param name="ipAddress">IP address of the client</param>
            <param name="userAgent">User agent of the client</param>
            <returns>New audit log entry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CreateFailureEntry(VisitorManagementSystem.Api.Domain.Enums.EventType,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates an audit log entry for a failed action
            </summary>
            <param name="eventType">Type of event</param>
            <param name="entityName">Name of the affected entity</param>
            <param name="action">Action attempted</param>
            <param name="errorMessage">Error message</param>
            <param name="exceptionDetails">Exception details</param>
            <param name="userId">ID of the user attempting the action</param>
            <param name="ipAddress">IP address of the client</param>
            <param name="userAgent">User agent of the client</param>
            <returns>New audit log entry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.MarkAsReviewed(System.Int32,System.String)">
            <summary>
            Marks the audit log entry as reviewed
            </summary>
            <param name="reviewedBy">ID of the user reviewing the entry</param>
            <param name="comments">Review comments</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SetRiskLevel(System.String)">
            <summary>
            Sets the risk level of the audit entry
            </summary>
            <param name="riskLevel">Risk level (Low, Medium, High, Critical)</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.AddPerformanceMetrics(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Adds performance metrics to the audit log
            </summary>
            <param name="duration">Duration in milliseconds</param>
            <param name="requestSize">Request size in bytes</param>
            <param name="responseSize">Response size in bytes</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SetRequestInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sets request information
            </summary>
            <param name="httpMethod">HTTP method</param>
            <param name="requestPath">Request path</param>
            <param name="responseStatusCode">Response status code</param>
            <param name="correlationId">Correlation ID</param>
            <param name="requestId">Request ID</param>
            <param name="sessionId">Session ID</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.BaseEntity">
            <summary>
            Base entity class that provides common properties for all entities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.CreatedOn">
            <summary>
            Date and time when the entity was created (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.ModifiedOn">
            <summary>
            Date and time when the entity was last modified (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.RowVersion">
            <summary>
            Version timestamp for optimistic concurrency control
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.IsActive">
            <summary>
            Indicates whether the entity is active
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.UpdateModifiedOn">
            <summary>
            Updates the ModifiedOn timestamp
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Deactivate">
            <summary>
            Marks the entity as inactive (soft delete)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Activate">
            <summary>
            Marks the entity as active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit">
            <summary>
            Configuration audit entity for tracking configuration changes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.SystemConfigurationId">
            <summary>
            Reference to the system configuration
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Category">
            <summary>
            Configuration category at time of change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Key">
            <summary>
            Configuration key at time of change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.OldValue">
            <summary>
            Previous value (null for new configurations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.NewValue">
            <summary>
            New value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Action">
            <summary>
            Type of change (Created, Updated, Deleted, Restored)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Reason">
            <summary>
            Reason for the change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.IpAddress">
            <summary>
            IP address of the user making the change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.UserAgent">
            <summary>
            User agent of the client making the change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.SessionId">
            <summary>
            Session ID when the change was made
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.IsAutomated">
            <summary>
            Whether this change was made by an automated process
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.RequiresApproval">
            <summary>
            Whether this change requires approval
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.IsApproved">
            <summary>
            Whether this change has been approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.ApprovedBy">
            <summary>
            User who approved the change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.ApprovedAt">
            <summary>
            When the change was approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Metadata">
            <summary>
            Additional metadata about the change (JSON)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.SystemConfiguration">
            <summary>
            Navigation property to the system configuration
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.ApprovedByUser">
            <summary>
            Navigation property to the user who approved the change
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.ChangeDescription">
            <summary>
            Gets a description of the change
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.GetSafeValue(System.String)">
            <summary>
            Gets a safe representation of a value (masks sensitive data)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.Approve(System.Int32)">
            <summary>
            Approves the configuration change
            </summary>
            <param name="approvedBy">User ID who approved</param>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.ConfigurationAudit.CompositeKey">
            <summary>
            Gets the composite key for the configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact">
            <summary>
            Represents emergency contact information for a visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.VisitorId">
            <summary>
            Foreign key to the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.FirstName">
            <summary>
            Emergency contact's first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.LastName">
            <summary>
            Emergency contact's last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Relationship">
            <summary>
            Relationship to the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.PhoneNumber">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.AlternatePhoneNumber">
            <summary>
            Alternate phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Priority">
            <summary>
            Priority order (1 = primary contact)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.IsPrimary">
            <summary>
            Whether this is the primary emergency contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Notes">
            <summary>
            Additional notes about the contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.Visitor">
            <summary>
            Navigation property to the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.FullName">
            <summary>
            Gets the contact's full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.DisplayInfo">
            <summary>
            Gets a formatted display string for the contact
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.EmergencyContact.ValidateContact">
            <summary>
            Validates the emergency contact information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.Invitation">
            <summary>
            Represents an invitation for a visitor to the facility
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.InvitationNumber">
            <summary>
            Unique invitation reference number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.VisitorId">
            <summary>
            Visitor this invitation is for
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.HostId">
            <summary>
            Host (staff member) creating the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.VisitPurposeId">
            <summary>
            Visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.LocationId">
            <summary>
            Location to visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Status">
            <summary>
            Current invitation status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Type">
            <summary>
            Invitation type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Subject">
            <summary>
            Subject/title of the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Message">
            <summary>
            Message/description of the visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ScheduledStartTime">
            <summary>
            Scheduled start date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ScheduledEndTime">
            <summary>
            Scheduled end date and time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ExpectedVisitorCount">
            <summary>
            Expected number of visitors (for group invitations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.SpecialInstructions">
            <summary>
            Special instructions or requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RequiresApproval">
            <summary>
            Whether pre-approval is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RequiresEscort">
            <summary>
            Whether escort is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RequiresBadge">
            <summary>
            Whether badge printing is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.NeedsParking">
            <summary>
            Whether parking is needed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ParkingInstructions">
            <summary>
            Parking instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.QrCode">
            <summary>
            QR code for check-in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.SentOn">
            <summary>
            Date invitation was sent
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ApprovedOn">
            <summary>
            Date invitation was approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ApprovedBy">
            <summary>
            Who approved the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ApprovalComments">
            <summary>
            Approval comments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RejectedOn">
            <summary>
            Date invitation was rejected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RejectedBy">
            <summary>
            Who rejected the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RejectionReason">
            <summary>
            Rejection reason
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.CheckedInAt">
            <summary>
            Actual check-in time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.CheckedOutAt">
            <summary>
            Actual check-out time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ExternalId">
            <summary>
            External system ID for integration
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ImportBatchId">
            <summary>
            Import batch ID if created via bulk import
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Visitor">
            <summary>
            Navigation property for the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Host">
            <summary>
            Navigation property for the host (staff member)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.VisitPurpose">
            <summary>
            Navigation property for the visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Location">
            <summary>
            Navigation property for the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.ApprovedByUser">
            <summary>
            Navigation property for the user who approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.RejectedByUser">
            <summary>
            Navigation property for the user who rejected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Approvals">
            <summary>
            Navigation property for invitation approvals
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.Events">
            <summary>
            Navigation property for invitation events
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.IsActive">
            <summary>
            Checks if the invitation is currently active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.IsApproved">
            <summary>
            Checks if the invitation is approved
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.CanBeModified">
            <summary>
            Checks if the invitation can be modified
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.CanBeCancelled">
            <summary>
            Checks if the invitation can be cancelled
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.VisitDurationHours">
            <summary>
            Gets the visit duration in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Invitation.IsExpired">
            <summary>
            Checks if the invitation is expired
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.Submit(System.Int32)">
            <summary>
            Submits the invitation for approval
            </summary>
            <param name="submittedBy">User submitting the invitation</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.Approve(System.Int32,System.String)">
            <summary>
            Approves the invitation
            </summary>
            <param name="approvedBy">User approving the invitation</param>
            <param name="comments">Approval comments</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.Reject(System.Int32,System.String)">
            <summary>
            Rejects the invitation
            </summary>
            <param name="rejectedBy">User rejecting the invitation</param>
            <param name="reason">Rejection reason</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.Cancel(System.Int32)">
            <summary>
            Cancels the invitation
            </summary>
            <param name="cancelledBy">User cancelling the invitation</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.CheckIn(System.Int32)">
            <summary>
            Marks the invitation as active (visitor checked in)
            </summary>
            <param name="checkedInBy">User processing the check-in</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.CheckOut(System.Int32)">
            <summary>
            Marks the invitation as completed (visitor checked out)
            </summary>
            <param name="checkedOutBy">User processing the check-out</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.ValidateInvitation">
            <summary>
            Validates the invitation data
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.GenerateInvitationNumber">
            <summary>
            Generates a unique invitation number
            </summary>
            <returns>Invitation number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.HasCapacityConflict(System.Int32,System.Int32)">
            <summary>
            Checks if the invitation conflicts with building capacity
            </summary>
            <param name="currentOccupancy">Current building occupancy</param>
            <param name="maxCapacity">Maximum building capacity</param>
            <returns>True if there's a capacity conflict</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.GetSummary">
            <summary>
            Gets a summary of the invitation
            </summary>
            <returns>Invitation summary</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Invitation.UpdateQrCode(System.String)">
            <summary>
            Updates the QR code for the invitation
            </summary>
            <param name="qrCodeData">QR code data</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval">
            <summary>
            Represents an approval step in the invitation workflow
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.InvitationId">
            <summary>
            Invitation this approval belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.ApproverId">
            <summary>
            User responsible for this approval step
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.StepOrder">
            <summary>
            Approval step order (1, 2, 3, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Decision">
            <summary>
            Approval decision
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.DecisionDate">
            <summary>
            Date decision was made
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Comments">
            <summary>
            Comments from the approver
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.IsRequired">
            <summary>
            Whether this approval step is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.EscalatedToUserId">
            <summary>
            Escalation user if escalated
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.EscalatedOn">
            <summary>
            Date escalated
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Invitation">
            <summary>
            Navigation property for the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Approver">
            <summary>
            Navigation property for the approver
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.EscalatedToUser">
            <summary>
            Navigation property for escalated user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.IsPending">
            <summary>
            Checks if this approval step is pending
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.IsCompleted">
            <summary>
            Checks if this approval step is completed
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Approve(System.String)">
            <summary>
            Approves this step
            </summary>
            <param name="comments">Approval comments</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Reject(System.String)">
            <summary>
            Rejects this step
            </summary>
            <param name="comments">Rejection comments</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationApproval.Escalate(System.Int32,System.String)">
            <summary>
            Escalates this step to another user
            </summary>
            <param name="escalatedToUserId">User to escalate to</param>
            <param name="comments">Escalation comments</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent">
            <summary>
            Represents an event in the invitation timeline
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.InvitationId">
            <summary>
            Invitation this event belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.Description">
            <summary>
            Event description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.TriggeredBy">
            <summary>
            User who triggered the event
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.EventData">
            <summary>
            Additional event data (JSON)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.EventTimestamp">
            <summary>
            Event timestamp
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.Invitation">
            <summary>
            Navigation property for the invitation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.TriggeredByUser">
            <summary>
            Navigation property for the user who triggered the event
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationEvent.Create(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Creates a new invitation event
            </summary>
            <param name="invitationId">Invitation ID</param>
            <param name="eventType">Event type</param>
            <param name="description">Event description</param>
            <param name="triggeredBy">User who triggered the event</param>
            <param name="eventData">Additional event data</param>
            <returns>New InvitationEvent</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.InvitationEventTypes">
            <summary>
            Common invitation event types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate">
            <summary>
            Represents a template for creating invitations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.Name">
            <summary>
            Template name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.Description">
            <summary>
            Template description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.Category">
            <summary>
            Template category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.SubjectTemplate">
            <summary>
            Default subject template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.MessageTemplate">
            <summary>
            Default message template
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultVisitPurposeId">
            <summary>
            Default visit purpose ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultLocationId">
            <summary>
            Default location ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultDurationHours">
            <summary>
            Default visit duration in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultRequiresApproval">
            <summary>
            Whether approval is required by default
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultRequiresEscort">
            <summary>
            Whether escort is required by default
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultRequiresBadge">
            <summary>
            Whether badge is required by default
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultSpecialInstructions">
            <summary>
            Default special instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.IsShared">
            <summary>
            Whether template is shared with all users
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.IsSystemTemplate">
            <summary>
            Whether template is system-defined
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.UsageCount">
            <summary>
            Usage count (how many times this template has been used)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.LastUsedOn">
            <summary>
            Last used date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultVisitPurpose">
            <summary>
            Navigation property for default visit purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.DefaultLocation">
            <summary>
            Navigation property for default location
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.IncrementUsage">
            <summary>
            Increments the usage count
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.RenderSubject(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets rendered subject with placeholders replaced
            </summary>
            <param name="placeholders">Dictionary of placeholder values</param>
            <returns>Rendered subject</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.InvitationTemplate.RenderMessage(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Gets rendered message with placeholders replaced
            </summary>
            <param name="placeholders">Dictionary of placeholder values</param>
            <returns>Rendered message</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.Location">
            <summary>
            Represents a location within the facility
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Name">
            <summary>
            Location name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Description">
            <summary>
            Location description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Code">
            <summary>
            Location code/identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Building">
            <summary>
            Building name/number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Floor">
            <summary>
            Floor number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Room">
            <summary>
            Room number or identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.LocationType">
            <summary>
            Location type (Office, Conference Room, Lobby, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Zone">
            <summary>
            Zone or area within the facility
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.MaxOccupancy">
            <summary>
            Maximum occupancy for the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.MaxCapacity">
            <summary>
            Maximum capacity alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.RequiresEscort">
            <summary>
            Whether visitors require an escort to access this location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.RequiresSecurityClearance">
            <summary>
            Whether the location requires security clearance
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.SecurityClearanceLevel">
            <summary>
            Security clearance level required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.AccessLevel">
            <summary>
            Access level alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.IsAccessible">
            <summary>
            Whether the location is accessible for disabled visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Latitude">
            <summary>
            GPS coordinates (latitude)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Longitude">
            <summary>
            GPS coordinates (longitude)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.AccessInstructions">
            <summary>
            Special instructions for accessing the location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.ParentLocationId">
            <summary>
            Parent location ID (for hierarchical locations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.ParentLocation">
            <summary>
            Navigation property to parent location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.ChildLocations">
            <summary>
            Navigation property to child locations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Location.GetFullPath">
            <summary>
            Gets the full location path (Building > Floor > Room)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Location.ValidateLocation">
            <summary>
            Validates the location information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Location.Invitations">
            <summary>
            Navigation property for related invitations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog">
            <summary>
            Tracks real-time facility occupancy for capacity management
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.Date">
            <summary>
            Date of the occupancy record
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.TimeSlotId">
            <summary>
            Time slot this record applies to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.LocationId">
            <summary>
            Location this record applies to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.CurrentCount">
            <summary>
            Current visitor count for this time/location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.MaxCapacity">
            <summary>
            Maximum capacity for this time/location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.ReservedCount">
            <summary>
            Reserved capacity (pre-approved invitations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.AvailableCapacity">
            <summary>
            Available capacity (calculated)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.OccupancyPercentage">
            <summary>
            Occupancy percentage (0-100)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.LastUpdated">
            <summary>
            Last updated timestamp
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.TimeSlot">
            <summary>
            Navigation property to time slot
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.Location">
            <summary>
            Navigation property to location
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.IsOverCapacity">
            <summary>
            Checks if capacity is exceeded
            </summary>
            <returns>True if over capacity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.IsAtWarningLevel">
            <summary>
            Checks if capacity is at warning level (>80%)
            </summary>
            <returns>True if at warning level</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.HasAvailableCapacity(System.Int32)">
            <summary>
            Checks if there's available capacity for additional visitors
            </summary>
            <param name="additionalVisitors">Number of additional visitors</param>
            <returns>True if capacity is available</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.GetCalculatedAvailableCapacity">
            <summary>
            Calculates available capacity manually (for when computed column isn't available)
            </summary>
            <returns>Available capacity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.GetCalculatedOccupancyPercentage">
            <summary>
            Calculates occupancy percentage manually (for when computed column isn't available)
            </summary>
            <returns>Occupancy percentage</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.UpdateCounts(System.Int32,System.Int32)">
            <summary>
            Updates the occupancy counts
            </summary>
            <param name="currentCount">New current count</param>
            <param name="reservedCount">New reserved count</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.OccupancyLog.ValidateOccupancyLog">
            <summary>
            Validates the occupancy log data
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.RefreshToken">
            <summary>
            Represents a refresh token for JWT authentication
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.Token">
            <summary>
            The refresh token value (encrypted)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.JwtId">
            <summary>
            The JTI (JWT ID) of the associated access token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ExpiryDate">
            <summary>
            When the refresh token expires
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsUsed">
            <summary>
            Whether the token has been used (one-time use)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsRevoked">
            <summary>
            Whether the token has been revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevokedDate">
            <summary>
            Date when the token was revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevocationReason">
            <summary>
            Reason for revocation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.CreatedByIp">
            <summary>
            IP address where the token was created
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevokedByIp">
            <summary>
            IP address where the token was revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.UserAgent">
            <summary>
            User agent of the client that created the token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.DeviceFingerprint">
            <summary>
            Device fingerprint for additional security
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.UserId">
            <summary>
            ID of the user this token belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.User">
            <summary>
            Navigation property to the user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacedByTokenId">
            <summary>
            ID of the token that replaced this one (for token rotation)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacedByToken">
            <summary>
            Navigation property to the token that replaced this one
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacesToken">
            <summary>
            Navigation property to the token this one replaced
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsValid">
            <summary>
            Checks if the refresh token is valid (not expired, used, or revoked)
            </summary>
            <returns>True if the token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsExpired">
            <summary>
            Checks if the refresh token is expired
            </summary>
            <returns>True if the token is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.MarkAsUsed(System.String)">
            <summary>
            Marks the token as used
            </summary>
            <param name="usedByIp">IP address where the token was used</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.Revoke(System.String,System.String)">
            <summary>
            Revokes the refresh token
            </summary>
            <param name="reason">Reason for revocation</param>
            <param name="revokedByIp">IP address where the token was revoked</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.CreateReplacementToken(System.String,System.String,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Creates a replacement token for token rotation
            </summary>
            <param name="newToken">New token value</param>
            <param name="newJwtId">New JWT ID</param>
            <param name="expiryDate">Expiry date for the new token</param>
            <param name="createdByIp">IP address creating the new token</param>
            <param name="userAgent">User agent creating the new token</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <returns>New refresh token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.GetRemainingTime">
            <summary>
            Gets the remaining time until expiry
            </summary>
            <returns>TimeSpan until expiry, or null if expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsFromSameDevice(System.String)">
            <summary>
            Checks if the token is from the same device
            </summary>
            <param name="deviceFingerprint">Device fingerprint to compare</param>
            <returns>True if from the same device</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.GetAge">
            <summary>
            Gets the token's age
            </summary>
            <returns>Time since token creation</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity">
            <summary>
            Base entity class that provides soft delete functionality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.IsDeleted">
            <summary>
            Indicates whether the entity has been soft deleted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedOn">
            <summary>
            Date and time when the entity was soft deleted (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedBy">
            <summary>
            ID of the user who soft deleted the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedByUser">
            <summary>
            Navigation property for the user who soft deleted the entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.SoftDelete(System.Int32)">
            <summary>
            Soft deletes the entity
            </summary>
            <param name="deletedBy">ID of the user performing the deletion</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.Restore(System.Int32)">
            <summary>
            Restores a soft deleted entity
            </summary>
            <param name="restoredBy">ID of the user performing the restoration</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.IsCurrentlyDeleted">
            <summary>
            Checks if the entity is currently deleted
            </summary>
            <returns>True if the entity is soft deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DaysSinceDeleted">
            <summary>
            Gets the number of days since the entity was deleted
            </summary>
            <returns>Number of days since deletion, or null if not deleted</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration">
            <summary>
            System configuration entity for storing dynamic settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Category">
            <summary>
            Configuration category (Security, JWT, Lockout, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Key">
            <summary>
            Configuration key
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Value">
            <summary>
            Configuration value (JSON for complex objects)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.DataType">
            <summary>
            Data type of the value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Description">
            <summary>
            Description of what this setting does
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.RequiresRestart">
            <summary>
            Whether this setting requires application restart
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.IsEncrypted">
            <summary>
            Whether this setting is encrypted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.IsReadOnly">
            <summary>
            Whether this setting is read-only
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.IsSensitive">
            <summary>
            Whether this setting is sensitive (password, secret key, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.DefaultValue">
            <summary>
            Default value for this setting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.ValidationRules">
            <summary>
            Validation rules (JSON)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.MinValue">
            <summary>
            Minimum allowed value (for numeric types)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.MaxValue">
            <summary>
            Maximum allowed value (for numeric types)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.AllowedValues">
            <summary>
            Allowed values (JSON array for enum-like values)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Group">
            <summary>
            Configuration group for UI organization
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.DisplayOrder">
            <summary>
            Display order within the group
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.Environment">
            <summary>
            Environment where this configuration applies (All, Development, Production, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.AuditEntries">
            <summary>
            Navigation property for configuration audit entries
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.CompositeKey">
            <summary>
            Composite key for category and key
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.IsValidValue(System.String)">
            <summary>
            Checks if the configuration value is valid based on validation rules
            </summary>
            <param name="value">Value to validate</param>
            <returns>True if valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.UpdateValue(System.String,System.Int32)">
            <summary>
            Updates the configuration value with validation
            </summary>
            <param name="newValue">New value</param>
            <param name="modifiedBy">User making the change</param>
            <returns>True if updated successfully</returns>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.DisplayName">
            <summary>
            Gets the display name for this configuration
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration.HelpText">
            <summary>
            Gets help text for this configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.TimeSlot">
            <summary>
            Represents available time slots for visitor appointments with capacity management
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.Name">
            <summary>
            Time slot name/identifier
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.StartTime">
            <summary>
            Start time of the slot
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.EndTime">
            <summary>
            End time of the slot
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.MaxVisitors">
            <summary>
            Maximum visitors allowed in this time slot
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.ActiveDays">
            <summary>
            Days of week this slot is active (comma-separated: 1=Monday, 7=Sunday)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.LocationId">
            <summary>
            Location this time slot applies to (null = applies to all locations)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.IsActive">
            <summary>
            Whether this time slot is currently active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.BufferMinutes">
            <summary>
            Buffer time between appointments in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.AllowOverlapping">
            <summary>
            Whether to allow overlapping appointments
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.Location">
            <summary>
            Navigation property to location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.DurationMinutes">
            <summary>
            Gets the duration of this time slot in minutes
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.ContainsTime(System.DateTime)">
            <summary>
            Checks if a given time falls within this slot
            </summary>
            <param name="dateTime">DateTime to check</param>
            <returns>True if the time falls within this slot</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.IsActiveOnDay(System.DayOfWeek)">
            <summary>
            Checks if this time slot is active on a specific day
            </summary>
            <param name="dayOfWeek">Day of week to check</param>
            <returns>True if active on this day</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.HasTimeConflict(System.DateTime,System.DateTime)">
            <summary>
            Checks if an appointment time conflicts with this slot considering buffer time
            </summary>
            <param name="appointmentStart">Appointment start time</param>
            <param name="appointmentEnd">Appointment end time</param>
            <returns>True if there's a conflict</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.ValidateTimeSlot">
            <summary>
            Validates the time slot configuration
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.TimeSlot.GetDisplayString">
            <summary>
            Gets formatted display string
            </summary>
            <returns>Formatted time slot display</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.User">
            <summary>
            Represents a user in the system with authentication and authorization capabilities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FirstName">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LastName">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Email">
            <summary>
            User's email address (unique identifier)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.NormalizedEmail">
            <summary>
            Normalized email for case-insensitive comparisons
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordHash">
            <summary>
            Hashed password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordSalt">
            <summary>
            Salt used for password hashing
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PhoneNumber">
            <summary>
            User's phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Status">
            <summary>
            User's current status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Department">
            <summary>
            Department the user belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.JobTitle">
            <summary>
            Job title of the user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.EmployeeId">
            <summary>
            Employee ID or badge number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.ProfilePhotoPath">
            <summary>
            User's profile photo path
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LastLoginDate">
            <summary>
            Date when the user last logged in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FailedLoginAttempts">
            <summary>
            Number of failed login attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LockoutEnd">
            <summary>
            Date and time when the account is locked out until
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.IsLockedOut">
            <summary>
            Indicates whether the user account is locked out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.MustChangePassword">
            <summary>
            Indicates whether the user must change password on next login
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordChangedDate">
            <summary>
            Date when the password was last changed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.SecurityStamp">
            <summary>
            Security stamp for invalidating tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.TimeZone">
            <summary>
            User's timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Language">
            <summary>
            User's preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Theme">
            <summary>
            User's theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.RefreshTokens">
            <summary>
            Navigation property for refresh tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.CreatedAuditLogs">
            <summary>
            Navigation property for audit logs where this user is the creator
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FullName">
            <summary>
            Gets the user's full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.DisplayName">
            <summary>
            Gets the user's display name (full name or email if name is empty)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsCurrentlyLockedOut">
            <summary>
            Checks if the user account is currently locked out
            </summary>
            <returns>True if the account is locked out</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IncrementFailedLoginAttempts(System.Int32,System.TimeSpan)">
            <summary>
            Increments failed login attempts and locks account if threshold is reached
            </summary>
            <param name="maxAttempts">Maximum allowed failed attempts before lockout</param>
            <param name="lockoutDuration">Duration of lockout</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.ResetFailedLoginAttempts">
            <summary>
            Resets failed login attempts after successful login
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.LockAccount(System.TimeSpan)">
            <summary>
            Locks the user account for the specified duration
            </summary>
            <param name="lockoutDuration">Duration of the lockout</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UnlockAccount">
            <summary>
            Unlocks the user account
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.ChangePassword(System.String,System.String)">
            <summary>
            Changes the user's password
            </summary>
            <param name="newPasswordHash">New password hash</param>
            <param name="newPasswordSalt">New password salt</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UpdateSecurityStamp">
            <summary>
            Updates the user's security stamp to invalidate tokens
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.HasRole(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the user has the specified role
            </summary>
            <param name="role">Role to check</param>
            <returns>True if the user has the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsAdministrator">
            <summary>
            Checks if the user is an administrator
            </summary>
            <returns>True if the user is an administrator</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsStaff">
            <summary>
            Checks if the user is staff
            </summary>
            <returns>True if the user is staff</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsOperator">
            <summary>
            Checks if the user is an operator
            </summary>
            <returns>True if the user is an operator</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsValidForAuthentication">
            <summary>
            Validates the user's current state
            </summary>
            <returns>True if the user is valid for authentication</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UpdatePreferences(System.String,System.String,System.String)">
            <summary>
            Sets user preferences
            </summary>
            <param name="timeZone">User's timezone</param>
            <param name="language">User's preferred language</param>
            <param name="theme">User's theme preference</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.Visitor">
            <summary>
            Represents a visitor in the system
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.FirstName">
            <summary>
            Visitor's first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.LastName">
            <summary>
            Visitor's last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Email">
            <summary>
            Visitor's email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.NormalizedEmail">
            <summary>
            Normalized email for case-insensitive comparisons
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.PhoneNumber">
            <summary>
            Visitor's phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Company">
            <summary>
            Visitor's company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.JobTitle">
            <summary>
            Visitor's job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Address">
            <summary>
            Visitor's address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.DateOfBirth">
            <summary>
            Date of birth for age verification
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.GovernmentId">
            <summary>
            Government ID number (passport, driver's license, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.GovernmentIdType">
            <summary>
            Type of government ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Nationality">
            <summary>
            Visitor's nationality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Language">
            <summary>
            Visitor's preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.ProfilePhotoPath">
            <summary>
            Path to visitor's profile photo
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.DietaryRequirements">
            <summary>
            Special dietary requirements or allergies
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.AccessibilityRequirements">
            <summary>
            Special accessibility requirements
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.SecurityClearance">
            <summary>
            Security clearance level (if applicable)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.IsVip">
            <summary>
            Whether visitor is a VIP
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.IsBlacklisted">
            <summary>
            Whether visitor is blacklisted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.BlacklistReason">
            <summary>
            Reason for blacklisting (if applicable)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.BlacklistedOn">
            <summary>
            Date when blacklisted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.BlacklistedBy">
            <summary>
            User who blacklisted the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.VisitCount">
            <summary>
            Number of times visitor has been to the facility
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.LastVisitDate">
            <summary>
            Date of last visit
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Notes">
            <summary>
            Additional notes about the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.ExternalId">
            <summary>
            External system ID (for integration purposes)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.BlacklistedByUser">
            <summary>
            Navigation property for the user who blacklisted this visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Documents">
            <summary>
            Navigation property for visitor documents
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.VisitorNotes">
            <summary>
            Navigation property for visitor notes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.EmergencyContacts">
            <summary>
            Navigation property for emergency contacts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.FullName">
            <summary>
            Gets the visitor's full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.DisplayName">
            <summary>
            Gets the visitor's display name (full name or email if name is empty)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.Visitor.Age">
            <summary>
            Gets the visitor's age based on date of birth
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.IsCurrentlyBlacklisted">
            <summary>
            Checks if the visitor is currently blacklisted
            </summary>
            <returns>True if visitor is blacklisted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.Blacklist(System.String,System.Int32)">
            <summary>
            Blacklists the visitor
            </summary>
            <param name="reason">Reason for blacklisting</param>
            <param name="blacklistedBy">User performing the action</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.RemoveBlacklist(System.Int32)">
            <summary>
            Removes blacklist status from the visitor
            </summary>
            <param name="modifiedBy">User performing the action</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.MarkAsVip(System.Int32)">
            <summary>
            Marks visitor as VIP
            </summary>
            <param name="modifiedBy">User performing the action</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.RemoveVipStatus(System.Int32)">
            <summary>
            Removes VIP status from visitor
            </summary>
            <param name="modifiedBy">User performing the action</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.UpdateVisitStatistics">
            <summary>
            Updates visitor's visit statistics
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.ValidateVisitor">
            <summary>
            Validates the visitor's information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.GetMaskedInfo">
            <summary>
            Gets a masked version of sensitive information for display
            </summary>
            <returns>Visitor with masked sensitive data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.IsInformationComplete">
            <summary>
            Checks if visitor information is complete
            </summary>
            <returns>True if all required information is present</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.Visitor.UpdateNormalizedEmail">
            <summary>
            Updates the normalized email when email changes
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.VisitorDisplayInfo">
            <summary>
            Visitor display information with sensitive data masked
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.DateTimeExtensions">
            <summary>
            Extension methods for DateTime to calculate age
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.DateTimeExtensions.CalculateAge(System.DateTime)">
            <summary>
            Calculates age based on birth date
            </summary>
            <param name="birthDate">Birth date</param>
            <returns>Age in years</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument">
            <summary>
            Represents a document associated with a visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.VisitorId">
            <summary>
            Foreign key to the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.DocumentName">
            <summary>
            Document name/title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.Title">
            <summary>
            Document title (alias for DocumentName for consistency)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.Description">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.DocumentType">
            <summary>
            Document type (ID, Photo, Contract, NDA, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.OriginalFileName">
            <summary>
            Original file name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.StoredFileName">
            <summary>
            Stored file name (typically GUID-based)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.FilePath">
            <summary>
            File path where document is stored
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.FileSize">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.ContentType">
            <summary>
            MIME type of the document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.MimeType">
            <summary>
            MIME type alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.FileExtension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.FileHash">
            <summary>
            File hash for integrity verification
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.IsEncrypted">
            <summary>
            Whether the document is encrypted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.IsSensitive">
            <summary>
            Whether the document contains sensitive information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.IsRequired">
            <summary>
            Whether the document is required for the visitor process
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.ExpirationDate">
            <summary>
            Document expiration date (for temporary documents)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.ExpiryDate">
            <summary>
            Expiry date alias for consistency
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.Version">
            <summary>
            Document version number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.Tags">
            <summary>
            Tags associated with the document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.AccessLevel">
            <summary>
            Access level required to view the document
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.Visitor">
            <summary>
            Navigation property to the visitor
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.IsExpired">
            <summary>
            Checks if the document is expired
            </summary>
            <returns>True if the document is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.GetFormattedFileSize">
            <summary>
            Gets the file size in a human-readable format
            </summary>
            <returns>Formatted file size</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitorDocument.ValidateDocument">
            <summary>
            Validates the document information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.VisitorNote">
            <summary>
            Represents internal notes about a visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.VisitorId">
            <summary>
            Foreign key to the visitor
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Title">
            <summary>
            Note title/subject
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Content">
            <summary>
            Note content
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Category">
            <summary>
            Note category (General, Security, Medical, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Priority">
            <summary>
            Priority level (Low, Medium, High, Critical)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.IsFlagged">
            <summary>
            Whether the note is flagged for follow-up
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.IsConfidential">
            <summary>
            Whether the note is confidential
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.FollowUpDate">
            <summary>
            Follow-up date if flagged
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Tags">
            <summary>
            Tags associated with the note
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.Visitor">
            <summary>
            Navigation property to the visitor
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.IsFollowUpOverdue">
            <summary>
            Checks if the note requires follow-up and is overdue
            </summary>
            <returns>True if follow-up is overdue</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitorNote.ValidateNote">
            <summary>
            Validates the note information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose">
            <summary>
            Represents a visit purpose/category in the system
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.Name">
            <summary>
            Purpose name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.Description">
            <summary>
            Purpose description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.Code">
            <summary>
            Purpose code for categorization
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.ColorCode">
            <summary>
            Color code for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.IconName">
            <summary>
            Icon name for UI display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.DisplayOrder">
            <summary>
            Display order for sorting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.RequiresApproval">
            <summary>
            Whether approval is required for this purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.RequiresSecurityClearance">
            <summary>
            Whether security clearance is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.MaxDurationHours">
            <summary>
            Maximum visit duration in hours (0 = no limit)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.RequiresBackgroundCheck">
            <summary>
            Whether background check is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.IsDefault">
            <summary>
            Whether this is a default/system purpose
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.Requirements">
            <summary>
            Additional requirements/notes
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.ValidatePurpose">
            <summary>
            Validates the visit purpose information
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.GetDisplayText">
            <summary>
            Gets display text with additional info
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.VisitPurpose.Invitations">
            <summary>
            Navigation property for related invitations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.EventType">
            <summary>
            Represents the different types of events that can be logged in the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Authentication">
            <summary>
            Authentication related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Authorization">
            <summary>
            Authorization related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.UserManagement">
            <summary>
            User management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Invitation">
            <summary>
            Invitation related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Visitor">
            <summary>
            Visitor related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.CheckInOut">
            <summary>
            Check-in/Check-out events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.WalkIn">
            <summary>
            Walk-in related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.BulkImport">
            <summary>
            Bulk import events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Watchlist">
            <summary>
            Watchlist management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.CustomField">
            <summary>
            Custom field management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.FacialRecognition">
            <summary>
            Facial recognition system events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.SystemConfiguration">
            <summary>
            System configuration events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Security">
            <summary>
            Security related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.DataExportImport">
            <summary>
            Data export/import events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Notification">
            <summary>
            Notification events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Report">
            <summary>
            Report generation events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.SystemMaintenance">
            <summary>
            System maintenance events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.ApiAccess">
            <summary>
            API access events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Error">
            <summary>
            Error events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Performance">
            <summary>
            Performance events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Integration">
            <summary>
            Integration events (external systems)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.General">
            <summary>
            General events 
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions">
            <summary>
            Extension methods for EventType enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the display name for the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetSeverityLevel(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the severity level for the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Severity level (1 = Low, 5 = Critical)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.IsSecurityRelated(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type is security-related
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if security-related</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.RequiresImmediateAttention(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type requires immediate attention
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if requires immediate attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventColor(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the color associated with the event type for UI display
            </summary>
            <param name="eventType">Event type</param>
            <returns>Color hex code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventIcon(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the icon associated with the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Icon class name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetCategory(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the category for grouping event types
            </summary>
            <param name="eventType">Event type</param>
            <returns>Category name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.ShouldRetainForCompliance(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type should be retained for compliance
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if should be retained for compliance</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetRetentionPeriodDays(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the default retention period for the event type in days
            </summary>
            <param name="eventType">Event type</param>
            <returns>Retention period in days</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventTypesByCategory(System.String)">
            <summary>
            Gets all event types in a specific category
            </summary>
            <param name="category">Category name</param>
            <returns>List of event types in the category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetAllEventTypes">
            <summary>
            Gets all available event types
            </summary>
            <returns>List of all event types</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetSecurityEventTypes">
            <summary>
            Gets all security-related event types
            </summary>
            <returns>List of security-related event types</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetCriticalEventTypes">
            <summary>
            Gets all event types that require immediate attention
            </summary>
            <returns>List of event types requiring immediate attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetAllCategories">
            <summary>
            Gets all unique categories
            </summary>
            <returns>List of all categories</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.InvitationType">
            <summary>
            Invitation type enumeration
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationType.Single">
            <summary>
            Single visitor invitation
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationType.Group">
            <summary>
            Group invitation for multiple visitors
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationType.Recurring">
            <summary>
            Recurring invitation (daily, weekly, etc.)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationType.WalkIn">
            <summary>
            Walk-in visitor registration
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationType.BulkImport">
            <summary>
            Bulk imported invitation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.ApprovalDecision">
            <summary>
            Approval decision enumeration
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.ApprovalDecision.Pending">
            <summary>
            Pending approval
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.ApprovalDecision.Approved">
            <summary>
            Approved
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.ApprovalDecision.Rejected">
            <summary>
            Rejected
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.ApprovalDecision.Escalated">
            <summary>
            Escalated to higher authority
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus">
            <summary>
            Invitation status enumeration
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Draft">
            <summary>
            Draft - not yet submitted
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Submitted">
            <summary>
            Submitted - awaiting approval
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.UnderReview">
            <summary>
            Under review by admin
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Approved">
            <summary>
            Approved - ready for visit
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Rejected">
            <summary>
            Rejected by admin
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Cancelled">
            <summary>
            Cancelled by host or admin
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Expired">
            <summary>
            Expired - visit date passed
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Active">
            <summary>
            Active - visitor has checked in
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.InvitationStatus.Completed">
            <summary>
            Completed - visit finished
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.PermissionType">
            <summary>
            Represents the different types of permissions that can be granted to users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions">
            <summary>
            Extension methods for PermissionType enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the display name for the permission type
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionString(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the permission string used in authorization policies
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Permission string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetCategory(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the category for grouping permissions
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Category name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetRiskLevel(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the risk level associated with the permission
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Risk level (1 = Low, 5 = Critical)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.IsAdministrative(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Checks if the permission is considered administrative
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>True if administrative permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionsByCategory(System.String)">
            <summary>
            Gets permissions by category
            </summary>
            <param name="category">Category name</param>
            <returns>List of permissions in the category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAllCategories">
            <summary>
            Gets all permission categories
            </summary>
            <returns>List of all categories</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionsForRole(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets all permissions for a specific user role
            </summary>
            <param name="role">User role</param>
            <returns>List of permissions for the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.RequiresPermission(VisitorManagementSystem.Api.Domain.Enums.PermissionType,VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Checks if a permission requires another permission as a prerequisite
            </summary>
            <param name="permissionType">Permission to check</param>
            <param name="prerequisite">Potential prerequisite permission</param>
            <returns>True if prerequisite is required</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetMutuallyExclusivePermissions(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets all permissions that are mutually exclusive with the given permission
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>List of mutually exclusive permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAllPermissions">
            <summary>
            Gets all available permissions
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetHighRiskPermissions">
            <summary>
            Gets high-risk permissions that require special approval
            </summary>
            <returns>List of high-risk permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAdministrativePermissions">
            <summary>
            Gets administrative permissions
            </summary>
            <returns>List of administrative permissions</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserRole">
            <summary>
            Represents the different user roles in the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Staff">
            <summary>
            Staff member who can create and manage their own invitations
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Administrator">
            <summary>
            Administrator with full system access
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Operator">
            <summary>
            Operator who manages check-ins and walk-ins
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions">
            <summary>
            Extension methods for UserRole enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the display name for the user role
            </summary>
            <param name="role">User role</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetPermissionLevel(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the permission level for the user role
            </summary>
            <param name="role">User role</param>
            <returns>Permission level (higher number = more permissions)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsAdministrative(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role has administrative privileges
            </summary>
            <param name="role">User role</param>
            <returns>True if administrative role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageUsers(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can manage users
            </summary>
            <param name="role">User role</param>
            <returns>True if can manage users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanApproveInvitations(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can approve invitations
            </summary>
            <param name="role">User role</param>
            <returns>True if can approve invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanPerformCheckIns(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can perform check-ins
            </summary>
            <param name="role">User role</param>
            <returns>True if can perform check-ins</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanCreateInvitations(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can create invitations
            </summary>
            <param name="role">User role</param>
            <returns>True if can create invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanAccessSystemConfig(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can access system configuration
            </summary>
            <param name="role">User role</param>
            <returns>True if can access system configuration</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanViewReports(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can view reports
            </summary>
            <param name="role">User role</param>
            <returns>True if can view reports</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageWatchlists(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can manage watchlists
            </summary>
            <param name="role">User role</param>
            <returns>True if can manage watchlists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanPerformBulkImports(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can perform bulk imports
            </summary>
            <param name="role">User role</param>
            <returns>True if can perform bulk imports</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetAllRoles">
            <summary>
            Gets all available user roles
            </summary>
            <returns>List of all user roles</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetAssignableRoles(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets user roles that can be assigned by the specified role
            </summary>
            <param name="assignerRole">Role of the user doing the assignment</param>
            <returns>List of roles that can be assigned</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageRole(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role can manage another role
            </summary>
            <param name="managerRole">Role of the manager</param>
            <param name="targetRole">Role being managed</param>
            <returns>True if the manager role can manage the target role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetDefaultPermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the default permissions for a user role
            </summary>
            <param name="role">User role</param>
            <returns>List of default permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetHierarchyLevel(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the role hierarchy level
            </summary>
            <param name="role">User role</param>
            <returns>Hierarchy level (1 = lowest, 3 = highest)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsHigherThan(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role is higher than another in the hierarchy
            </summary>
            <param name="role">First role</param>
            <param name="otherRole">Second role</param>
            <returns>True if first role is higher than second role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsLowerThan(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role is lower than another in the hierarchy
            </summary>
            <param name="role">First role</param>
            <param name="otherRole">Second role</param>
            <returns>True if first role is lower than second role</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserStatus">
            <summary>
            Represents the different statuses a user can have
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Active">
            <summary>
            User account is active and can access the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Inactive">
            <summary>
            User account is inactive and cannot access the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Pending">
            <summary>
            User account is pending activation
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Suspended">
            <summary>
            User account is suspended temporarily
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Locked">
            <summary>
            User account is locked due to security reasons
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Archived">
            <summary>
            User account is archived (soft deleted)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.PasswordExpired">
            <summary>
            User password has expired
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.PasswordChangeRequired">
            <summary>
            User account requires password change
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions">
            <summary>
            Extension methods for UserStatus enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the display name for the user status
            </summary>
            <param name="status">User status</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.CanLogin(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status allows login
            </summary>
            <param name="status">User status</param>
            <returns>True if user can login</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.RequiresImmediateAction(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status requires immediate action
            </summary>
            <param name="status">User status</param>
            <returns>True if immediate action is required</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsTemporaryStatus(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status is temporary
            </summary>
            <param name="status">User status</param>
            <returns>True if status is temporary</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsDisabled(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status indicates the account is disabled
            </summary>
            <param name="status">User status</param>
            <returns>True if account is disabled</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetCssClass(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the CSS class for displaying the status
            </summary>
            <param name="status">User status</param>
            <returns>CSS class name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusColor(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the color associated with the status
            </summary>
            <param name="status">User status</param>
            <returns>Color name or hex code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusIcon(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the icon associated with the status
            </summary>
            <param name="status">User status</param>
            <returns>Icon name or class</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetValidTransitions(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets valid status transitions from the current status
            </summary>
            <param name="currentStatus">Current user status</param>
            <returns>List of valid next statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsValidTransition(VisitorManagementSystem.Api.Domain.Enums.UserStatus,VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if transition from one status to another is valid
            </summary>
            <param name="fromStatus">Current status</param>
            <param name="toStatus">Target status</param>
            <returns>True if transition is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusDescription(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the reason/description for the status
            </summary>
            <param name="status">User status</param>
            <returns>Status description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetAllStatuses">
            <summary>
            Gets all available user statuses
            </summary>
            <returns>List of all user statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetActiveStatuses">
            <summary>
            Gets statuses that are considered "active" for business purposes
            </summary>
            <returns>List of active statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetBlockedStatuses">
            <summary>
            Gets statuses that prevent user from accessing the system
            </summary>
            <returns>List of blocked statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetAdminInterventionStatuses">
            <summary>
            Gets statuses that require administrator intervention
            </summary>
            <returns>List of statuses requiring admin action</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.CanChangePassword(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the status allows password changes
            </summary>
            <param name="status">User status</param>
            <returns>True if password can be changed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetPriority(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the priority level for status (higher number = higher priority)
            </summary>
            <param name="status">User status</param>
            <returns>Priority level</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IAuditLogRepository">
            <summary>
            Interface for audit log repository operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IAuditLogRepository.GetByEntityAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit logs for a specific entity
            </summary>
            <param name="entityType">Entity type</param>
            <param name="entityId">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit logs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IAuditLogRepository.GetByUserAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit logs for a specific user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit logs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IAuditLogRepository.GetByDateRangeAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets audit logs within a date range
            </summary>
            <param name="fromDate">Start date</param>
            <param name="toDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit logs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IAuditLogRepository.CleanupOldLogsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Cleans up old audit logs
            </summary>
            <param name="olderThanDays">Delete logs older than specified days</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of deleted records</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository">
            <summary>
            Repository interface for ConfigurationAudit entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetConfigurationHistoryAsync(System.String,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit history for a specific configuration
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="pageSize">Number of records to retrieve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetConfigurationHistoryByIdAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit history for a configuration ID
            </summary>
            <param name="configurationId">Configuration ID</param>
            <param name="pageSize">Number of records to retrieve</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetByUserAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit entries by user
            </summary>
            <param name="userId">User ID</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetRecentChangesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets recent configuration changes
            </summary>
            <param name="hours">Hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of recent audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetByCategoryAsync(System.String,System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets configuration changes by category
            </summary>
            <param name="category">Configuration category</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetByActionAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets configuration changes by action type
            </summary>
            <param name="action">Action type (Created, Updated, Deleted)</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetPendingApprovalsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets configuration changes requiring approval
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of audit entries awaiting approval</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.SearchAsync(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Searches audit entries
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching audit entries</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.GetAuditStatsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets audit statistics
            </summary>
            <param name="days">Number of days to analyze</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Audit statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IConfigurationAuditRepository.ArchiveOldEntriesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Archives old audit entries
            </summary>
            <param name="olderThanDays">Archive entries older than this many days</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of archived entries</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ConfigurationAuditStats">
            <summary>
            Configuration audit statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IEmergencyContactRepository">
            <summary>
            Repository interface for emergency contact operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IEmergencyContactRepository.GetByVisitorIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all emergency contacts for a specific visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of emergency contacts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IEmergencyContactRepository.GetPrimaryContactAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the primary emergency contact for a visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Primary emergency contact if exists</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1">
            <summary>
            Generic repository interface for common CRUD operations
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets an entity by ID
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets an entity by ID with includes
            </summary>
            <param name="id">Entity ID</param>
            <param name="includes">Include expressions</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all entities
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets entities by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities matching specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetSingleAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a single entity by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with custom criteria
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities matching predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with ordering
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="orderBy">Order by expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Ordered list of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetDescendingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with ordering descending
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="orderByDesc">Order by descending expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Ordered list of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetPagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets paginated entities
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="predicate">Optional predicate</param>
            <param name="orderBy">Optional order by expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated result with entities and total count</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetPagedAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets paginated entities with specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated result with entities and total count</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Counts entities
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Total count of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Count of entities matching predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Counts entities by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Count of entities matching specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity matches predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity matches specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets first entity or default
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>First entity or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets single entity or default
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Single entity or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new entity
            </summary>
            <param name="entity">Entity to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Added entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds multiple entities
            </summary>
            <param name="entities">Entities to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Update(`0)">
            <summary>
            Updates an entity
            </summary>
            <param name="entity">Entity to update</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates multiple entities
            </summary>
            <param name="entities">Entities to update</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Remove(`0)">
            <summary>
            Removes an entity
            </summary>
            <param name="entity">Entity to remove</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Delete(`0)">
            <summary>
            Deletes an entity (alias for Remove)
            </summary>
            <param name="entity">Entity to delete</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Removes entities by ID
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple entities
            </summary>
            <param name="entities">Entities to remove</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Removes entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities removed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SoftDelete(`0,System.Int32)">
            <summary>
            Soft deletes an entity (if it inherits from SoftDeleteEntity)
            </summary>
            <param name="entity">Entity to soft delete</param>
            <param name="deletedBy">User performing the deletion</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SoftDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Soft deletes entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="deletedBy">User performing the deletion</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities soft deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Restore(`0,System.Int32)">
            <summary>
            Restores a soft deleted entity
            </summary>
            <param name="entity">Entity to restore</param>
            <param name="restoredBy">User performing the restoration</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.BulkUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
            Bulk updates entities
            </summary>
            <param name="predicate">Predicate to match entities</param>
            <param name="updateExpression">Update expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.BulkDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Bulk deletes entities
            </summary>
            <param name="predicate">Predicate to match entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.FromSqlAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes a raw SQL query
            </summary>
            <param name="sql">SQL query</param>
            <param name="parameters">Query parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ExecuteStoredProcedureAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="procedureName">Stored procedure name</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with tracking disabled (for read-only scenarios)
            </summary>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities (not tracked)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ProjectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Projects entities to a different type
            </summary>
            <typeparam name="TResult">Result type</typeparam>
            <param name="selector">Projection selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of projected results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GroupByAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Groups entities and projects the result
            </summary>
            <typeparam name="TKey">Group key type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="keySelector">Key selector for grouping</param>
            <param name="resultSelector">Result selector for projection</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of grouped and projected results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ExistsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if entity with ID exists
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets maximum value of a property
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Maximum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets minimum value of a property
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Minimum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets sum of a numeric property
            </summary>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Sum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets average of a numeric property
            </summary>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Average value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ReloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Reloads an entity from the database
            </summary>
            <param name="entity">Entity to reload</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Detach(`0)">
            <summary>
            Detaches an entity from the context
            </summary>
            <param name="entity">Entity to detach</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Attach(`0)">
            <summary>
            Attaches an entity to the context
            </summary>
            <param name="entity">Entity to attach</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetQueryable">
            <summary>
            Gets queryable for advanced querying (use with caution)
            </summary>
            <returns>IQueryable of entities</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository">
            <summary>
            Repository interface for invitation operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByVisitorIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets invitations by visitor ID
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByHostIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets invitations by host ID
            </summary>
            <param name="hostId">Host ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByStatusAsync(VisitorManagementSystem.Api.Domain.Enums.InvitationStatus,System.Threading.CancellationToken)">
            <summary>
            Gets invitations by status
            </summary>
            <param name="status">Invitation status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetPendingApprovalsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets pending approvals
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of pending invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByDateRangeAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets invitations by date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetActiveInvitationsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets active invitations (checked in visitors)
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetExpiredInvitationsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets expired invitations
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of expired invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.InvitationNumberExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if invitation number exists
            </summary>
            <param name="invitationNumber">Invitation number</param>
            <param name="excludeId">ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets invitation statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Invitation statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByInvitationNumberAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets invitation by invitation number
            </summary>
            <param name="invitationNumber">Invitation number</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Invitation if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IInvitationRepository.GetByQrCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets invitation by QR code
            </summary>
            <param name="qrCode">QR code data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Invitation if found</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.InvitationStatistics">
            <summary>
            Invitation statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository">
            <summary>
            Repository interface for location operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository.GetOrderedAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all locations ordered by display order
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository.GetByCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets location by code
            </summary>
            <param name="code">Location code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Location if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository.GetByTypeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets locations by type
            </summary>
            <param name="locationType">Location type</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locations of the specified type</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository.GetRootLocationsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets root locations (no parent)
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of root locations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ILocationRepository.GetChildLocationsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets child locations of a parent location
            </summary>
            <param name="parentId">Parent location ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of child locations</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository">
            <summary>
            Repository interface for RefreshToken entity operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a refresh token by token value
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByJwtIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a refresh token by JWT ID
            </summary>
            <param name="jwtId">JWT ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByUserIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens for the user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetValidTokensByUserIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets valid refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of valid refresh tokens for the user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetExpiredTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets expired refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of expired refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetRevokedTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets revoked refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of revoked refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetUsedTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets used refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of used refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByDeviceFingerprintAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens for the device</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByIpAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens by IP address
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens from the IP address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokensCreatedInPeriodAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens created within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens created in the date range</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokensExpiringWithinAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens expiring within a certain period
            </summary>
            <param name="expiryThreshold">Expiry threshold date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens expiring soon</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeAllTokensForUserAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeTokensByDeviceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes refresh tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeExpiredTokensAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes expired refresh tokens
            </summary>
            <param name="reason">Revocation reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.DeleteOldTokensAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Deletes old refresh tokens
            </summary>
            <param name="cutoffDate">Cutoff date for deletion</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.MarkTokenAsUsedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Marks a refresh token as used
            </summary>
            <param name="tokenId">Token ID</param>
            <param name="usedByIp">IP address where token was used</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token was successfully marked as used</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.ValidateTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result with token details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets refresh token statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenUsageAnalyticsAsync(System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets token usage analytics
            </summary>
            <param name="userId">Optional user ID filter</param>
            <param name="days">Number of days to analyze</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage analytics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetSuspiciousActivityAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets suspicious token activity
            </summary>
            <param name="hours">Number of hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of suspicious activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenChainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a token is part of a token chain (rotation)
            </summary>
            <param name="tokenId">Token ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token chain information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetConcurrentSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets concurrent sessions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of concurrent sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.LimitConcurrentSessionsAsync(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Limits concurrent sessions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="maxSessions">Maximum allowed sessions</param>
            <param name="reason">Revocation reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of sessions revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.PerformCleanupAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Performs token cleanup maintenance
            </summary>
            <param name="retentionDays">Number of days to retain old tokens</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.RefreshTokenValidationResult">
            <summary>
            Refresh token validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.RefreshTokenStatistics">
            <summary>
            Refresh token statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenUsageAnalytics">
            <summary>
            Token usage analytics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.SuspiciousTokenActivity">
            <summary>
            Suspicious token activity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenChainInfo">
            <summary>
            Token chain information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserSession">
            <summary>
            User session information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenCleanupResult">
            <summary>
            Token cleanup result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository">
            <summary>
            Repository interface for SystemConfiguration entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetByCategoryAndKeyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets configuration by category and key
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>System configuration or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetByCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all configurations for a category
            </summary>
            <param name="category">Configuration category</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetCategoriesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all configuration categories
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of categories</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetConfigurationsRequiringRestartAsync(System.Threading.CancellationToken)">
            <summary>
            Gets configurations that require restart
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of configurations requiring restart</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetEncryptedConfigurationsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets encrypted configurations
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of encrypted configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetByEnvironmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets configurations by environment
            </summary>
            <param name="environment">Environment name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.SearchAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Searches configurations by key or description
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.GetModifiedSinceAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets configurations modified after a specific date
            </summary>
            <param name="since">Date to check from</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of recently modified configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.BulkUpdateAsync(System.Collections.Generic.List{VisitorManagementSystem.Api.Domain.Entities.SystemConfiguration},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk updates configurations
            </summary>
            <param name="configurations">Configurations to update</param>
            <param name="modifiedBy">User making the changes</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of updated configurations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.ISystemConfigurationRepository.ExistsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a configuration exists
            </summary>
            <param name="category">Configuration category</param>
            <param name="key">Configuration key</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if exists</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork">
            <summary>
            Unit of Work interface for managing database transactions and repositories
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Users">
            <summary>
            User repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RefreshTokens">
            <summary>
            Refresh token repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.AuditLogs">
            <summary>
            Audit log repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SystemConfigurations">
            <summary>
            System configuration repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ConfigurationAudits">
            <summary>
            Configuration audit repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Visitors">
            <summary>
            Visitor repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.VisitorDocuments">
            <summary>
            Visitor document repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.VisitorNotes">
            <summary>
            Visitor note repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.EmergencyContacts">
            <summary>
            Emergency contact repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.VisitPurposes">
            <summary>
            Visit purpose repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Locations">
            <summary>
            Location repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Invitations">
            <summary>
            Invitation repository
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Repository``1">
            <summary>
            Gets a generic repository for any entity type
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <returns>Generic repository instance</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all changes to the database
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected records</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SaveChanges">
            <summary>
            Saves all changes to the database synchronously
            </summary>
            <returns>Number of affected records</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Begins a database transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BeginTransaction">
            <summary>
            Begins a database transaction synchronously
            </summary>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the current transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CommitTransaction">
            <summary>
            Commits the current transaction synchronously
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back the current transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackTransaction">
            <summary>
            Rolls back the current transaction synchronously
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteInTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes a function within a transaction
            </summary>
            <typeparam name="TResult">Result type</typeparam>
            <param name="func">Function to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteInTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes an action within a transaction
            </summary>
            <param name="action">Action to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteSqlAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes raw SQL command
            </summary>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteScalarAsync``1(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes raw SQL command and returns scalar result
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Scalar result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.HasChanges">
            <summary>
            Checks if there are any pending changes
            </summary>
            <returns>True if there are pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.DiscardChanges">
            <summary>
            Discards all pending changes
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ReloadEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Reloads an entity from the database
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to reload</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.DetachEntity``1(``0)">
            <summary>
            Detaches an entity from the context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to detach</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.AttachEntity``1(``0)">
            <summary>
            Attaches an entity to the context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to attach</param>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CurrentTransaction">
            <summary>
            Gets the current transaction if one exists
            </summary>
            <returns>Current transaction or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout for database operations
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetChangeTrackingEnabled(System.Boolean)">
            <summary>
            Enables or disables change tracking
            </summary>
            <param name="enabled">Whether to enable change tracking</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetQueryTrackingEnabled(System.Boolean)">
            <summary>
            Enables or disables query tracking
            </summary>
            <param name="enabled">Whether to enable query tracking</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.MigrateAsync(System.Threading.CancellationToken)">
            <summary>
            Performs database migration
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CanConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if database can connect
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if can connect</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetConnectionString">
            <summary>
            Gets database connection string
            </summary>
            <returns>Connection string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a savepoint in the current transaction
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rolls back to a savepoint
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Releases a savepoint
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetEntityEntry``1(``0)">
            <summary>
            Gets entity entry information
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity</param>
            <returns>Entity entry information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetPendingChanges">
            <summary>
            Gets all pending changes
            </summary>
            <returns>List of pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ValidateEntities">
            <summary>
            Validates all entities in the context
            </summary>
            <returns>Validation results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BulkOperationAsync``1(System.Collections.Generic.IEnumerable{``0},VisitorManagementSystem.Api.Domain.Interfaces.Repositories.BulkOperation,System.Threading.CancellationToken)">
            <summary>
            Executes a bulk operation
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Entities to process</param>
            <param name="operation">Operation type</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetupAuditContext(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sets up audit logging for the current operation
            </summary>
            <param name="userId">User performing the operation</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="correlationId">Correlation ID</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetPerformanceMetrics">
            <summary>
            Gets performance metrics for the current context
            </summary>
            <returns>Performance metrics</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.EntityEntryInfo">
            <summary>
            Entity entry information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.PendingChange">
            <summary>
            Pending change information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.EntityValidationResult">
            <summary>
            Entity validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.BulkOperation">
            <summary>
            Bulk operation types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.PerformanceMetrics">
            <summary>
            Performance metrics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.QueryMetric">
            <summary>
            Individual query metric
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository">
            <summary>
            Repository interface for User entity operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a user by email address
            </summary>
            <param name="email">Email address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByEmployeeIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a user by employee ID
            </summary>
            <param name="employeeId">Employee ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByRoleAsync(VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Threading.CancellationToken)">
            <summary>
            Gets users by role
            </summary>
            <param name="role">User role</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with the specified role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByStatusAsync(VisitorManagementSystem.Api.Domain.Enums.UserStatus,System.Threading.CancellationToken)">
            <summary>
            Gets users by status
            </summary>
            <param name="status">User status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with the specified status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets users by department
            </summary>
            <param name="department">Department name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users in the specified department</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.SearchAsync(System.String,System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserRole},System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserStatus},System.String,System.Threading.CancellationToken)">
            <summary>
            Searches users by various criteria
            </summary>
            <param name="searchTerm">Search term to match against name, email, employee ID</param>
            <param name="role">Optional role filter</param>
            <param name="status">Optional status filter</param>
            <param name="department">Optional department filter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetPaginatedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets paginated users with sorting
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDescending">Sort direction</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetActiveUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets active users
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetLockedOutUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets locked out users
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locked out users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithExpiredPasswordsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with expired passwords
            </summary>
            <param name="passwordExpiryDays">Number of days after which password expires</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with expired passwords</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersMustChangePasswordAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users who must change their password
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users who must change password</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersCreatedInPeriodAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets users created within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users created in the date range</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithRecentLoginAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with recent login activity
            </summary>
            <param name="recentDays">Number of recent days</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with recent login</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithFailedLoginAttemptsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with failed login attempts above threshold
            </summary>
            <param name="minFailedAttempts">Minimum failed attempts</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with failed login attempts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersRequiringSecurityAttentionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users requiring security attention
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users requiring security attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithValidRefreshTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users with valid refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with valid refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetInactiveUsersForCleanupAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets inactive users for cleanup
            </summary>
            <param name="inactiveDays">Number of days of inactivity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of inactive users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.EmailExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if email exists
            </summary>
            <param name="email">Email address</param>
            <param name="excludeUserId">User ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if email exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.EmployeeIdExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if employee ID exists
            </summary>
            <param name="employeeId">Employee ID</param>
            <param name="excludeUserId">User ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if employee ID exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUserStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets user statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUserActivitySummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user activity summary
            </summary>
            <param name="userId">User ID</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User activity summary</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkUpdateStatusAsync(System.Collections.Generic.List{System.Int32},VisitorManagementSystem.Api.Domain.Enums.UserStatus,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk updates user status
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="status">New status</param>
            <param name="modifiedBy">User making the change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkUpdateRoleAsync(System.Collections.Generic.List{System.Int32},VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk updates user roles
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="role">New role</param>
            <param name="modifiedBy">User making the change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkResetFailedLoginAttemptsAsync(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Bulk reset failed login attempts
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersByIdsAsync(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets users by multiple IDs efficiently
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary of user ID to user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.Delete(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Marks a user for deletion (hard delete)
            </summary>
            <param name="user">User to delete</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserStatistics">
            <summary>
            User statistics data transfer object
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserActivitySummary">
            <summary>
            User activity summary data transfer object
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorDocumentRepository">
            <summary>
            Repository interface for visitor document operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorDocumentRepository.GetByVisitorIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all documents for a specific visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visitor documents</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorDocumentRepository.GetByVisitorAndTypeAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets documents by type for a visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="documentType">Document type</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of documents of the specified type</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorDocumentRepository.GetExpiredDocumentsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets expired documents
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of expired documents</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorNoteRepository">
            <summary>
            Repository interface for visitor note operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorNoteRepository.GetByVisitorIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all notes for a specific visitor
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visitor notes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorNoteRepository.GetFlaggedNotesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets flagged notes that require follow-up
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of flagged notes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorNoteRepository.GetOverdueFollowUpsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets overdue follow-up notes
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of overdue notes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorNoteRepository.GetByCategoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets notes by category
            </summary>
            <param name="category">Note category</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of notes in the category</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository">
            <summary>
            Repository interface for visitor operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.EmailExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if a visitor with the specified email exists
            </summary>
            <param name="email">Email address</param>
            <param name="excludeId">ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if visitor exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a visitor by email address
            </summary>
            <param name="email">Email address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Visitor if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.SearchVisitorsAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Searches visitors by name, email, or company
            </summary>
            <param name="searchTerm">Search term</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated search results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetByCompanyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets visitors by company name
            </summary>
            <param name="company">Company name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visitors from the company</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetVipVisitorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all VIP visitors
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of VIP visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetBlacklistedVisitorsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all blacklisted visitors
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of blacklisted visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetIncompleteProfilesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets visitors with incomplete information
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visitors with missing required information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetPotentialDuplicatesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets duplicate visitors based on email and name matching
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Groups of potential duplicate visitors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetVisitorStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets visitor statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Visitor statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetVisitorsByDateRangeAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets visitors created within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visitors created in the date range</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GetTopCompaniesByVisitorCountAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets top companies by visitor count
            </summary>
            <param name="limit">Number of top companies to return</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of companies with visitor counts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.UpdateVisitStatisticsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Updates visitor visit statistics
            </summary>
            <param name="visitorId">Visitor ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitorRepository.GovernmentIdExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if visitor exists by government ID
            </summary>
            <param name="governmentId">Government ID</param>
            <param name="excludeId">ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if visitor exists with the government ID</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitPurposeRepository">
            <summary>
            Repository interface for visit purpose operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitPurposeRepository.GetOrderedAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all visit purposes ordered by display order
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of visit purposes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitPurposeRepository.GetByCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets visit purpose by code
            </summary>
            <param name="code">Purpose code</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Visit purpose if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IVisitPurposeRepository.CodeExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if a purpose code exists
            </summary>
            <param name="code">Purpose code</param>
            <param name="excludeId">ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if code exists</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher">
            <summary>
            Interface for publishing domain events
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes a domain event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="domainEvent">Domain event</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAsync(System.Collections.Generic.IEnumerable{VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent},System.Threading.CancellationToken)">
            <summary>
            Publishes multiple domain events
            </summary>
            <param name="domainEvents">List of domain events</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAndWaitAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes a domain event and waits for completion
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="domainEvent">Domain event</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent">
            <summary>
            Base interface for domain events
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventId">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.OccurredOn">
            <summary>
            When the event occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventType">
            <summary>
            Event type name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventData">
            <summary>
            Event data as JSON
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.CorrelationId">
            <summary>
            Correlation ID for tracking related events
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.TriggeredBy">
            <summary>
            User who triggered the event
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.BaseDomainEvent">
            <summary>
            Base class for domain events
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService">
            <summary>
            Interface for file storage operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.SaveFileAsync(System.IO.Stream,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves a file to storage
            </summary>
            <param name="fileStream">File stream</param>
            <param name="fileName">File name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>File path or URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.SaveFileAsync(System.IO.Stream,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves a file to a specific folder
            </summary>
            <param name="fileStream">File stream</param>
            <param name="fileName">File name</param>
            <param name="folderPath">Folder path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>File path or URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.DeleteFileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Deletes a file from storage
            </summary>
            <param name="filePath">File path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.FileExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if a file exists
            </summary>
            <param name="filePath">File path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if file exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.GetFileStreamAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a file stream for reading
            </summary>
            <param name="filePath">File path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>File stream</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.GetPublicUrl(System.String)">
            <summary>
            Gets the public URL for a file
            </summary>
            <param name="filePath">File path</param>
            <returns>Public URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IFileStorageService.GetFileMetadataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets file metadata
            </summary>
            <param name="filePath">File path</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>File metadata</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata">
            <summary>
            File metadata information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata.FileName">
            <summary>
            File name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata.Size">
            <summary>
            File size in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata.ContentType">
            <summary>
            Content type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata.LastModified">
            <summary>
            Last modified date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.FileMetadata.Extension">
            <summary>
            File extension
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService">
            <summary>
            Interface for notification operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService.SendNotificationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification message
            </summary>
            <param name="message">Notification message</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService.SendNotificationAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to specific user
            </summary>
            <param name="userId">User ID</param>
            <param name="message">Notification message</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService.SendNotificationAsync(System.Collections.Generic.IEnumerable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a notification to multiple users
            </summary>
            <param name="userIds">User IDs</param>
            <param name="message">Notification message</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService.SendTemplatedNotificationAsync(System.Int32,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends a templated notification
            </summary>
            <param name="userId">User ID</param>
            <param name="templateName">Template name</param>
            <param name="templateData">Template data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.INotificationService.SendSystemNotificationAsync(System.String,VisitorManagementSystem.Api.Domain.Interfaces.Services.NotificationType,System.Threading.CancellationToken)">
            <summary>
            Sends a system-wide notification
            </summary>
            <param name="message">Notification message</param>
            <param name="notificationType">Type of notification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.NotificationType">
            <summary>
            Notification types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.ISMSService">
            <summary>
            Interface for SMS service operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.ISMSService.SendSMSAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends an SMS message to a phone number
            </summary>
            <param name="phoneNumber">Phone number to send to</param>
            <param name="message">Message content</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.ISMSService.SendTemplatedSMSAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an SMS with template
            </summary>
            <param name="phoneNumber">Phone number to send to</param>
            <param name="templateName">Template name</param>
            <param name="templateData">Template data</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.ISMSService.IsServiceAvailableAsync(System.Threading.CancellationToken)">
            <summary>
            Validates if SMS service is configured and available
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if SMS service is available</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDateTimeProvider">
            <summary>
            Provides an abstraction for date and time operations to support testability.
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics">
            <summary>
            Visitor statistics data structure
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.TotalVisitors">
            <summary>
            Total number of visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.ActiveVisitors">
            <summary>
            Number of active visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.VipVisitors">
            <summary>
            Number of VIP visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.BlacklistedVisitors">
            <summary>
            Number of blacklisted visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.IncompleteProfiles">
            <summary>
            Number of visitors with incomplete profiles
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.VisitorsThisMonth">
            <summary>
            Visitors created this month
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.VisitorsThisYear">
            <summary>
            Visitors created this year
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.VisitorStatistics.AverageVisitsPerVisitor">
            <summary>
            Average visits per visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Models.CompanyVisitorCount">
            <summary>
            Company visitor count data structure
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.CompanyVisitorCount.Company">
            <summary>
            Company name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.CompanyVisitorCount.VisitorCount">
            <summary>
            Number of unique visitors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.CompanyVisitorCount.TotalVisits">
            <summary>
            Total number of visits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Models.CompanyVisitorCount.LastVisit">
            <summary>
            Date of last visit from this company
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1">
            <summary>
            Base specification class for building queries
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Criteria">
            <summary>
            Criteria expression for filtering
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Includes">
            <summary>
            Include expressions for related entities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IncludeStrings">
            <summary>
            Include string expressions for related entities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.OrderBy">
            <summary>
            Order by expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.OrderByDescending">
            <summary>
            Order by descending expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.GroupBy">
            <summary>
            Group by expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Take">
            <summary>
            Take count for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Skip">
            <summary>
            Skip count for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IsPagingEnabled">
            <summary>
            Whether to apply paging
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IsTracking">
            <summary>
            Whether to track changes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IsSplitQuery">
            <summary>
            Whether to split queries
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AddInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an include expression
            </summary>
            <param name="includeExpression">Include expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AddInclude(System.String)">
            <summary>
            Adds an include string
            </summary>
            <param name="includeString">Include string</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyPaging(System.Int32,System.Int32)">
            <summary>
            Applies paging
            </summary>
            <param name="skip">Skip count</param>
            <param name="take">Take count</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyOrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies ordering
            </summary>
            <param name="orderByExpression">Order by expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyOrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies descending ordering
            </summary>
            <param name="orderByDescExpression">Order by descending expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AsNoTracking">
            <summary>
            Disables change tracking
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AsSplitQuery">
            <summary>
            Enables split query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ActiveUsersSpecification">
            <summary>
            Specification for active users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByRoleSpecification">
            <summary>
            Specification for users by role
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByStatusSpecification">
            <summary>
            Specification for users by status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserByEmailSpecification">
            <summary>
            Specification for users by email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserByEmployeeIdSpecification">
            <summary>
            Specification for users by employee ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.LockedOutUsersSpecification">
            <summary>
            Specification for locked out users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithExpiredPasswordsSpecification">
            <summary>
            Specification for users with expired passwords
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersMustChangePasswordSpecification">
            <summary>
            Specification for users who must change password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.InactiveUsersForCleanupSpecification">
            <summary>
            Specification for inactive users for cleanup
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserSearchSpecification">
            <summary>
            Specification for searching users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersCreatedInPeriodSpecification">
            <summary>
            Specification for users created within a date range
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByDepartmentSpecification">
            <summary>
            Specification for users by department
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithRecentLoginSpecification">
            <summary>
            Specification for users with recent login
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithFailedLoginAttemptsSpecification">
            <summary>
            Specification for users with failed login attempts
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.PaginatedUsersSpecification">
            <summary>
            Specification for paginated users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersRequiringSecurityAttentionSpecification">
            <summary>
            Specification for users requiring security attention
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithValidRefreshTokensSpecification">
            <summary>
            Specification for users with valid refresh tokens
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ParameterReplacer">
            <summary>
            Helper class for replacing parameters in expressions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.VisitorFilterSpecification">
            <summary>
            Specification for filtering visitors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ExpressionExtensions">
            <summary>
            Extension method for parameter replacement in expressions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ReplaceVisitor">
            <summary>
            Visitor for replacing expressions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.Address">
            <summary>
            Value object representing a physical address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Street1">
            <summary>
            Street address line 1
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Street2">
            <summary>
            Street address line 2 (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.State">
            <summary>
            State or province
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.PostalCode">
            <summary>
            Postal or ZIP code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Country">
            <summary>
            Country name or code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Latitude">
            <summary>
            Optional latitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Longitude">
            <summary>
            Optional longitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.AddressType">
            <summary>
            Address type (Home, Work, Billing, Shipping, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsValidated">
            <summary>
            Whether this address has been validated
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new Address value object
            </summary>
            <param name="street1">Street address line 1</param>
            <param name="city">City name</param>
            <param name="state">State or province</param>
            <param name="postalCode">Postal or ZIP code</param>
            <param name="country">Country</param>
            <param name="street2">Optional street address line 2</param>
            <param name="addressType">Type of address</param>
            <param name="latitude">Optional latitude</param>
            <param name="longitude">Optional longitude</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateCoordinates">
            <summary>
            Validates the coordinate values
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidatePostalCode">
            <summary>
            Validates the postal code format based on country
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateUSPostalCode">
            <summary>
            Validates US ZIP code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateCanadianPostalCode">
            <summary>
            Validates Canadian postal code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateUKPostalCode">
            <summary>
            Validates UK postal code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetFullAddress(System.Boolean)">
            <summary>
            Gets the full address as a single string
            </summary>
            <param name="includeName">Whether to include address type</param>
            <returns>Formatted address string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetMailingFormat">
            <summary>
            Gets the address formatted for mailing labels
            </summary>
            <returns>Mailing label formatted address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetSingleLine">
            <summary>
            Gets a single line representation of the address
            </summary>
            <returns>Single line address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.HasCoordinates">
            <summary>
            Checks if the address has geographic coordinates
            </summary>
            <returns>True if both latitude and longitude are set</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.CalculateDistanceTo(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Calculates the distance to another address (if both have coordinates)
            </summary>
            <param name="other">Other address</param>
            <returns>Distance in kilometers, or null if coordinates are missing</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.CalculateHaversineDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates distance using the Haversine formula
            </summary>
            <param name="lat1">Latitude 1</param>
            <param name="lon1">Longitude 1</param>
            <param name="lat2">Latitude 2</param>
            <param name="lon2">Longitude 2</param>
            <returns>Distance in kilometers</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degrees">Degrees</param>
            <returns>Radians</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.WithCoordinates(System.Double,System.Double)">
            <summary>
            Creates a new address with coordinates
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <returns>New address with coordinates</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.MarkAsValidated">
            <summary>
            Creates a new address marked as validated
            </summary>
            <returns>New address marked as validated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsSameCity(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Checks if this address is in the same city as another address
            </summary>
            <param name="other">Other address</param>
            <returns>True if same city</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsSameCountry(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Checks if this address is in the same country as another address
            </summary>
            <param name="other">Other address</param>
            <returns>True if same country</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetCountryCode">
            <summary>
            Gets the country code (ISO format if possible)
            </summary>
            <returns>Country code</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo">
            <summary>
            Value object representing complete contact information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryEmail">
            <summary>
            Primary email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.SecondaryEmail">
            <summary>
            Secondary email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryPhone">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.SecondaryPhone">
            <summary>
            Secondary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.MobilePhone">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WorkPhone">
            <summary>
            Work phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.FaxNumber">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryAddress">
            <summary>
            Primary address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WorkAddress">
            <summary>
            Work address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.BillingAddress">
            <summary>
            Billing address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.Website">
            <summary>
            Website URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LinkedIn">
            <summary>
            LinkedIn profile URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.Twitter">
            <summary>
            Twitter handle
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PreferredContactMethod">
            <summary>
            Preferred contact method
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.BestTimeToContact">
            <summary>
            Best time to contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.TimeZone">
            <summary>
            Time zone for contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LanguagePreference">
            <summary>
            Language preference for communication
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ContactInstructions">
            <summary>
            Special contact instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.IsVerified">
            <summary>
            Whether contact info has been verified
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LastVerifiedDate">
            <summary>
            Date when contact info was last verified
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.#ctor(VisitorManagementSystem.Api.Domain.ValueObjects.Email,VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber,VisitorManagementSystem.Api.Domain.ValueObjects.Address,System.String,System.String)">
            <summary>
            Creates a new ContactInfo value object
            </summary>
            <param name="primaryEmail">Primary email address</param>
            <param name="primaryPhone">Primary phone number</param>
            <param name="primaryAddress">Primary address</param>
            <param name="preferredContactMethod">Preferred contact method</param>
            <param name="languagePreference">Language preference</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ValidateContactInfo">
            <summary>
            Validates that at least one contact method is provided
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ValidatePreferredContactMethod">
            <summary>
            Validates the preferred contact method
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryEmail">
            <summary>
            Gets the primary email address
            </summary>
            <returns>Primary email or secondary if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryPhone">
            <summary>
            Gets the primary phone number
            </summary>
            <returns>Primary phone or mobile if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryAddress">
            <summary>
            Gets the primary address
            </summary>
            <returns>Primary address or work address if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllEmails">
            <summary>
            Gets all email addresses
            </summary>
            <returns>List of all email addresses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllPhoneNumbers">
            <summary>
            Gets all phone numbers
            </summary>
            <returns>List of all phone numbers</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllAddresses">
            <summary>
            Gets all addresses
            </summary>
            <returns>List of all addresses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.HasVerifiedContact">
            <summary>
            Checks if any contact method is verified
            </summary>
            <returns>True if any contact method is verified</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPreferredContactInfo">
            <summary>
            Gets the preferred contact information based on the preferred method
            </summary>
            <returns>Contact information for preferred method</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithEmail(VisitorManagementSystem.Api.Domain.ValueObjects.Email,System.Boolean)">
            <summary>
            Creates a new ContactInfo with additional email
            </summary>
            <param name="email">Email to add</param>
            <param name="isPrimary">Whether this should be the primary email</param>
            <returns>New ContactInfo with the email added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithPhoneNumber(VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber,System.String)">
            <summary>
            Creates a new ContactInfo with additional phone number
            </summary>
            <param name="phoneNumber">Phone number to add</param>
            <param name="phoneType">Type of phone (Primary, Secondary, Mobile, Work, Fax)</param>
            <returns>New ContactInfo with the phone number added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithAddress(VisitorManagementSystem.Api.Domain.ValueObjects.Address,System.String)">
            <summary>
            Creates a new ContactInfo with additional address
            </summary>
            <param name="address">Address to add</param>
            <param name="addressType">Type of address (Primary, Work, Billing)</param>
            <returns>New ContactInfo with the address added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.MarkAsVerified">
            <summary>
            Creates a new ContactInfo marked as verified
            </summary>
            <returns>New ContactInfo marked as verified</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithPreferredContactMethod(System.String)">
            <summary>
            Updates the preferred contact method
            </summary>
            <param name="preferredMethod">New preferred contact method</param>
            <returns>New ContactInfo with updated preferred method</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetContactSummary">
            <summary>
            Gets a summary of all contact methods
            </summary>
            <returns>Summary string of contact methods</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.Email">
            <summary>
            Value object representing an email address with validation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Value">
            <summary>
            The email address value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Domain">
            <summary>
            The domain part of the email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.LocalPart">
            <summary>
            The local part of the email address (before @)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.#ctor(System.String)">
            <summary>
            Creates a new Email value object
            </summary>
            <param name="value">The email address</param>
            <exception cref="T:System.ArgumentException">Thrown when email is invalid</exception>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsValidEmail(System.String)">
            <summary>
            Validates an email address format
            </summary>
            <param name="email">Email address to validate</param>
            <returns>True if the email format is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsCommonProvider">
            <summary>
            Checks if the email domain is from a common provider
            </summary>
            <returns>True if from a common email provider</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsBusinessEmail">
            <summary>
            Checks if the email appears to be a business email
            </summary>
            <returns>True if appears to be a business email</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsDisposableEmail">
            <summary>
            Checks if the email is from a known disposable email provider
            </summary>
            <returns>True if from a disposable email provider</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetNormalized">
            <summary>
            Gets the normalized version of the email (lowercase, trimmed)
            </summary>
            <returns>Normalized email address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetMasked">
            <summary>
            Creates a masked version of the email for display purposes
            </summary>
            <returns>Masked email address (e.g., j***@example.com)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetDisplayName">
            <summary>
            Gets the display name part of the email (local part)
            </summary>
            <returns>Display name from email</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Matches(System.String)">
            <summary>
            Checks if this email matches another email (case-insensitive)
            </summary>
            <param name="other">Other email to compare</param>
            <returns>True if emails match</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber">
            <summary>
            Value object representing a phone number with validation and formatting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.Value">
            <summary>
            The raw phone number value as provided
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.FormattedValue">
            <summary>
            The formatted phone number for display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.DigitsOnly">
            <summary>
            The phone number with only digits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.CountryCode">
            <summary>
            The country code (if detected)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.AreaCode">
            <summary>
            The area code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.PhoneType">
            <summary>
            The phone number type (Mobile, Landline, Unknown)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsVerified">
            <summary>
            Whether the phone number is verified
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.#ctor(System.String,System.String)">
            <summary>
            Creates a new PhoneNumber value object
            </summary>
            <param name="value">The phone number</param>
            <param name="countryCode">Optional country code if not included in the number</param>
            <exception cref="T:System.ArgumentException">Thrown when phone number is invalid</exception>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidPhoneNumber(System.String)">
            <summary>
            Validates a phone number format
            </summary>
            <param name="phoneNumber">Phone number to validate</param>
            <returns>True if the phone number format is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidInternationalFormat(System.String)">
            <summary>
            Checks if the phone number is in valid international format
            </summary>
            <param name="phoneNumber">Phone number to check</param>
            <returns>True if valid international format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidSimpleFormat(System.String)">
            <summary>
            Checks if the phone number is in valid simple format
            </summary>
            <param name="phoneNumber">Phone number to check</param>
            <returns>True if valid simple format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.ExtractDigitsOnly(System.String)">
            <summary>
            Extracts only digits from the phone number
            </summary>
            <param name="phoneNumber">Phone number</param>
            <returns>Digits only</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.ParsePhoneComponents(System.String,System.String)">
            <summary>
            Parses phone number components (country code, area code)
            </summary>
            <param name="phoneNumber">Phone number</param>
            <param name="defaultCountryCode">Default country code</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidCountryCode(System.String)">
            <summary>
            Checks if a string is a valid country code
            </summary>
            <param name="code">Potential country code</param>
            <returns>True if valid country code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.FormatPhoneNumber">
            <summary>
            Formats the phone number for display
            </summary>
            <returns>Formatted phone number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.DeterminePhoneType">
            <summary>
            Determines the type of phone number
            </summary>
            <returns>Phone type (Mobile, Landline, Unknown)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.MarkAsVerified">
            <summary>
            Marks the phone number as verified
            </summary>
            <returns>New PhoneNumber instance with verified status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.GetInternationalFormat">
            <summary>
            Gets the international format of the phone number
            </summary>
            <returns>Phone number in international format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.GetNationalFormat">
            <summary>
            Gets the national format of the phone number
            </summary>
            <returns>Phone number in national format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsMobile">
            <summary>
            Checks if this is a mobile number
            </summary>
            <returns>True if mobile number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsLandline">
            <summary>
            Checks if this is a landline number
            </summary>
            <returns>True if landline number</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions">
            <summary>
            Service collection extensions for dependency injection configuration
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures application services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers configuration services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers core application services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterExternalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers external service implementations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterBackgroundServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers background services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers validators
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterInfrastructureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers infrastructure services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers repository implementations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Swagger/OpenAPI
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures health checks for the application
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures security services with default settings
            Security settings are now managed dynamically via database
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureRateLimiting(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures rate limiting
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureApiOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures API options
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureCompression(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures response compression
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureApiVersioning(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures API versioning
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures the application database context
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures ASP.NET Core Identity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext">
            <summary>
            Application database context
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.DetachAllEntities">
            <summary>
            Detaches all tracked entities
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.GetPendingChanges">
            <summary>
            Gets entities with pending changes
            </summary>
            <returns>List of entities with changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.HasPendingChanges">
            <summary>
            Checks if there are any pending changes
            </summary>
            <returns>True if there are pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout for the context
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.BeginTransactionAsync">
            <summary>
            Begins a transaction
            </summary>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.ExecuteSqlAsync(System.String,System.Object[])">
            <summary>
            Executes raw SQL
            </summary>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.GetConnectionString">
            <summary>
            Gets database connection string
            </summary>
            <returns>Connection string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.CanConnectAsync">
            <summary>
            Checks if database can connect
            </summary>
            <returns>True if can connect</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.MigrateAsync">
            <summary>
            Migrates the database
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.EnsureCreatedAsync">
            <summary>
            Ensures database is created
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.ResetDatabaseAsync">
            <summary>
            Resets all database data (USE WITH CAUTION)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditableEntityConfiguration`1">
            <summary>
            Configuration for auditable entities
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditableEntityConfiguration`1.ConfigureAuditableEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to configure auditable entity-specific properties
            </summary>
            <param name="builder">Entity type builder</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditLogConfiguration">
            <summary>
            Entity configuration for AuditLog
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.BaseEntityConfiguration`1">
            <summary>
            Base entity configuration for common properties
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.BaseEntityConfiguration`1.ConfigureDerivedEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to configure entity-specific properties
            </summary>
            <param name="builder">Entity type builder</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.ConfigurationAuditConfiguration">
            <summary>
            Configuration for ConfigurationAudit entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.EmergencyContactConfiguration">
            <summary>
            Entity configuration for EmergencyContact
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.InvitationApprovalConfiguration">
            <summary>
            Entity Framework configuration for InvitationApproval entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.InvitationConfiguration">
            <summary>
            Entity Framework configuration for Invitation entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.InvitationEventConfiguration">
            <summary>
            Entity Framework configuration for InvitationEvent entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.InvitationTemplateConfiguration">
            <summary>
            Entity Framework configuration for InvitationTemplate entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.LocationConfiguration">
            <summary>
            Entity configuration for Location
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.OccupancyLogConfiguration">
            <summary>
            Entity configuration for OccupancyLog
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.RefreshTokenConfiguration">
            <summary>
            Entity configuration for RefreshToken
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.SoftDeleteEntityConfiguration`1">
            <summary>
            Configuration for soft delete entities
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.SoftDeleteEntityConfiguration`1.ConfigureSoftDeleteEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to configure soft delete entity-specific properties
            </summary>
            <param name="builder">Entity type builder</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.SystemConfigurationConfiguration">
            <summary>
            Configuration for SystemConfiguration entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.TimeSlotConfiguration">
            <summary>
            Entity configuration for TimeSlot
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.UserConfiguration">
            <summary>
            Entity configuration for User
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.VisitorConfiguration">
            <summary>
            Entity configuration for Visitor
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.VisitorDocumentConfiguration">
            <summary>
            Entity configuration for VisitorDocument
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.VisitorNoteConfiguration">
            <summary>
            Entity configuration for VisitorNote
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.VisitPurposeConfiguration">
            <summary>
            Entity configuration for VisitPurpose
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer">
            <summary>
            Database initializer for seeding initial data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.InitializeAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext,System.IServiceProvider)">
            <summary>
            Initializes the database with seed data
            </summary>
            <param name="context">Database context</param>
            <param name="serviceProvider">Service provider for dependency injection</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.SeedUsersAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Seeds initial users
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.SeedSystemConfigAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext,System.IServiceProvider)">
            <summary>
            Seeds system configuration
            </summary>
            <param name="context">Database context</param>
            <param name="serviceProvider">Service provider for dependency injection</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.MigrateAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Creates a migration if needed
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.ResetDatabaseAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Resets the database (USE WITH EXTREME CAUTION)
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.CheckDatabaseHealthAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Checks database health
            </summary>
            <param name="context">Database context</param>
            <returns>Database health status</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.DatabaseHealthStatus">
            <summary>
            Database health status information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.AuditLogRepository">
            <summary>
            Repository for audit log operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.BaseRepository`1">
            <summary>
            Base repository implementation for common CRUD operations
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.BaseRepository`1.GetQueryable">
            <summary>
            Gets queryable for advanced querying (use with caution)
            </summary>
            <returns>IQueryable of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.BaseRepository`1.Delete(`0)">
            <summary>
            Delete method alias for consistency with handlers
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.SpecificationEvaluator">
            <summary>
            Specification evaluator for applying specifications to queries
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.ConfigurationAuditRepository">
            <summary>
            Repository implementation for ConfigurationAudit entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.EmergencyContactRepository">
            <summary>
            Repository implementation for emergency contact operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.InvitationRepository">
            <summary>
            Repository implementation for invitation operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.LocationRepository">
            <summary>
            Repository implementation for location operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.RefreshTokenRepository">
            <summary>
            Repository implementation for RefreshToken entity operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.SystemConfigurationRepository">
            <summary>
            Repository implementation for SystemConfiguration entity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.UserRepository">
            <summary>
            Repository implementation for User entity operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.VisitorDocumentRepository">
            <summary>
            Repository implementation for visitor document operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.VisitorNoteRepository">
            <summary>
            Repository implementation for visitor note operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.VisitorRepository">
            <summary>
            Repository implementation for visitor operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.VisitPurposeRepository">
            <summary>
            Repository implementation for visit purpose operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.ComprehensiveConfigurationSeeder">
            <summary>
            Comprehensive configuration seeder that migrates ALL settings to database
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.ComprehensiveConfigurationSeeder.SeedAllConfigurationsAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext,System.IServiceProvider,System.Nullable{System.Int32})">
            <summary>
            Seeds all system configurations into the database
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder">
            <summary>
            Seeder for permission and role-based access control data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetAllPermissions">
            <summary>
            Gets all available permissions in the system
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of permissions by category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetRolePermissions">
            <summary>
            Gets default permissions for each role
            </summary>
            <returns>Dictionary of role to permissions mapping</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.ValidateRolePermissions">
            <summary>
            Validates that all role permissions are valid
            </summary>
            <returns>True if all permissions are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionDependencies">
            <summary>
            Gets permission hierarchy (which permissions depend on others)
            </summary>
            <returns>Dictionary of permission dependencies</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetHighRiskPermissions">
            <summary>
            Gets high-risk permissions that require special approval
            </summary>
            <returns>List of high-risk permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionsByRiskLevel">
            <summary>
            Gets permissions by risk level
            </summary>
            <returns>Dictionary of risk level to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetMutuallyExclusivePermissions">
            <summary>
            Gets permissions that are mutually exclusive
            </summary>
            <returns>Dictionary of mutually exclusive permission groups</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionTemplates">
            <summary>
            Gets permission templates for common scenarios
            </summary>
            <returns>Dictionary of permission templates</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.ValidatePermissionTemplates">
            <summary>
            Validates permission templates
            </summary>
            <returns>True if all templates are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetRoleUpgradePermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets recommended permissions for a role upgrade
            </summary>
            <param name="currentRole">Current role</param>
            <param name="targetRole">Target role</param>
            <returns>List of additional permissions needed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionAuditInfo">
            <summary>
            Gets permission audit information
            </summary>
            <returns>Permission audit data</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionAuditInfo">
            <summary>
            Permission audit information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder">
            <summary>
            Seeder for initial user data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetSeedUsers">
            <summary>
            Gets seed users for initial database setup
            </summary>
            <returns>List of seed users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.CreateUser(System.String,System.String,System.String,VisitorManagementSystem.Api.Domain.Enums.UserRole,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a user with hashed password
            </summary>
            <param name="firstName">First name</param>
            <param name="lastName">Last name</param>
            <param name="email">Email address</param>
            <param name="role">User role</param>
            <param name="department">Department</param>
            <param name="jobTitle">Job title</param>
            <param name="employeeId">Employee ID</param>
            <param name="password">Password (defaults to "Password123!")</param>
            <returns>User entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.HashPassword(System.String)">
            <summary>
            Hashes a password using PBKDF2
            </summary>
            <param name="password">Plain text password</param>
            <returns>Tuple of password hash and salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetTestUsers">
            <summary>
            Gets test users for development/testing
            </summary>
            <returns>List of test users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.CreateUserWithPhone(System.String,System.String,System.String,System.String,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Creates a user with specific phone number
            </summary>
            <param name="firstName">First name</param>
            <param name="lastName">Last name</param>
            <param name="email">Email</param>
            <param name="phoneNumber">Phone number</param>
            <param name="role">User role</param>
            <returns>User with phone number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetLoadTestUsers(System.Int32)">
            <summary>
            Gets users for load testing
            </summary>
            <param name="count">Number of users to create</param>
            <returns>List of load test users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.ValidateSeedUsers(System.Collections.Generic.List{VisitorManagementSystem.Api.Domain.Entities.User})">
            <summary>
            Validates that all seed users have unique emails and employee IDs
            </summary>
            <param name="users">List of users to validate</param>
            <returns>True if all users are valid</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.UnitOfWork">
            <summary>
            Unit of Work implementation for managing database transactions and repositories
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyAuthenticationHandler">
            <summary>
            API Key authentication handler for external integrations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyAuthenticationSchemeOptions">
            <summary>
            API Key authentication scheme options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyInfo">
            <summary>
            API Key information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.JwtAuthenticationHandler">
            <summary>
            Custom JWT authentication handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.JwtAuthenticationSchemeOptions">
            <summary>
            JWT authentication scheme options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultiplePermissionsRequirement">
            <summary>
            Multiple permissions requirement (user must have ALL permissions)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.AnyPermissionRequirement">
            <summary>
            Any permission requirement (user must have ANY of the permissions)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PermissionHandler">
            <summary>
            Permission-based authorization handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultiplePermissionsHandler">
            <summary>
            Handler for multiple permissions requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.AnyPermissionHandler">
            <summary>
            Handler for any permission requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PermissionRequirement">
            <summary>
            Permission requirement implementation (already defined in PermissionHandler.cs)
            This file exists to maintain clean separation if needed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.ResourcePermissionRequirement">
            <summary>
            Resource-based permission requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.OwnerPermissionRequirement">
            <summary>
            Owner-based permission requirement (user can only access their own resources)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.TimeBasedPermissionRequirement">
            <summary>
            Time-based permission requirement (access only during certain hours)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.IPBasedPermissionRequirement">
            <summary>
            IP-based permission requirement (access only from certain IP addresses)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PolicyProvider">
            <summary>
            Custom authorization policy provider
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PolicyNames">
            <summary>
            Authorization policy names for easy reference
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.RoleHandler">
            <summary>
            Role-based authorization handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.RoleRequirement">
            <summary>
            Role requirement for authorization
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultipleRolesRequirement">
            <summary>
            Multiple roles requirement (user must have ANY of the roles)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultipleRolesHandler">
            <summary>
            Handler for multiple roles requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.AESEncryptionService">
            <summary>
            AES encryption service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService">
            <summary>
            Interface for encryption and decryption services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts data using AES encryption
            </summary>
            <param name="plainText">Data to encrypt</param>
            <returns>Encrypted data as base64 string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Decrypt(System.String)">
            <summary>
            Decrypts data using AES encryption
            </summary>
            <param name="cipherText">Encrypted data as base64 string</param>
            <returns>Decrypted plain text</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.EncryptWithKey(System.String,System.String)">
            <summary>
            Encrypts data with a specific key
            </summary>
            <param name="plainText">Data to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.DecryptWithKey(System.String,System.String)">
            <summary>
            Decrypts data with a specific key
            </summary>
            <param name="cipherText">Encrypted data</param>
            <param name="key">Decryption key</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.GenerateKey(System.Int32)">
            <summary>
            Generates a secure random key
            </summary>
            <param name="keySize">Key size in bits</param>
            <returns>Base64 encoded key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.GenerateIV">
            <summary>
            Generates a secure random IV
            </summary>
            <returns>Base64 encoded IV</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Hash(System.String)">
            <summary>
            Hashes data using SHA-256
            </summary>
            <param name="data">Data to hash</param>
            <returns>Hash as hex string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.HashWithSalt(System.String,System.String)">
            <summary>
            Hashes data with salt using SHA-256
            </summary>
            <param name="data">Data to hash</param>
            <param name="salt">Salt value</param>
            <returns>Hash as hex string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies a hash against original data
            </summary>
            <param name="data">Original data</param>
            <param name="hash">Hash to verify</param>
            <param name="salt">Salt used in hashing</param>
            <returns>True if hash matches</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService">
            <summary>
            Interface for encryption key management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetCurrentKeyAsync">
            <summary>
            Gets the current active encryption key
            </summary>
            <returns>Current encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.RotateKeyAsync">
            <summary>
            Rotates the encryption key
            </summary>
            <returns>New encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetKeyByIdAsync(System.String)">
            <summary>
            Gets a key by its ID
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>Encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetActiveKeysAsync">
            <summary>
            Gets all active keys
            </summary>
            <returns>List of active keys with their IDs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.DeactivateKeyAsync(System.String)">
            <summary>
            Deactivates a key
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.ValidateKeyAsync(System.String)">
            <summary>
            Validates key integrity
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>True if key is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetNextRotationDateAsync">
            <summary>
            Gets key rotation schedule
            </summary>
            <returns>Next rotation date</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.ForceRotationAsync(System.String)">
            <summary>
            Forces immediate key rotation
            </summary>
            <param name="reason">Reason for rotation</param>
            <returns>New key ID</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.KeyManagementService">
            <summary>
            Key management service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.KeyInfo">
            <summary>
            Key information structure
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper">
            <summary>
            Cryptographic utility helper for password hashing, token generation, and security operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateSalt(System.Int32)">
            <summary>
            Generates a cryptographically secure random salt
            </summary>
            <param name="size">Salt size in bytes</param>
            <returns>Base64 encoded salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.HashPassword(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Hashes a password using PBKDF2 with SHA-256
            </summary>
            <param name="password">Password to hash</param>
            <param name="salt">Salt for hashing</param>
            <param name="iterations">Number of iterations</param>
            <param name="hashSize">Hash size in bytes</param>
            <returns>Base64 encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyPassword(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Verifies a password against its hash
            </summary>
            <param name="password">Password to verify</param>
            <param name="hash">Stored hash</param>
            <param name="salt">Salt used for hashing</param>
            <param name="iterations">Number of iterations used</param>
            <param name="hashSize">Hash size in bytes</param>
            <returns>True if password matches</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GeneratePasswordHash(System.String,System.Int32)">
            <summary>
            Generates a complete password hash with embedded salt and parameters
            </summary>
            <param name="password">Password to hash</param>
            <param name="iterations">Number of iterations</param>
            <returns>Complete hash string with metadata</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyPasswordHash(System.String,System.String)">
            <summary>
            Verifies a password against a complete hash
            </summary>
            <param name="password">Password to verify</param>
            <param name="completeHash">Complete hash with metadata</param>
            <returns>True if password matches</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateSecureToken(System.Int32)">
            <summary>
            Generates a cryptographically secure random token
            </summary>
            <param name="length">Token length in bytes</param>
            <returns>Base64 encoded token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateUrlSafeToken(System.Int32)">
            <summary>
            Generates a URL-safe secure token
            </summary>
            <param name="length">Token length in bytes</param>
            <returns>URL-safe token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateNumericToken(System.Int32)">
            <summary>
            Generates a secure numeric token
            </summary>
            <param name="length">Number of digits</param>
            <returns>Numeric token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeSha256Hash(System.String)">
            <summary>
            Computes SHA-256 hash of input
            </summary>
            <param name="input">Input string</param>
            <returns>Hex-encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeSha512Hash(System.String)">
            <summary>
            Computes SHA-512 hash of input
            </summary>
            <param name="input">Input string</param>
            <returns>Hex-encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeHmacSha256(System.String,System.String)">
            <summary>
            Computes HMAC-SHA256 of input with key
            </summary>
            <param name="input">Input string</param>
            <param name="key">HMAC key</param>
            <returns>Hex-encoded HMAC</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyHmacSignature(System.String,System.String,System.String)">
            <summary>
            Verifies HMAC signature
            </summary>
            <param name="input">Input string</param>
            <param name="key">HMAC key</param>
            <param name="signature">Signature to verify</param>
            <returns>True if signature is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateApiKey(System.String)">
            <summary>
            Generates a secure API key
            </summary>
            <param name="prefix">Optional prefix</param>
            <returns>Secure API key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateWebhookSignature(System.String,System.String)">
            <summary>
            Generates a webhook signature
            </summary>
            <param name="payload">Webhook payload</param>
            <param name="secret">Webhook secret</param>
            <returns>Webhook signature</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyWebhookSignature(System.String,System.String,System.String)">
            <summary>
            Verifies a webhook signature
            </summary>
            <param name="payload">Webhook payload</param>
            <param name="secret">Webhook secret</param>
            <param name="signature">Signature to verify</param>
            <returns>True if signature is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.EncryptAesGcm(System.String,System.String)">
            <summary>
            Encrypts data using AES-256-GCM
            </summary>
            <param name="plainText">Text to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>Encrypted data with nonce and tag</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.DecryptAesGcm(System.String,System.String)">
            <summary>
            Decrypts data encrypted with AES-256-GCM
            </summary>
            <param name="cipherText">Encrypted data</param>
            <param name="key">Decryption key</param>
            <returns>Decrypted plain text</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateTotp(System.String,System.Int32,System.Int32)">
            <summary>
            Generates a time-based one-time password (TOTP)
            </summary>
            <param name="secret">Shared secret</param>
            <param name="timeStep">Time step in seconds</param>
            <param name="digits">Number of digits</param>
            <returns>TOTP code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyTotp(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies a TOTP code
            </summary>
            <param name="code">Code to verify</param>
            <param name="secret">Shared secret</param>
            <param name="windowSize">Allowed time window</param>
            <param name="timeStep">Time step in seconds</param>
            <param name="digits">Number of digits</param>
            <returns>True if code is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateHotp(System.Byte[],System.Int64,System.Int32)">
            <summary>
            Generates HMAC-based one-time password
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.SlowEquals(System.String,System.String)">
            <summary>
            Constant-time string comparison to prevent timing attacks
            </summary>
            <param name="a">First string</param>
            <param name="b">Second string</param>
            <returns>True if strings are equal</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateDeviceFingerprint(System.String,System.String,System.String[])">
            <summary>
            Generates a secure device fingerprint
            </summary>
            <param name="userAgent">User agent string</param>
            <param name="ipAddress">IP address</param>
            <param name="additionalData">Additional fingerprint data</param>
            <returns>Device fingerprint</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.CalculatePasswordStrength(System.String)">
            <summary>
            Validates password strength
            </summary>
            <param name="password">Password to validate</param>
            <returns>Password strength score (0-100)</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.DateTimeProvider">
            <summary>
            Default implementation of date/time provider for production use
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator">
            <summary>
            Secure GUID generation utility with various formatting options
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuid">
            <summary>
            Generates a new GUID
            </summary>
            <returns>New GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuidString(System.String)">
            <summary>
            Generates a new GUID as string
            </summary>
            <param name="format">GUID format (N, D, B, P, X)</param>
            <returns>GUID as formatted string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSecureGuid">
            <summary>
            Generates a cryptographically secure GUID
            </summary>
            <returns>Cryptographically secure GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSequentialGuid">
            <summary>
            Generates a sequential GUID for better database performance
            </summary>
            <returns>Sequential GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewShortGuid">
            <summary>
            Generates a short GUID (22 characters)
            </summary>
            <returns>Short GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewUrlSafeGuid">
            <summary>
            Generates a URL-safe short GUID
            </summary>
            <returns>URL-safe short GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuidFromString(System.String)">
            <summary>
            Generates a GUID from a string using SHA-1 hash (deterministic)
            </summary>
            <param name="input">Input string</param>
            <returns>Deterministic GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewNamespaceGuid(System.Guid,System.String)">
            <summary>
            Generates a GUID with specific namespace and name
            </summary>
            <param name="namespaceId">Namespace GUID</param>
            <param name="name">Name string</param>
            <returns>Namespaced GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewCorrelationId">
            <summary>
            Generates a correlation ID for request tracking
            </summary>
            <returns>Correlation ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewRequestId">
            <summary>
            Generates a request ID for API tracking
            </summary>
            <returns>Request ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSessionId">
            <summary>
            Generates a session ID
            </summary>
            <returns>Session ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewJwtId">
            <summary>
            Generates a JWT ID (JTI)
            </summary>
            <returns>JWT ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSecurityStamp">
            <summary>
            Generates a security stamp
            </summary>
            <returns>Security stamp string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewDeviceFingerprint">
            <summary>
            Generates a device fingerprint ID
            </summary>
            <returns>Device fingerprint string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewApiKey(System.String)">
            <summary>
            Generates an API key
            </summary>
            <param name="prefix">Optional prefix</param>
            <returns>API key string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewWebhookSecret">
            <summary>
            Generates a webhook secret
            </summary>
            <returns>Webhook secret string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.IsValidGuid(System.String)">
            <summary>
            Validates if string is a valid GUID
            </summary>
            <param name="guidString">String to validate</param>
            <returns>True if valid GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Tries to parse a GUID from string
            </summary>
            <param name="guidString">String to parse</param>
            <param name="guid">Parsed GUID</param>
            <returns>True if parsing succeeded</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.FormatGuid(System.Guid,VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat)">
            <summary>
            Converts GUID to different formats
            </summary>
            <param name="guid">GUID to convert</param>
            <param name="format">Target format</param>
            <returns>Formatted GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.ConvertToShortGuid(System.Guid)">
            <summary>
            Converts GUID to short format
            </summary>
            <param name="guid">GUID to convert</param>
            <returns>Short GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.ConvertToUrlSafeGuid(System.Guid)">
            <summary>
            Converts GUID to URL-safe format
            </summary>
            <param name="guid">GUID to convert</param>
            <returns>URL-safe GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuids(System.Int32)">
            <summary>
            Generates multiple GUIDs
            </summary>
            <param name="count">Number of GUIDs to generate</param>
            <returns>Array of GUIDs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.IsEmpty(System.Guid)">
            <summary>
            Checks if GUID is empty
            </summary>
            <param name="guid">GUID to check</param>
            <returns>True if empty</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.GetGuidVersion(System.Guid)">
            <summary>
            Gets GUID version
            </summary>
            <param name="guid">GUID to check</param>
            <returns>GUID version</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.GetGuidVariant(System.Guid)">
            <summary>
            Gets GUID variant
            </summary>
            <param name="guid">GUID to check</param>
            <returns>GUID variant</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat">
            <summary>
            GUID format options
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Digits">
            <summary>
            32 digits: 00000000000000000000000000000000
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Hyphens">
            <summary>
            32 digits with hyphens: 00000000-0000-0000-0000-000000000000
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Braces">
            <summary>
            32 digits with hyphens in braces: {00000000-0000-0000-0000-000000000000}
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Parentheses">
            <summary>
            32 digits with hyphens in parentheses: (00000000-0000-0000-0000-000000000000)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Hex">
            <summary>
            Hexadecimal format: {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Short">
            <summary>
            Base64 encoded (22 characters)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.UrlSafe">
            <summary>
            URL-safe Base64 encoded
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuditLoggingMiddleware">
            <summary>
            Audit logging middleware for tracking all API activities
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuditLoggingOptions">
            <summary>
            Audit logging configuration options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuthenticationMiddleware">
            <summary>
            Custom authentication middleware for cookie-based authentication
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ExceptionHandlingMiddleware">
            <summary>
            Global exception handling middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ValidationException">
            <summary>
            Custom validation exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityException">
            <summary>
            Custom security exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.DatabaseException">
            <summary>
            Custom database exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ExternalServiceException">
            <summary>
            Custom external service exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.BusinessRuleException">
            <summary>
            Custom business rule exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ConcurrencyException">
            <summary>
            Custom concurrency exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitingMiddleware">
            <summary>
            Rate limiting middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitOptions">
            <summary>
            Rate limiting options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitRule">
            <summary>
            Rate limiting rule
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RequestLoggingMiddleware">
            <summary>
            Request logging middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ResponseMetadataMiddleware">
            <summary>
            Middleware that adds correlation ID and timestamp headers to each response
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityHeadersMiddleware">
            <summary>
            Middleware to add security headers to all responses
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityHeadersOptions">
            <summary>
            Security headers configuration options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.AddInitialMigration">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddInitialMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddInitialMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddInitialMigration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.AddCapacityManagement">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddCapacityManagement.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddCapacityManagement.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.AddCapacityManagement.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GetUserByIdQueryHandler">
            <summary>
            Handler for GetUserByIdQuery
            </summary>
        </member>
        <member name="T:GetUsersQueryHandler">
            <summary>
            Handler for GetUsersQuery
            </summary>
        </member>
    </members>
</doc>
