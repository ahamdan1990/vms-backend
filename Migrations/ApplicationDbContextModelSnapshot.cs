// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VisitorManagementSystem.Api.Infrastructure.Data;

#nullable disable

namespace VisitorManagementSystem.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("Duration")
                        .HasColumnType("bigint");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExceptionDetails")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsReviewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Metadata")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OldValues")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("RequestId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RequestPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("RequestSize")
                        .HasColumnType("bigint");

                    b.Property<bool>("RequiresAttention")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("ResponseSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("int");

                    b.Property<string>("ReviewComments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Low");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SessionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Action")
                        .HasDatabaseName("IX_AuditLogs_Action");

                    b.HasIndex("CorrelationId")
                        .HasDatabaseName("IX_AuditLogs_CorrelationId");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("IX_AuditLog_CreatedOn");

                    b.HasIndex("EntityName")
                        .HasDatabaseName("IX_AuditLogs_EntityName");

                    b.HasIndex("EventType")
                        .HasDatabaseName("IX_AuditLogs_EventType");

                    b.HasIndex("IpAddress")
                        .HasDatabaseName("IX_AuditLogs_IpAddress");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AuditLog_IsActive");

                    b.HasIndex("IsReviewed")
                        .HasDatabaseName("IX_AuditLogs_IsReviewed");

                    b.HasIndex("IsSuccess")
                        .HasDatabaseName("IX_AuditLogs_IsSuccess");

                    b.HasIndex("RequiresAttention")
                        .HasDatabaseName("IX_AuditLogs_RequiresAttention");

                    b.HasIndex("RiskLevel")
                        .HasDatabaseName("IX_AuditLogs_RiskLevel");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_AuditLogs_UserId");

                    b.HasIndex("EventType", "CreatedOn")
                        .HasDatabaseName("IX_AuditLogs_EventType_CreatedOn");

                    b.HasIndex("IsActive", "CreatedOn")
                        .HasDatabaseName("IX_AuditLog_IsActive_CreatedOn");

                    b.HasIndex("UserId", "CreatedOn")
                        .HasDatabaseName("IX_AuditLogs_UserId_CreatedOn");

                    b.HasIndex("EntityName", "EntityId", "CreatedOn")
                        .HasDatabaseName("IX_AuditLogs_Entity_CreatedOn");

                    b.HasIndex("IsSuccess", "RiskLevel", "CreatedOn")
                        .HasDatabaseName("IX_AuditLogs_Success_Risk_CreatedOn");

                    b.HasIndex("RequiresAttention", "IsReviewed", "CreatedOn")
                        .HasDatabaseName("IX_AuditLogs_Attention_Review_CreatedOn");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("DeviceFingerprint")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplacedByTokenId")
                        .HasColumnType("int");

                    b.Property<string>("RevocationReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByIp")
                        .HasDatabaseName("IX_RefreshTokens_CreatedByIp");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("IX_RefreshToken_CreatedOn");

                    b.HasIndex("DeviceFingerprint")
                        .HasDatabaseName("IX_RefreshTokens_DeviceFingerprint");

                    b.HasIndex("ExpiryDate")
                        .HasDatabaseName("IX_RefreshTokens_ExpiryDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_RefreshToken_IsActive");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("IX_RefreshTokens_IsRevoked");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("IX_RefreshTokens_IsUsed");

                    b.HasIndex("JwtId")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_JwtId_Unique");

                    b.HasIndex("ReplacedByTokenId")
                        .IsUnique()
                        .HasFilter("[ReplacedByTokenId] IS NOT NULL");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token_Unique");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.HasIndex("IsActive", "CreatedOn")
                        .HasDatabaseName("IX_RefreshToken_IsActive_CreatedOn");

                    b.HasIndex("UserId", "IsActive", "ExpiryDate")
                        .HasDatabaseName("IX_RefreshTokens_UserId_IsActive_ExpiryDate");

                    b.HasIndex("IsActive", "IsUsed", "IsRevoked", "ExpiryDate")
                        .HasDatabaseName("IX_RefreshTokens_Status_ExpiryDate");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FailedLoginAttempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsLockedOut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en-US");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("PasswordChangedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("light");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("UTC");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_User_CreatedBy");

                    b.HasIndex("CreatedOn")
                        .HasDatabaseName("IX_User_CreatedOn");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Department")
                        .HasDatabaseName("IX_Users_Department");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_EmployeeId_Unique")
                        .HasFilter("[EmployeeId] IS NOT NULL AND [IsDeleted] = 0");

                    b.HasIndex("FailedLoginAttempts")
                        .HasDatabaseName("IX_Users_FailedLoginAttempts");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_User_IsActive");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Users_IsDeleted");

                    b.HasIndex("IsLockedOut")
                        .HasDatabaseName("IX_Users_IsLockedOut");

                    b.HasIndex("LastLoginDate")
                        .HasDatabaseName("IX_Users_LastLoginDate");

                    b.HasIndex("LockoutEnd")
                        .HasDatabaseName("IX_Users_LockoutEnd");

                    b.HasIndex("ModifiedBy")
                        .HasDatabaseName("IX_User_ModifiedBy");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_NormalizedEmail_Unique")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("PasswordChangedDate")
                        .HasDatabaseName("IX_Users_PasswordChangedDate");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Users_Status");

                    b.HasIndex("IsActive", "CreatedOn")
                        .HasDatabaseName("IX_User_IsActive_CreatedOn");

                    b.HasIndex("IsActive", "Status", "IsDeleted")
                        .HasDatabaseName("IX_Users_IsActive_Status_IsDeleted");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.User", "User")
                        .WithMany("CreatedAuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.RefreshToken", "ReplacedByToken")
                        .WithOne("ReplacesToken")
                        .HasForeignKey("VisitorManagementSystem.Api.Domain.Entities.RefreshToken", "ReplacedByTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReplacedByToken");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.User", b =>
                {
                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_CreatedBy_User");

                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("VisitorManagementSystem.Api.Domain.Entities.User", "ModifiedByUser")
                        .WithMany()
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_User_ModifiedBy_User");

                    b.OwnsOne("VisitorManagementSystem.Api.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressType")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("AddressType");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AddressCity");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AddressCountry");

                            b1.Property<bool?>("IsValidated")
                                .HasColumnType("bit")
                                .HasColumnName("AddressIsValidated");

                            b1.Property<double?>("Latitude")
                                .HasColumnType("float")
                                .HasColumnName("AddressLatitude");

                            b1.Property<double?>("Longitude")
                                .HasColumnType("float")
                                .HasColumnName("AddressLongitude");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("AddressPostalCode");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("AddressState");

                            b1.Property<string>("Street1")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("AddressStreet1");

                            b1.Property<string>("Street2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("AddressStreet2");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("VisitorManagementSystem.Api.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("AreaCode")
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)")
                                .HasColumnName("PhoneAreaCode");

                            b1.Property<string>("CountryCode")
                                .HasMaxLength(4)
                                .HasColumnType("nvarchar(4)")
                                .HasColumnName("PhoneCountryCode");

                            b1.Property<string>("DigitsOnly")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("nvarchar(15)")
                                .HasColumnName("PhoneDigitsOnly");

                            b1.Property<string>("FormattedValue")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("nvarchar(25)")
                                .HasColumnName("PhoneFormatted");

                            b1.Property<bool>("IsVerified")
                                .HasColumnType("bit")
                                .HasColumnName("PhoneIsVerified");

                            b1.Property<string>("PhoneType")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("PhoneType");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("PhoneRaw");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("ModifiedByUser");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.RefreshToken", b =>
                {
                    b.Navigation("ReplacesToken");
                });

            modelBuilder.Entity("VisitorManagementSystem.Api.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedAuditLogs");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
