<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisitorManagementSystem.Api</name>
    </assembly>
    <members>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ChangePasswordCommand">
            <summary>
            Command for changing user password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ChangePasswordCommandHandler">
            <summary>
            Handler for change password command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LoginCommand">
            <summary>
            Command for user login
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LoginCommandHandler">
            <summary>
            Handler for login command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LogoutCommand">
            <summary>
            Command for user logout
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.LogoutCommandHandler">
            <summary>
            Handler for logout command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommand">
            <summary>
            Command for refreshing authentication token
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.RefreshTokenCommandHandler">
            <summary>
            Handler for refresh token command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.InitiatePasswordResetCommand">
            <summary>
            Command for initiating password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ResetPasswordCommand">
            <summary>
            Command for completing password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.InitiatePasswordResetCommandHandler">
            <summary>
            Handler for initiate password reset command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Auth.ResetPasswordCommandHandler">
            <summary>
            Handler for reset password command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.ActivateUserCommand">
            <summary>
            Command for activating a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.ActivateUserCommandHandler">
            <summary>
            Handler for activate user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.AdminPasswordResetCommand">
            <summary>
            Command for admin password reset
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.AdminPasswordResetCommandHandler">
            <summary>
            Handler for AdminPasswordResetCommand
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.CreateUserCommand">
            <summary>
            Command for creating a new user
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.CreateUserCommandHandler">
            <summary>
            Handler for create user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeactivateUserCommand">
            <summary>
            Command for deactivating a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeactivateUserCommandHandler">
            <summary>
            Handler for deactivate user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeleteUserCommand">
            <summary>
            Command for deleting a user (soft delete)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.DeleteUserCommandHandler">
            <summary>
            Handler for delete user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UnlockUserCommand">
            <summary>
            Command for unlocking a user account
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UnlockUserCommandHandler">
            <summary>
            Handler for UnlockUserCommand
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserCommand">
            <summary>
            Command for updating an existing user
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Commands.Users.UpdateUserCommandHandler">
            <summary>
            Handler for update user command
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult">
            <summary>
            Authentication result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.IsSuccess">
            <summary>
            Authentication success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.ErrorMessage">
            <summary>
            Error message if authentication failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.AccessToken">
            <summary>
            Access token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RefreshToken">
            <summary>
            Refresh token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.AccessTokenExpiry">
            <summary>
            Access token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RefreshTokenExpiry">
            <summary>
            Refresh token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.User">
            <summary>
            Current user information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RequiresPasswordChange">
            <summary>
            Whether user needs to change password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.RequiresTwoFactor">
            <summary>
            Whether two-factor authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.LockoutTimeRemaining">
            <summary>
            Lockout time remaining if account is locked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult.Errors">
            <summary>
            List of authentication errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto">
            <summary>
            Change password request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.CurrentPassword">
            <summary>
            Current password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.NewPassword">
            <summary>
            New password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo">
            <summary>
            Cookie token information data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo.AccessToken">
            <summary>
            Access token from cookie
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CookieTokenInfo.RefreshToken">
            <summary>
            Refresh token from cookie
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto">
            <summary>
            Current user information data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.Permissions">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.CurrentUserDto.PasswordChangedDate">
            <summary>
            Password changed date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto">
            <summary>
            Login request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.Password">
            <summary>
            User password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.RememberMe">
            <summary>
            Remember me flag for extended session
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto.DeviceFingerprint">
            <summary>
            Device fingerprint for security
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto">
            <summary>
            Login response data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.IsSuccess">
            <summary>
            Login success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.ErrorMessage">
            <summary>
            Error message if login failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.User">
            <summary>
            Current user information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.RequiresPasswordChange">
            <summary>
            Whether user needs to change password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.RequiresTwoFactor">
            <summary>
            Whether two-factor authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.LockoutTimeRemaining">
            <summary>
            Lockout time remaining if account is locked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LoginResponseDto.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult">
            <summary>
            Logout result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.IsSuccess">
            <summary>
            Logout success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.Message">
            <summary>
            Result message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.TokensRevoked">
            <summary>
            Number of tokens revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.LogoutResult.ErrorMessage">
            <summary>
            Error message if logout failed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult">
            <summary>
            Password change result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.IsSuccess">
            <summary>
            Password change success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.ErrorMessage">
            <summary>
            Error message if password change failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.RequiresReauthentication">
            <summary>
            Whether re-authentication is required
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordChangeResult.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto">
            <summary>
            Password reset result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.IsSuccess">
            <summary>
            Password reset success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ErrorMessage">
            <summary>
            Error message if password reset failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ResetToken">
            <summary>
            Reset token (for development only)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.ResetTokenExpiry">
            <summary>
            Reset token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.EmailSent">
            <summary>
            Whether email was sent
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.PasswordResetResultDto.Errors">
            <summary>
            List of validation errors
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto">
            <summary>
            Refresh token request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto.RefreshToken">
            <summary>
            Refresh token value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto.DeviceFingerprint">
            <summary>
            Device fingerprint for security validation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto">
            <summary>
            Reset password request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.Token">
            <summary>
            Password reset token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.NewPassword">
            <summary>
            New password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto.ConfirmPassword">
            <summary>
            Confirm new password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult">
            <summary>
            Token validation result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsValid">
            <summary>
            Token validation success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.UserId">
            <summary>
            User ID from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.UserEmail">
            <summary>
            User email from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Roles">
            <summary>
            User roles from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Permissions">
            <summary>
            User permissions from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.Expiry">
            <summary>
            Token expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.SecurityStamp">
            <summary>
            Security stamp from token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.ErrorMessage">
            <summary>
            Error message if validation failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsExpired">
            <summary>
            Whether token is expired
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.TokenValidationResult.IsNearExpiry">
            <summary>
            Whether token is near expiry
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus">
            <summary>
            User lockout status data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.IsLockedOut">
            <summary>
            Whether user is locked out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.LockoutEnd">
            <summary>
            Lockout end date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.FailedAttempts">
            <summary>
            Number of failed attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.MaxFailedAttempts">
            <summary>
            Maximum allowed failed attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.TimeRemaining">
            <summary>
            Time remaining in lockout
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserLockoutStatus.Reason">
            <summary>
            Lockout reason
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto">
            <summary>
            User permissions data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.UserId">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.Permissions">
            <summary>
            User permissions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.PermissionsByCategory">
            <summary>
            Permissions grouped by category
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserPermissionsDto.HasElevatedPrivileges">
            <summary>
            Whether user has elevated privileges
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto">
            <summary>
            User session data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.DeviceFingerprint">
            <summary>
            Device fingerprint
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IpAddress">
            <summary>
            IP address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.UserAgent">
            <summary>
            User agent string
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.DeviceType">
            <summary>
            Device type
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.Location">
            <summary>
            Geographic location
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.CreatedOn">
            <summary>
            Session creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.ExpiryDate">
            <summary>
            Session expiry date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.LastUsed">
            <summary>
            Last activity date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IsActive">
            <summary>
            Whether session is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Auth.UserSessionDto.IsCurrent">
            <summary>
            Whether this is the current session
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1">
            <summary>
            Standard API response wrapper
            </summary>
            <typeparam name="T">Response data type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Success">
            <summary>
            Success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Message">
            <summary>
            Response message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Data">
            <summary>
            Response data
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Errors">
            <summary>
            Error messages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.Metadata">
            <summary>
            Response metadata
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.SuccessResponse(`0,System.String)">
            <summary>
            Creates a successful response
            </summary>
            <param name="data">Response data</param>
            <param name="message">Success message</param>
            <returns>Successful API response</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.ErrorResponse(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates an error response
            </summary>
            <param name="errors">Error messages</param>
            <param name="message">Error message</param>
            <returns>Error API response</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.ApiResponseDto`1.ErrorResponse(System.String,System.String)">
            <summary>
            Creates an error response with single error
            </summary>
            <param name="error">Error message</param>
            <param name="message">Error message</param>
            <returns>Error API response</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto">
            <summary>
            Command result data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.IsSuccess">
            <summary>
            Success status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.Message">
            <summary>
            Result message
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.Errors">
            <summary>
            Error messages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.Data">
            <summary>
            Additional data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.Success(System.String,System.Object)">
            <summary>
            Creates a successful result
            </summary>
            <param name="message">Success message</param>
            <param name="data">Additional data</param>
            <returns>Successful command result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.CommandResultDto.Failure(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a failure result
            </summary>
            <param name="message">Error message</param>
            <param name="errors">Error list</param>
            <returns>Failed command result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1">
            <summary>
            Paginated result data transfer object
            </summary>
            <typeparam name="T">Item type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.Items">
            <summary>
            List of items
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.TotalCount">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.PageIndex">
            <summary>
            Current page index (0-based)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.PageSize">
            <summary>
            Page size
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.TotalPages">
            <summary>
            Total number of pages
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.HasPreviousPage">
            <summary>
            Whether there is a previous page
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.HasNextPage">
            <summary>
            Whether there is a next page
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.DTOs.Common.PagedResultDto`1.Create(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a paginated result
            </summary>
            <param name="items">Items for current page</param>
            <param name="totalCount">Total number of items</param>
            <param name="pageIndex">Current page index</param>
            <param name="pageSize">Page size</param>
            <returns>Paginated result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto">
            <summary>
            Select list item data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Value">
            <summary>
            Item value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Text">
            <summary>
            Item display text
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Description">
            <summary>
            Item description
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Selected">
            <summary>
            Whether item is selected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Disabled">
            <summary>
            Whether item is disabled
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Common.SelectListItemDto.Data">
            <summary>
            Additional data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto">
            <summary>
            Create user request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.MustChangePassword">
            <summary>
            Whether user must change password on first login
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto.SendWelcomeEmail">
            <summary>
            Send welcome email to user
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto">
            <summary>
            Update user request data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto">
            <summary>
            User data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.JobTitle">
            <summary>
            User job title
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.EmployeeId">
            <summary>
            Employee ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.CreatedOn">
            <summary>
            User creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.IsActive">
            <summary>
            Whether user is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.IsLockedOut">
            <summary>
            Whether user is locked out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.FailedLoginAttempts">
            <summary>
            Failed login attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.MustChangePassword">
            <summary>
            Whether user must change password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserDto.PasswordChangedDate">
            <summary>
            Password changed date
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto">
            <summary>
            User list item data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.FullName">
            <summary>
            User full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Role">
            <summary>
            User role
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Status">
            <summary>
            User status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.Department">
            <summary>
            User department
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.LastLoginDate">
            <summary>
            Last login date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.CreatedOn">
            <summary>
            User creation date
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.IsActive">
            <summary>
            Whether user is active
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserListDto.IsLockedOut">
            <summary>
            Whether user is locked out
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto">
            <summary>
            User profile data transfer object
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Id">
            <summary>
            User ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.FirstName">
            <summary>
            User first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.LastName">
            <summary>
            User last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Email">
            <summary>
            User email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.PhoneNumber">
            <summary>
            User phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.TimeZone">
            <summary>
            User timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Language">
            <summary>
            User language preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.Theme">
            <summary>
            User theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Application.DTOs.Users.UserProfileDto.ProfilePhotoUrl">
            <summary>
            Profile photo URL
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetCurrentUserQuery">
            <summary>
            Query for getting current user information
            UPDATED: Now uses UserId from JWT claims instead of AccessToken
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetCurrentUserQueryHandler">
            <summary>
            Handler for get current user query
            UPDATED: Now works with UserId from JWT claims
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetUserPermissionsQuery">
            <summary>
            Query for getting user permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.GetUserPermissionsQueryHandler">
            <summary>
            Handler for get user permissions query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.ValidateTokenQuery">
            <summary>
            Query for validating access token
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Auth.ValidateTokenQueryHandler">
            <summary>
            Handler for validate token query
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetAvailableRolesQuery">
            <summary>
            Query for getting available user roles
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetAvailableRolesQueryHandler">
            <summary>
            Handler for GetAvailableRolesQuery
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserActivityQuery">
            <summary>
            Query for getting user activity log
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserActivityQueryHandler">
            <summary>
            Handler for GetUserActivityQuery
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUserByIdQuery">
            <summary>
            Query for getting a specific user by ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Queries.Users.GetUsersQuery">
            <summary>
            Query for getting paginated list of users with filtering and sorting
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:VisitorManagementSystem.Api.Application.Services.Auth.AuthService" -->
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService">
            <summary>
            Authentication service interface for login, logout, and token management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LoginAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Authenticates user with email and password
            </summary>
            <param name="loginRequest">Login request with credentials</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Authentication result with tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.RefreshTokenAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.RefreshTokenRequestDto,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Refreshes access token using refresh token
            </summary>
            <param name="refreshTokenRequest">Refresh token request</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New authentication tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LogoutAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs out user and revokes refresh token
            </summary>
            <param name="userId">User ID</param>
            <param name="refreshToken">Refresh token to revoke</param>
            <param name="ipAddress">Client IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Logout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.LogoutFromAllDevicesAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Logs out user from all devices
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Reason for logout</param>
            <param name="ipAddress">Client IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Logout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ChangePasswordAsync(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto,System.Threading.CancellationToken)">
            <summary>
            Changes user password
            </summary>
            <param name="userId">User ID</param>
            <param name="changePasswordRequest">Password change request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password change result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.InitiatePasswordResetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates password reset process
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ResetPasswordAsync(VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto,System.Threading.CancellationToken)">
            <summary>
            Resets password using reset token
            </summary>
            <param name="resetPasswordRequest">Password reset request</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Password reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ValidateTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates access token
            </summary>
            <param name="accessToken">Access token to validate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetCurrentUserAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets current user information from token
            </summary>
            <param name="accessToken">Access token</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Current user information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ValidateCredentialsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates user credentials without creating session
            </summary>
            <param name="email">User email</param>
            <param name="password">User password</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if credentials are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetLockoutStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user account is locked out
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.UnlockAccountAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Unlocks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="unlockedBy">ID of user performing unlock</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unlocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetUserSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user sessions information
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.TerminateSessionAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Terminates specific user session
            </summary>
            <param name="userId">User ID</param>
            <param name="sessionId">Session ID to terminate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if session terminated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.GetSecureCookieOptions(System.Boolean,Microsoft.AspNetCore.Http.SameSiteMode)">
            <summary>
            Generates secure cookie options for authentication
            </summary>
            <param name="isSecure">Whether to use secure flag</param>
            <param name="sameSite">SameSite policy</param>
            <returns>Cookie options</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.SetAuthenticationCookies(Microsoft.AspNetCore.Http.HttpResponse,VisitorManagementSystem.Api.Application.DTOs.Auth.AuthenticationResult,System.Boolean)">
            <summary>
            Creates authentication cookies for response
            </summary>
            <param name="response">HTTP response</param>
            <param name="authResult">Authentication result</param>
            <param name="isSecure">Whether to use secure cookies</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ClearAuthenticationCookies(Microsoft.AspNetCore.Http.HttpResponse,System.Boolean)">
            <summary>
            Clears authentication cookies from response
            </summary>
            <param name="response">HTTP response</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IAuthService.ExtractTokensFromCookies(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Extracts tokens from request cookies
            </summary>
            <param name="request">HTTP request</param>
            <returns>Token information from cookies</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService">
            <summary>
            JWT token service interface for generating and validating JWT tokens
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateAccessTokenAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generates an access token for the user
            </summary>
            <param name="user">User entity</param>
            <param name="permissions">User permissions</param>
            <param name="additionalClaims">Additional claims to include</param>
            <returns>JWT token information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateRefreshTokenAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a refresh token for the user
            </summary>
            <param name="user">User entity</param>
            <param name="jwtId">JWT ID from access token</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <returns>Refresh token entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateTokenAsync(System.String,System.Boolean)">
            <summary>
            Validates and parses a JWT token
            </summary>
            <param name="token">JWT token to validate</param>
            <param name="validateLifetime">Whether to validate token expiration</param>
            <returns>Token validation result with claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetClaimsFromToken(System.String)">
            <summary>
            Extracts claims from a JWT token without validation
            </summary>
            <param name="token">JWT token</param>
            <returns>Claims principal</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetTokenExpiration(System.String)">
            <summary>
            Gets the expiration time of a JWT token
            </summary>
            <param name="token">JWT token</param>
            <returns>Expiration time or null if invalid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetJwtId(System.String)">
            <summary>
            Gets the JWT ID from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>JWT ID or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetUserId(System.String)">
            <summary>
            Gets the user ID from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>User ID or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetSecurityStamp(System.String)">
            <summary>
            Gets the security stamp from a token
            </summary>
            <param name="token">JWT token</param>
            <returns>Security stamp or null if not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.IsTokenExpired(System.String)">
            <summary>
            Checks if a token is expired
            </summary>
            <param name="token">JWT token</param>
            <returns>True if token is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.IsTokenNearExpiry(System.String,System.Int32)">
            <summary>
            Checks if a token is close to expiration
            </summary>
            <param name="token">JWT token</param>
            <param name="thresholdMinutes">Threshold in minutes</param>
            <returns>True if token expires within threshold</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GeneratePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Generates a password reset token
            </summary>
            <param name="user">User entity</param>
            <param name="purpose">Token purpose</param>
            <returns>Reset token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidatePasswordResetToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Validates a password reset token
            </summary>
            <param name="token">Reset token</param>
            <param name="user">User entity</param>
            <param name="purpose">Expected token purpose</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateEmailConfirmationToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates an email confirmation token
            </summary>
            <param name="user">User entity</param>
            <returns>Email confirmation token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateEmailConfirmationToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates an email confirmation token
            </summary>
            <param name="token">Confirmation token</param>
            <param name="user">User entity</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GenerateTwoFactorToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates a two-factor authentication token
            </summary>
            <param name="user">User entity</param>
            <returns>2FA token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.ValidateTwoFactorToken(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates a two-factor authentication token
            </summary>
            <param name="token">2FA token</param>
            <param name="user">User entity</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.CreateUserClaims(VisitorManagementSystem.Api.Domain.Entities.User,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates claims for a user
            </summary>
            <param name="user">User entity</param>
            <param name="permissions">User permissions</param>
            <param name="additionalClaims">Additional claims</param>
            <returns>List of claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.RevokeAllUserTokensAsync(System.Int32)">
            <summary>
            Revokes all tokens for a user by updating security stamp
            </summary>
            <param name="userId">User ID</param>
            <returns>New security stamp</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IJwtService.GetTokenConfiguration">
            <summary>
            Gets token configuration information
            </summary>
            <returns>Token configuration</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.JwtTokenResult">
            <summary>
            JWT token generation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.JwtValidationResult">
            <summary>
            JWT validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService">
            <summary>
            Password service interface for password hashing, validation, and policy enforcement
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.HashPassword(System.String)">
            <summary>
            Hashes a password with a new salt
            </summary>
            <param name="password">Plain text password</param>
            <returns>Password hash result with hash and salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.VerifyPassword(System.String,System.String,System.String)">
            <summary>
            Verifies a password against its hash
            </summary>
            <param name="password">Plain text password</param>
            <param name="hash">Stored password hash</param>
            <param name="salt">Password salt</param>
            <returns>True if password is correct</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePassword(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Validates password against security policy
            </summary>
            <param name="password">Password to validate</param>
            <param name="user">User entity (for context-specific validation)</param>
            <returns>Password validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GeneratePassword(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Generates a secure random password
            </summary>
            <param name="length">Password length</param>
            <param name="includeSpecialCharacters">Include special characters</param>
            <param name="excludeSimilarCharacters">Exclude visually similar characters</param>
            <returns>Generated password</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.CalculateStrength(System.String)">
            <summary>
            Calculates password strength score
            </summary>
            <param name="password">Password to analyze</param>
            <returns>Password strength result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.MeetsMinimumRequirements(System.String)">
            <summary>
            Checks if password meets minimum requirements
            </summary>
            <param name="password">Password to check</param>
            <returns>True if password meets requirements</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordCompromisedAsync(System.String)">
            <summary>
            Checks if password is commonly used or compromised
            </summary>
            <param name="password">Password to check</param>
            <returns>True if password is compromised</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordRecentlyUsedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if password has been used recently by user
            </summary>
            <param name="userId">User ID</param>
            <param name="password">New password</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if password was used recently</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.SavePasswordHistoryAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves password to user's password history
            </summary>
            <param name="userId">User ID</param>
            <param name="passwordHash">Password hash</param>
            <param name="passwordSalt">Password salt</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.IsPasswordExpired(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Checks if password is expired for user
            </summary>
            <param name="user">User entity</param>
            <returns>True if password is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordExpiryDate(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Gets password expiry date for user
            </summary>
            <param name="user">User entity</param>
            <returns>Password expiry date</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetDaysUntilPasswordExpiry(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Gets days until password expires
            </summary>
            <param name="user">User entity</param>
            <returns>Days until expiry, or null if no expiry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GenerateResetInstructions(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates password reset instructions
            </summary>
            <param name="user">User entity</param>
            <returns>Password reset instructions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePasswordChangeAsync(VisitorManagementSystem.Api.Domain.Entities.User,System.String,System.String)">
            <summary>
            Validates new password change request
            </summary>
            <param name="user">User entity</param>
            <param name="currentPassword">Current password</param>
            <param name="newPassword">New password</param>
            <returns>Validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordPolicy">
            <summary>
            Gets password policy configuration
            </summary>
            <returns>Password policy</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.UpdatePasswordPolicyAsync(VisitorManagementSystem.Api.Application.Services.Auth.PasswordPolicy)">
            <summary>
            Updates password policy
            </summary>
            <param name="policy">New password policy</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GetPasswordRequirements">
            <summary>
            Gets password complexity requirements as user-friendly text
            </summary>
            <returns>List of requirements</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ContainsPersonalInformation(System.String,VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Checks if password contains user's personal information
            </summary>
            <param name="password">Password to check</param>
            <param name="user">User entity</param>
            <returns>True if password contains personal info</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GeneratePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Generates password reset token for user
            </summary>
            <param name="user">User entity</param>
            <returns>Reset token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ValidatePasswordResetToken(VisitorManagementSystem.Api.Domain.Entities.User,System.String)">
            <summary>
            Validates password reset token
            </summary>
            <param name="user">User entity</param>
            <param name="token">Reset token</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.ClearPasswordHistoryAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Clears password history for user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPasswordService.GenerateTemporaryPassword">
            <summary>
            Generates a temporary password for administrative password resets
            </summary>
            <returns>Generated temporary password</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordHashResult">
            <summary>
            Password hash result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordValidationResult">
            <summary>
            Password validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordStrengthResult">
            <summary>
            Password strength result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordStrength">
            <summary>
            Password strength levels
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordChangeValidationResult">
            <summary>
            Password change validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordResetInstructions">
            <summary>
            Password reset instructions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordPolicy">
            <summary>
            Password policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordHistory">
            <summary>
            Password history entry
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService">
            <summary>
            Permission service interface for managing user permissions and authorization
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetUserPermissionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all permissions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of user permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetUserPermissionsByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets all permissions for a user by email
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of user permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetRolePermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets permissions for a specific role
            </summary>
            <param name="role">User role</param>
            <returns>List of role permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasPermissionAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user has a specific permission
            </summary>
            <param name="userId">User ID</param>
            <param name="permission">Permission to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasAnyPermissionAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Checks if user has any of the specified permissions
            </summary>
            <param name="userId">User ID</param>
            <param name="permissions">Permissions to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has any of the permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasAllPermissionsAsync(System.Int32,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <summary>
            Checks if user has all of the specified permissions
            </summary>
            <param name="userId">User ID</param>
            <param name="permissions">Permissions to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanPerformActionAsync(System.Int32,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if user can perform an action on a resource
            </summary>
            <param name="userId">User ID</param>
            <param name="action">Action to perform</param>
            <param name="resource">Resource type</param>
            <param name="resourceId">Resource ID (optional)</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Authorization result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetAllPermissions">
            <summary>
            Gets all available permissions in the system
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of category to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.IsValidPermission(System.String)">
            <summary>
            Validates if a permission exists
            </summary>
            <param name="permission">Permission to validate</param>
            <returns>True if permission exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionCategory(System.String)">
            <summary>
            Gets permission category
            </summary>
            <param name="permission">Permission</param>
            <returns>Category name or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionDescription(System.String)">
            <summary>
            Gets permission description
            </summary>
            <param name="permission">Permission</param>
            <returns>Permission description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanManageUserAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if user can manage another user (role hierarchy)
            </summary>
            <param name="managerId">Manager user ID</param>
            <param name="targetUserId">Target user ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if manager can manage target user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetAssignableRolesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets roles that can be assigned by a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of assignable roles</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.CanAssignRoleAsync(System.Int32,VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Threading.CancellationToken)">
            <summary>
            Checks if user can assign a specific role
            </summary>
            <param name="userId">User ID</param>
            <param name="targetRole">Role to assign</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user can assign the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetResourcePermissionsAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets resource-specific permissions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="resourceType">Resource type</param>
            <param name="resourceId">Resource ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of permissions for the specific resource</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.BuildPermissionClaims(System.Collections.Generic.List{System.String})">
            <summary>
            Builds permission claims for JWT token
            </summary>
            <param name="permissions">User permissions</param>
            <returns>Permission claims</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ExtractPermissionsFromClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
            <summary>
            Extracts permissions from claims
            </summary>
            <param name="claims">Claims collection</param>
            <returns>List of permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateApiAccessAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates permission-based access to API endpoint
            </summary>
            <param name="userId">User ID</param>
            <param name="httpMethod">HTTP method</param>
            <param name="endpoint">API endpoint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetRequiredPermissions(System.String,System.String)">
            <summary>
            Gets permissions required for an API endpoint
            </summary>
            <param name="httpMethod">HTTP method</param>
            <param name="endpoint">API endpoint</param>
            <returns>List of required permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.HasElevatedPrivilegesAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if user has elevated privileges
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if user has elevated privileges</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.GetPermissionAuditInfoAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets permission audit information
            </summary>
            <param name="userId">User ID</param>
            <param name="permission">Permission</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Permission audit information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateTimeBasedAccessAsync(System.Int32,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Validates time-based access restrictions
            </summary>
            <param name="userId">User ID</param>
            <param name="currentTime">Current time</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed at current time</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IPermissionService.ValidateIpBasedAccessAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user can access from current IP address
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if access is allowed from IP</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.AuthorizationResult">
            <summary>
            Authorization result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionAuditInfo">
            <summary>
            Permission audit information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionRequirement">
            <summary>
            Permission requirement attribute data
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.ApiEndpointPermission">
            <summary>
            API endpoint permission mapping
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService">
            <summary>
            Refresh token service interface for managing refresh token lifecycle
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.CreateRefreshTokenAsync(System.Int32,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a new refresh token for user
            </summary>
            <param name="userId">User ID</param>
            <param name="jwtId">Associated JWT ID</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>New refresh token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ValidateRefreshTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates and retrieves refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.UseRefreshTokenAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Uses refresh token (marks as used and creates replacement)
            </summary>
            <param name="token">Token value</param>
            <param name="newJwtId">New JWT ID for replacement</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage result with new token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeRefreshTokenAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes a specific refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token was revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeAllUserTokensAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RevokeTokensByDeviceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetActiveTokensAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets active refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenByJwtIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh token by JWT ID
            </summary>
            <param name="jwtId">JWT ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.IsTokenValidAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if token is valid and not expired
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenExpirationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets token expiration time
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Expiration time or null if token not found</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ExtendTokenExpirationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Extends token expiration
            </summary>
            <param name="token">Token value</param>
            <param name="extensionPeriod">Extension period</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if extended successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.CleanupExpiredTokensAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Performs token cleanup (removes expired tokens)
            </summary>
            <param name="retentionPeriod">How long to keep expired tokens</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenUsageStatisticsAsync(System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets token usage statistics
            </summary>
            <param name="userId">Optional user ID filter</param>
            <param name="days">Number of days to analyze</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.DetectSuspiciousActivityAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Detects suspicious token activity
            </summary>
            <param name="hours">Hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of suspicious activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetConcurrentSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets concurrent sessions for user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of concurrent sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.EnforceSessionLimitsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Enforces concurrent session limits
            </summary>
            <param name="userId">User ID</param>
            <param name="maxSessions">Maximum allowed sessions</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of sessions terminated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.ValidateDeviceConsistencyAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Validates device fingerprint consistency
            </summary>
            <param name="token">Token value</param>
            <param name="currentDeviceFingerprint">Current device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Device validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GetTokenFamilyAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets token family/chain information
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token family information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.RotateTokenAsync(System.String,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Rotates refresh token (security best practice)
            </summary>
            <param name="oldToken">Current token</param>
            <param name="newJwtId">New JWT ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token rotation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.GenerateSecureTokenValue">
            <summary>
            Generates secure refresh token value
            </summary>
            <returns>Secure token value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IRefreshTokenService.IsValidTokenFormat(System.String)">
            <summary>
            Validates token format and structure
            </summary>
            <param name="token">Token value</param>
            <returns>True if token format is valid</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenValidationResult">
            <summary>
            Refresh token validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenUsageResult">
            <summary>
            Refresh token usage result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenInfo">
            <summary>
            Refresh token information for display
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenUsageStatistics">
            <summary>
            Token usage statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.UserSessionInfo">
            <summary>
            User session information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.DeviceValidationResult">
            <summary>
            Device validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenFamilyInfo">
            <summary>
            Token family/chain information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.TokenRotationResult">
            <summary>
            Token rotation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService">
            <summary>
            User lockout service interface for managing account lockouts and failed login attempts
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.RecordFailedLoginAttemptAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records a failed login attempt for user
            </summary>
            <param name="email">User email</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="failureReason">Reason for failure</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.RecordSuccessfulLoginEventAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login event only (no database changes)
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.RecordSuccessfulLoginWithoutSaveAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login without calling SaveChanges (for transaction coordination)
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.RecordSuccessfulLoginAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records a successful login and resets failed attempts
            </summary>
            <param name="userId">User ID</param>
            <param name="ipAddress">Client IP address</param>
            <param name="userAgent">Client user agent</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetLockoutStatusAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if user account is currently locked out
            </summary>
            <param name="email">User email</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.LockUserAccountAsync(System.Int32,System.String,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Manually locks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Lockout reason</param>
            <param name="duration">Lockout duration (null for indefinite)</param>
            <param name="lockedBy">ID of user performing the lockout</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.UnlockUserAccountAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Manually unlocks user account
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Unlock reason</param>
            <param name="unlockedBy">ID of user performing the unlock</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unlocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetFailedLoginAttemptsAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets failed login attempts for user within time period
            </summary>
            <param name="email">User email</param>
            <param name="timeWindow">Time window to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of failed attempts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetFailedLoginAttemptsByIpAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Gets failed login attempts by IP address
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="timeWindow">Time window to check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of failed attempts from IP</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.CheckIpRateLimitAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if IP address is rate limited
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Rate limit status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.BlockIpAddressAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Temporarily blocks IP address
            </summary>
            <param name="ipAddress">IP address to block</param>
            <param name="reason">Block reason</param>
            <param name="duration">Block duration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if blocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.UnblockIpAddressAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Unblocks IP address
            </summary>
            <param name="ipAddress">IP address to unblock</param>
            <param name="reason">Unblock reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if unblocked successfully</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetLockoutConfiguration">
            <summary>
            Gets lockout configuration
            </summary>
            <returns>Lockout configuration</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.UpdateLockoutConfigurationAsync(VisitorManagementSystem.Api.Application.Services.Auth.LockoutConfiguration,System.Threading.CancellationToken)">
            <summary>
            Updates lockout configuration
            </summary>
            <param name="configuration">New configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetUserSecurityEventsAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets security events for user
            </summary>
            <param name="userId">User ID</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of security events</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetSystemSecurityEventsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets system-wide security events
            </summary>
            <param name="hours">Hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of security events</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.AnalyzeLoginPatternAsync(System.Int32,VisitorManagementSystem.Api.Application.Services.Auth.LoginAttempt,System.Threading.CancellationToken)">
            <summary>
            Analyzes login patterns for anomalies
            </summary>
            <param name="userId">User ID</param>
            <param name="currentAttempt">Current login attempt details</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Anomaly detection result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetLockedUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets locked users that require attention
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locked users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GetUsersAtRiskAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users close to lockout threshold
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users at risk</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.GenerateLockoutReportAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Generates lockout report
            </summary>
            <param name="startDate">Report start date</param>
            <param name="endDate">Report end date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Lockout report</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.PerformAutomatedCleanupAsync(System.Threading.CancellationToken)">
            <summary>
            Performs automated lockout cleanup
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.SendLockoutNotificationAsync(System.Int32,VisitorManagementSystem.Api.Application.Services.Auth.LockoutResult,System.Threading.CancellationToken)">
            <summary>
            Sends lockout notifications
            </summary>
            <param name="userId">User ID</param>
            <param name="lockoutResult">Lockout result</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.IUserLockoutService.ValidateLockoutBypassAsync(System.Int32,System.String,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Validates lockout bypass attempt
            </summary>
            <param name="userId">User ID</param>
            <param name="bypassCode">Bypass code</param>
            <param name="requestedBy">User requesting bypass</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Bypass validation result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockoutResult">
            <summary>
            Lockout result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockoutStatus">
            <summary>
            Lockout status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RateLimitStatus">
            <summary>
            Rate limit status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockoutConfiguration">
            <summary>
            Lockout configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.SecurityEvent">
            <summary>
            Security event
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LoginAttempt">
            <summary>
            Login attempt details
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.AnomalyDetectionResult">
            <summary>
            Anomaly detection result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockedUserInfo">
            <summary>
            Locked user information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.UserAtRiskInfo">
            <summary>
            User at risk information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockoutReport">
            <summary>
            Lockout report
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.LockoutCleanupResult">
            <summary>
            Lockout cleanup result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.BypassValidationResult">
            <summary>
            Bypass validation result
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:VisitorManagementSystem.Api.Application.Services.Auth.JwtService" -->
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PasswordService">
            <summary>
            Password service implementation for hashing, validation, and policy enforcement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.PermissionService">
            <summary>
            Permission service implementation for managing user permissions and authorization
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.RefreshTokenService">
            <summary>
            Refresh token service implementation for managing token lifecycle
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Application.Services.Auth.UserLockoutService">
            <summary>
            User lockout service implementation for managing account lockouts and failed login attempts
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.UserLockoutService.RecordSuccessfulLoginEventAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login event only (no database changes)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Application.Services.Auth.UserLockoutService.RecordSuccessfulLoginWithoutSaveAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Records successful login without calling SaveChanges (for transaction coordination)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration">
            <summary>
            Database configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.ConnectionString">
            <summary>
            Primary database connection string
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.ReadOnlyConnectionString">
            <summary>
            Read-only database connection string for read operations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.CommandTimeout">
            <summary>
            Database command timeout in seconds
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.MaxRetryCount">
            <summary>
            Maximum retry count for database operations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.EnableSensitiveDataLogging">
            <summary>
            Whether to enable sensitive data logging (dev only)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.EnableDetailedErrors">
            <summary>
            Whether to enable detailed errors
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.ConnectionPool">
            <summary>
            Connection pool settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.Migration">
            <summary>
            Migration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.Backup">
            <summary>
            Backup settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.Performance">
            <summary>
            Performance monitoring settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.DatabaseConfiguration.HealthCheck">
            <summary>
            Health check settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ConnectionPoolConfiguration">
            <summary>
            Connection pool configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.MigrationConfiguration">
            <summary>
            Migration configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.BackupConfiguration">
            <summary>
            Backup configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.PerformanceConfiguration">
            <summary>
            Performance configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.HealthCheckConfiguration">
            <summary>
            Health check configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.JwtConfiguration">
            <summary>
            JWT configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.SecretKey">
            <summary>
            Secret key for signing JWT tokens (must be at least 256 bits)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Issuer">
            <summary>
            Token issuer
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Audience">
            <summary>
            Token audience
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ExpiryInMinutes">
            <summary>
            Access token expiry time in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RefreshTokenExpiryInDays">
            <summary>
            Refresh token expiry time in days
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.Algorithm">
            <summary>
            Algorithm used for signing tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateIssuerSigningKey">
            <summary>
            Whether to validate the issuer signing key
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateIssuer">
            <summary>
            Whether to validate the issuer
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateAudience">
            <summary>
            Whether to validate the audience
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ValidateLifetime">
            <summary>
            Whether to validate the token lifetime
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RequireExpirationTime">
            <summary>
            Whether to require expiration time
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.ClockSkewMinutes">
            <summary>
            Clock skew tolerance in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.PasswordResetTokenExpiryMinutes">
            <summary>
            Password reset token expiry in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.EmailConfirmationTokenExpiryHours">
            <summary>
            Email confirmation token expiry in hours
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.TwoFactorTokenExpiryMinutes">
            <summary>
            Two-factor authentication token expiry in minutes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.AllowConcurrentSessions">
            <summary>
            Whether to allow multiple concurrent sessions per user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.MaxConcurrentSessions">
            <summary>
            Maximum number of concurrent sessions per user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RotateRefreshTokens">
            <summary>
            Whether to rotate refresh tokens on usage
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.JwtConfiguration.RevokeFamilyOnSuspiciousActivity">
            <summary>
            Whether to revoke refresh token families on suspicious activity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.LoggingConfiguration">
            <summary>
            Logging configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.LogLevel">
            <summary>
            Global log level
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.EnableStructuredLogging">
            <summary>
            Whether to enable structured logging
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.EnableCorrelationId">
            <summary>
            Whether to enable correlation ID logging
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.LogRequestResponse">
            <summary>
            Whether to log request/response details
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.LogPerformanceMetrics">
            <summary>
            Whether to log performance metrics
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.Console">
            <summary>
            Console logging settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.File">
            <summary>
            File logging settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.Database">
            <summary>
            Database logging settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.Audit">
            <summary>
            Audit logging settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.Security">
            <summary>
            Security logging settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.ApplicationInsights">
            <summary>
            Application Insights settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.LoggingConfiguration.SensitiveData">
            <summary>
            Sensitive data logging settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ConsoleLoggingConfiguration">
            <summary>
            Console logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.FileLoggingConfiguration">
            <summary>
            File logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.DatabaseLoggingConfiguration">
            <summary>
            Database logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.AuditLoggingConfiguration">
            <summary>
            Audit logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SecurityLoggingConfiguration">
            <summary>
            Security logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ApplicationInsightsConfiguration">
            <summary>
            Application Insights configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SensitiveDataConfiguration">
            <summary>
            Sensitive data logging configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SecurityConfiguration">
            <summary>
            Security configuration settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.PasswordPolicy">
            <summary>
            Password policy settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Lockout">
            <summary>
            Account lockout settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.RateLimiting">
            <summary>
            Rate limiting settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.EncryptionKeys">
            <summary>
            Encryption keys
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.SessionSecurity">
            <summary>
            Session security settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Cors">
            <summary>
            CORS settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.Https">
            <summary>
            HTTPS settings
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Configuration.SecurityConfiguration.ContentSecurityPolicy">
            <summary>
            Content Security Policy settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.PasswordPolicyConfiguration">
            <summary>
            Password policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.LockoutConfiguration">
            <summary>
            Account lockout configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.RateLimitingConfiguration">
            <summary>
            Rate limiting configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ApiRateLimit">
            <summary>
            API rate limit settings
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.EncryptionKeysConfiguration">
            <summary>
            Encryption keys configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.SessionSecurityConfiguration">
            <summary>
            Session security configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.CorsConfiguration">
            <summary>
            CORS configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.HttpsConfiguration">
            <summary>
            HTTPS configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Configuration.ContentSecurityPolicyConfiguration">
            <summary>
            Content Security Policy configuration
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.AuthController">
            <summary>
            Authentication controller for login, logout, and token management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.Login(VisitorManagementSystem.Api.Application.DTOs.Auth.LoginRequestDto)">
            <summary>
            Authenticates user and sets secure cookies
            </summary>
            <param name="request">Login credentials</param>
            <returns>Authentication result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.RefreshToken">
            <summary>
            Refreshes access token using refresh token from cookies
            </summary>
            <returns>New authentication tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.Logout(System.Boolean)">
            <summary>
            Logs out user and clears authentication cookies
            </summary>
            <param name="logoutFromAllDevices">Whether to logout from all devices</param>
            <returns>Logout result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ChangePassword(VisitorManagementSystem.Api.Application.DTOs.Auth.ChangePasswordDto)">
            <summary>
            Changes user password
            </summary>
            <param name="request">Password change request</param>
            <returns>Password change result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ForgotPassword(VisitorManagementSystem.Api.Controllers.ForgotPasswordRequestDto)">
            <summary>
            Initiates password reset process
            </summary>
            <param name="request">Email for password reset</param>
            <returns>Password reset initiation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ResetPassword(VisitorManagementSystem.Api.Application.DTOs.Auth.ResetPasswordDto)">
            <summary>
            Resets password using reset token
            </summary>
            <param name="request">Password reset request</param>
            <returns>Password reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetCurrentUser">
            <summary>
            Gets current user information
            </summary>
            <returns>Current user details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetUserPermissions">
            <summary>
            Gets user permissions
            </summary>
            <returns>User permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.ValidateToken">
            <summary>
            Validates current access token
            </summary>
            <returns>Token validation result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.GetUserSessions">
            <summary>
            Gets user's active sessions
            </summary>
            <returns>List of active sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.AuthController.TerminateSession(System.String)">
            <summary>
            Terminates a specific session
            </summary>
            <param name="sessionId">Session ID to terminate</param>
            <returns>Session termination result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.ForgotPasswordRequestDto">
            <summary>
            Forgot password request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.TokenValidationDto">
            <summary>
            Token validation response DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.BaseController">
            <summary>
            Base controller providing common functionality for all API controllers
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserId">
            <summary>
            Gets the current user ID from claims
            </summary>
            <returns>Current user ID or null if not authenticated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserEmail">
            <summary>
            Gets the current user email from claims
            </summary>
            <returns>Current user email or null if not authenticated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserName">
            <summary>
            Gets the current user's full name from claims
            </summary>
            <returns>Current user's full name or null if not authenticated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserRole">
            <summary>
            Gets the current user's role from claims
            </summary>
            <returns>Current user's role or null if not authenticated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCurrentUserPermissions">
            <summary>
            Gets all user permissions from claims
            </summary>
            <returns>List of user permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasPermission(System.String)">
            <summary>
            Checks if current user has a specific permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>True if user has the permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAnyPermission(System.String[])">
            <summary>
            Checks if current user has any of the specified permissions
            </summary>
            <param name="permissions">Permissions to check</param>
            <returns>True if user has any of the permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAllPermissions(System.String[])">
            <summary>
            Checks if current user has all of the specified permissions
            </summary>
            <param name="permissions">Permissions to check</param>
            <returns>True if user has all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasRole(System.String)">
            <summary>
            Checks if current user has a specific role
            </summary>
            <param name="role">Role to check</param>
            <returns>True if user has the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.HasAnyRole(System.String[])">
            <summary>
            Checks if current user has any of the specified roles
            </summary>
            <param name="roles">Roles to check</param>
            <returns>True if user has any of the roles</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetClientIpAddress">
            <summary>
            Gets the client IP address
            </summary>
            <returns>Client IP address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetUserAgent">
            <summary>
            Gets the user agent string
            </summary>
            <returns>User agent string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetCorrelationId">
            <summary>
            Gets the correlation ID for request tracking
            </summary>
            <returns>Correlation ID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestId">
            <summary>
            Gets the request ID from headers or generates a new one
            </summary>
            <returns>Request ID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSessionId">
            <summary>
            Gets the session ID if available
            </summary>
            <returns>Session ID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetModelStateErrors">
            <summary>
            Gets model state errors as a list
            </summary>
            <returns>List of validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetModelStateErrorsByField">
            <summary>
            Gets model state errors grouped by field
            </summary>
            <returns>Dictionary of field errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ValidationError(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Creates a standardized validation error response
            </summary>
            <param name="errors">Validation errors</param>
            <param name="message">General error message</param>
            <returns>BadRequest result with validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ValidationError(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.String)">
            <summary>
            Creates a standardized validation error response with field-specific errors
            </summary>
            <param name="fieldErrors">Field-specific validation errors</param>
            <param name="message">General error message</param>
            <returns>BadRequest result with field validation errors</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.UnauthorizedResponse(System.String)">
            <summary>
            Creates a standardized unauthorized response
            </summary>
            <param name="message">Unauthorized message</param>
            <returns>Unauthorized result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ForbiddenResponse(System.String)">
            <summary>
            Creates a standardized forbidden response
            </summary>
            <param name="message">Forbidden message</param>
            <returns>Forbidden result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.NotFoundResponse(System.String,System.Object)">
            <summary>
            Creates a standardized not found response
            </summary>
            <param name="resource">Resource that was not found</param>
            <param name="id">Resource ID</param>
            <returns>NotFound result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.ServerErrorResponse(System.String)">
            <summary>
            Creates a standardized server error response
            </summary>
            <param name="message">Error message</param>
            <returns>Internal server error result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SuccessResponse(System.Object,System.String)">
            <summary>
            Creates a standardized success response
            </summary>
            <param name="data">Response data</param>
            <param name="message">Success message</param>
            <returns>OK result with data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.CreatedResponse(System.Object,System.String,System.String)">
            <summary>
            Creates a standardized created response
            </summary>
            <param name="data">Created resource data</param>
            <param name="location">Location of created resource</param>
            <param name="message">Success message</param>
            <returns>Created result with data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.CanAccessUserResource(System.Int32,System.String)">
            <summary>
            Validates that the current user can access a resource owned by a specific user
            </summary>
            <param name="resourceOwnerId">ID of the resource owner</param>
            <param name="requiredPermission">Permission required for access if not owner</param>
            <returns>True if access is allowed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetPaginationParameters(System.Int32,System.Int32)">
            <summary>
            Gets pagination parameters from query string
            </summary>
            <param name="defaultPageSize">Default page size</param>
            <param name="maxPageSize">Maximum allowed page size</param>
            <returns>Pagination parameters</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSortParameters(System.String,System.String[])">
            <summary>
            Gets sort parameters from query string
            </summary>
            <param name="defaultSortBy">Default sort field</param>
            <param name="allowedSortFields">Allowed sort fields</param>
            <returns>Sort parameters</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetSearchTerm(System.Int32)">
            <summary>
            Gets search term from query string
            </summary>
            <param name="minLength">Minimum search term length</param>
            <returns>Search term or null if invalid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetCacheHeaders(System.TimeSpan,System.Boolean)">
            <summary>
            Adds cache control headers to the response
            </summary>
            <param name="cacheTime">Cache duration</param>
            <param name="isPublic">Whether cache is public</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetNoCacheHeaders">
            <summary>
            Adds no-cache headers to the response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.SetSecurityHeaders">
            <summary>
            Adds security headers to the response
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.IsMobileRequest">
            <summary>
            Checks if the request is from a mobile device
            </summary>
            <returns>True if request is from mobile device</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestProtocol">
            <summary>
            Gets the request protocol (HTTP/HTTPS)
            </summary>
            <returns>Request protocol</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetRequestUrl">
            <summary>
            Gets the full request URL
            </summary>
            <returns>Full request URL</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.BaseController.GetBaseUrl">
            <summary>
            Gets the base URL of the request
            </summary>
            <returns>Base URL</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UsersController">
            <summary>
            User management controller for CRUD operations and user administration
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUsers(System.Int32,System.Int32,System.String,System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserRole},System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserStatus},System.String,System.String,System.Boolean)">
            <summary>
            Gets paginated list of users
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="searchTerm">Search term for filtering</param>
            <param name="role">Filter by role</param>
            <param name="status">Filter by status</param>
            <param name="department">Filter by department</param>
            <param name="sortBy">Sort field</param>
            <param name="sortDirection">Sort direction (asc/desc)</param>
            <returns>Paginated list of users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUser(System.Int32)">
            <summary>
            Gets user by ID
            </summary>
            <param name="id">User ID</param>
            <returns>User details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.CreateUser(VisitorManagementSystem.Api.Application.DTOs.Users.CreateUserDto)">
            <summary>
            Creates a new user
            </summary>
            <param name="request">User creation request</param>
            <returns>Created user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UpdateUser(System.Int32,VisitorManagementSystem.Api.Application.DTOs.Users.UpdateUserDto)">
            <summary>
            Updates an existing user
            </summary>
            <param name="id">User ID</param>
            <param name="request">User update request</param>
            <returns>Updated user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.ActivateUser(System.Int32,VisitorManagementSystem.Api.Controllers.UserActivationDto)">
            <summary>
            Activates a user account
            </summary>
            <param name="id">User ID</param>
            <param name="request">Activation request</param>
            <returns>Updated user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.DeactivateUser(System.Int32,VisitorManagementSystem.Api.Controllers.UserDeactivationDto)">
            <summary>
            Deactivates a user account
            </summary>
            <param name="id">User ID</param>
            <param name="request">Deactivation request</param>
            <returns>Updated user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.DeleteUser(System.Int32)">
            <summary>
            Deletes a user (soft delete)
            </summary>
            <param name="id">User ID</param>
            <returns>Deletion result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.UnlockUser(System.Int32,VisitorManagementSystem.Api.Controllers.UserUnlockDto)">
            <summary>
            Unlocks a user account
            </summary>
            <param name="id">User ID</param>
            <param name="request">Unlock request</param>
            <returns>Unlock result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetUserActivity(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets user's activity log
            </summary>
            <param name="id">User ID</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="days">Number of days to look back</param>
            <returns>User activity log</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.ResetUserPassword(System.Int32,VisitorManagementSystem.Api.Controllers.AdminPasswordResetDto)">
            <summary>
            Resets user password (admin function)
            </summary>
            <param name="id">User ID</param>
            <param name="request">Password reset request</param>
            <returns>Reset result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Controllers.UsersController.GetAvailableRoles">
            <summary>
            Gets available roles for assignment
            </summary>
            <returns>List of available roles</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UserActivationDto">
            <summary>
            User activation request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UserDeactivationDto">
            <summary>
            User deactivation request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UserUnlockDto">
            <summary>
            User unlock request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.AdminPasswordResetDto">
            <summary>
            Admin password reset request DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.UserActivityDto">
            <summary>
            User activity DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Controllers.RoleDto">
            <summary>
            Role DTO
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions">
            <summary>
            Contains all permission constants used throughout the application
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.User">
            <summary>
            User management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Invitation">
            <summary>
            Invitation management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Visitor">
            <summary>
            Visitor management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.CheckIn">
            <summary>
            Check-in/Check-out permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.WalkIn">
            <summary>
            Walk-in management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.BulkImport">
            <summary>
            Bulk import permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Watchlist">
            <summary>
            Watchlist management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.CustomField">
            <summary>
            Custom field management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.FRSystem">
            <summary>
            Facial recognition system permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Alert">
            <summary>
            Alert management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.SystemConfig">
            <summary>
            System configuration permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Report">
            <summary>
            Report management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Audit">
            <summary>
            Audit management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Template">
            <summary>
            Template management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Dashboard">
            <summary>
            Dashboard permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Profile">
            <summary>
            Profile management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Notification">
            <summary>
            Notification permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Calendar">
            <summary>
            Calendar permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Emergency">
            <summary>
            Emergency management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Badge">
            <summary>
            Badge management permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.QRCode">
            <summary>
            QR Code permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Manual">
            <summary>
            Manual operation permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Integration">
            <summary>
            Integration permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Sync">
            <summary>
            Sync operation permissions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.Permissions.Offline">
            <summary>
            Offline operation permissions
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetAllPermissions">
            <summary>
            Gets all permissions as a flat list
            </summary>
            <returns>List of all permission strings</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of category to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.IsValidPermission(System.String)">
            <summary>
            Checks if a permission string is valid
            </summary>
            <param name="permission">Permission string to validate</param>
            <returns>True if valid permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.Permissions.GetPermissionCategory(System.String)">
            <summary>
            Gets the category for a given permission
            </summary>
            <param name="permission">Permission string</param>
            <returns>Category name or null if not found</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.UserRoles">
            <summary>
            Contains user role constants and related functionality
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Staff">
            <summary>
            Staff role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Administrator">
            <summary>
            Administrator role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Operator">
            <summary>
            Operator role name
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.SuperAdministrator">
            <summary>
            Super administrator role (system level)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.System">
            <summary>
            System role for internal operations
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Constants.UserRoles.Guest">
            <summary>
            Guest role for limited access
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAllRoles">
            <summary>
            Gets all available role names
            </summary>
            <returns>List of all role names</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAssignableRoles">
            <summary>
            Gets assignable roles (excludes system roles)
            </summary>
            <returns>List of assignable role names</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleHierarchy(System.String)">
            <summary>
            Gets the role hierarchy level
            </summary>
            <param name="roleName">Role name</param>
            <returns>Hierarchy level (higher number = more privileges)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsRoleHigher(System.String,System.String)">
            <summary>
            Checks if one role is higher than another in hierarchy
            </summary>
            <param name="role1">First role</param>
            <param name="role2">Second role</param>
            <returns>True if role1 is higher than role2</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.CanManageRole(System.String,System.String)">
            <summary>
            Checks if a role can manage another role
            </summary>
            <param name="managerRole">Manager's role</param>
            <param name="targetRole">Target role to be managed</param>
            <returns>True if manager can manage target role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetDefaultPermissions(System.String)">
            <summary>
            Gets the default permissions for a role
            </summary>
            <param name="roleName">Role name</param>
            <returns>List of default permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetStaffPermissions">
            <summary>
            Gets staff permissions
            </summary>
            <returns>List of staff permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetOperatorPermissions">
            <summary>
            Gets operator permissions
            </summary>
            <returns>List of operator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetAdministratorPermissions">
            <summary>
            Gets administrator permissions
            </summary>
            <returns>List of administrator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetSuperAdministratorPermissions">
            <summary>
            Gets super administrator permissions
            </summary>
            <returns>List of super administrator permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetSystemPermissions">
            <summary>
            Gets system permissions (for internal operations)
            </summary>
            <returns>List of system permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetGuestPermissions">
            <summary>
            Gets guest permissions (very limited)
            </summary>
            <returns>List of guest permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleName(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Converts UserRole enum to string
            </summary>
            <param name="userRole">UserRole enum value</param>
            <returns>Role name string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetUserRole(System.String)">
            <summary>
            Converts role string to UserRole enum
            </summary>
            <param name="roleName">Role name string</param>
            <returns>UserRole enum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRoleDescription(System.String)">
            <summary>
            Gets role description
            </summary>
            <param name="roleName">Role name</param>
            <returns>Role description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsValidRole(System.String)">
            <summary>
            Checks if a role name is valid
            </summary>
            <param name="roleName">Role name to validate</param>
            <returns>True if valid role name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.IsAssignableRole(System.String)">
            <summary>
            Checks if a role is assignable to users
            </summary>
            <param name="roleName">Role name</param>
            <returns>True if role is assignable</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetRolesWithPermission(System.String)">
            <summary>
            Gets roles that have a specific permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>List of roles that have the permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.UserRoles.GetMinimumRoleForPermission(System.String)">
            <summary>
            Gets the minimum role required for a permission
            </summary>
            <param name="permission">Permission to check</param>
            <returns>Minimum role name or null if permission not found</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages">
            <summary>
            Contains all validation error messages used throughout the application
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.General">
            <summary>
            General validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.User">
            <summary>
            User validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Invitation">
            <summary>
            Invitation validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Visitor">
            <summary>
            Visitor validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.CheckIn">
            <summary>
            Check-in validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.WalkIn">
            <summary>
            Walk-in validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.BulkImport">
            <summary>
            Bulk import validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Watchlist">
            <summary>
            Watchlist validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.CustomField">
            <summary>
            Custom field validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FacialRecognition">
            <summary>
            Facial recognition validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.System">
            <summary>
            System validation messages
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Security">
            <summary>
            Security validation messages
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.Format(System.String,System.Object[])">
            <summary>
            Gets a formatted validation message with parameters
            </summary>
            <param name="message">Message template</param>
            <param name="parameters">Parameters to format</param>
            <returns>Formatted message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.RequiredField(System.String)">
            <summary>
            Gets a validation message for a required field
            </summary>
            <param name="fieldName">Field name</param>
            <returns>Required field message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FieldTooLong(System.String,System.Int32)">
            <summary>
            Gets a validation message for field length
            </summary>
            <param name="fieldName">Field name</param>
            <param name="maxLength">Maximum length</param>
            <returns>Field length message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.FieldOutOfRange(System.String,System.Object,System.Object)">
            <summary>
            Gets a validation message for field range
            </summary>
            <param name="fieldName">Field name</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <returns>Field range message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.InvalidFormat(System.String,System.String)">
            <summary>
            Gets a validation message for invalid format
            </summary>
            <param name="fieldName">Field name</param>
            <param name="expectedFormat">Expected format</param>
            <returns>Invalid format message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.AlreadyExists(System.String,System.String)">
            <summary>
            Gets a validation message for already exists
            </summary>
            <param name="itemType">Type of item</param>
            <param name="value">Value that already exists</param>
            <returns>Already exists message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.NotFound(System.String,System.String)">
            <summary>
            Gets a validation message for not found
            </summary>
            <param name="itemType">Type of item</param>
            <param name="identifier">Item identifier</param>
            <returns>Not found message</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Constants.ValidationMessages.InvalidStateTransition(System.String,System.String)">
            <summary>
            Gets a validation message for invalid state transition
            </summary>
            <param name="fromState">Current state</param>
            <param name="toState">Target state</param>
            <returns>Invalid transition message</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity">
            <summary>
            Base entity class that provides audit trail functionality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.CreatedBy">
            <summary>
            ID of the user who created the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.ModifiedBy">
            <summary>
            ID of the user who last modified the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.CreatedByUser">
            <summary>
            Navigation property for the user who created the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.ModifiedByUser">
            <summary>
            Navigation property for the user who last modified the entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.UpdateModifiedBy(System.Int32)">
            <summary>
            Updates the entity with modification details
            </summary>
            <param name="modifiedBy">ID of the user making the modification</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.SetCreatedBy(System.Int32)">
            <summary>
            Sets the entity creation details
            </summary>
            <param name="createdBy">ID of the user creating the entity</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.Deactivate(System.Int32)">
            <summary>
            Deactivates the entity with user information
            </summary>
            <param name="deactivatedBy">ID of the user deactivating the entity</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditableEntity.Activate(System.Int32)">
            <summary>
            Activates the entity with user information
            </summary>
            <param name="activatedBy">ID of the user activating the entity</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.AuditLog">
            <summary>
            Represents an audit log entry for tracking system activities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EventType">
            <summary>
            Type of event that occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EntityName">
            <summary>
            Name of the entity that was affected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.EntityId">
            <summary>
            ID of the entity that was affected
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Action">
            <summary>
            Action that was performed (Create, Update, Delete, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Description">
            <summary>
            Description of the action performed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.OldValues">
            <summary>
            Old values before the change (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.NewValues">
            <summary>
            New values after the change (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Metadata">
            <summary>
            Additional metadata about the event (JSON format)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IpAddress">
            <summary>
            IP address of the client that initiated the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.UserAgent">
            <summary>
            User agent of the client
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CorrelationId">
            <summary>
            Correlation ID for tracking related operations
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SessionId">
            <summary>
            Session ID for tracking user sessions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestId">
            <summary>
            Request ID for tracking individual requests
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.HttpMethod">
            <summary>
            HTTP method used for the request
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestPath">
            <summary>
            URL path of the request
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ResponseStatusCode">
            <summary>
            Status code of the response
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.Duration">
            <summary>
            Duration of the request in milliseconds
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequestSize">
            <summary>
            Size of the request in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ResponseSize">
            <summary>
            Size of the response in bytes
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IsSuccess">
            <summary>
            Indicates if the action was successful
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ErrorMessage">
            <summary>
            Error message if the action failed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ExceptionDetails">
            <summary>
            Exception details if an error occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.UserId">
            <summary>
            ID of the user who performed the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.User">
            <summary>
            Navigation property to the user who performed the action
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RiskLevel">
            <summary>
            Risk level of the action (Low, Medium, High, Critical)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.RequiresAttention">
            <summary>
            Indicates if this entry requires attention
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.IsReviewed">
            <summary>
            Indicates if this entry has been reviewed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewedBy">
            <summary>
            ID of the user who reviewed this entry
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewedDate">
            <summary>
            Date when this entry was reviewed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.AuditLog.ReviewComments">
            <summary>
            Review comments
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CreateSuccessEntry(VisitorManagementSystem.Api.Domain.Enums.EventType,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates an audit log entry for a successful action
            </summary>
            <param name="eventType">Type of event</param>
            <param name="entityName">Name of the affected entity</param>
            <param name="entityId">ID of the affected entity</param>
            <param name="action">Action performed</param>
            <param name="description">Description of the action</param>
            <param name="userId">ID of the user performing the action</param>
            <param name="ipAddress">IP address of the client</param>
            <param name="userAgent">User agent of the client</param>
            <returns>New audit log entry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.CreateFailureEntry(VisitorManagementSystem.Api.Domain.Enums.EventType,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Creates an audit log entry for a failed action
            </summary>
            <param name="eventType">Type of event</param>
            <param name="entityName">Name of the affected entity</param>
            <param name="action">Action attempted</param>
            <param name="errorMessage">Error message</param>
            <param name="exceptionDetails">Exception details</param>
            <param name="userId">ID of the user attempting the action</param>
            <param name="ipAddress">IP address of the client</param>
            <param name="userAgent">User agent of the client</param>
            <returns>New audit log entry</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.MarkAsReviewed(System.Int32,System.String)">
            <summary>
            Marks the audit log entry as reviewed
            </summary>
            <param name="reviewedBy">ID of the user reviewing the entry</param>
            <param name="comments">Review comments</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SetRiskLevel(System.String)">
            <summary>
            Sets the risk level of the audit entry
            </summary>
            <param name="riskLevel">Risk level (Low, Medium, High, Critical)</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.AddPerformanceMetrics(System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Adds performance metrics to the audit log
            </summary>
            <param name="duration">Duration in milliseconds</param>
            <param name="requestSize">Request size in bytes</param>
            <param name="responseSize">Response size in bytes</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.AuditLog.SetRequestInfo(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sets request information
            </summary>
            <param name="httpMethod">HTTP method</param>
            <param name="requestPath">Request path</param>
            <param name="responseStatusCode">Response status code</param>
            <param name="correlationId">Correlation ID</param>
            <param name="requestId">Request ID</param>
            <param name="sessionId">Session ID</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.BaseEntity">
            <summary>
            Base entity class that provides common properties for all entities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.CreatedOn">
            <summary>
            Date and time when the entity was created (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.ModifiedOn">
            <summary>
            Date and time when the entity was last modified (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.RowVersion">
            <summary>
            Version timestamp for optimistic concurrency control
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.IsActive">
            <summary>
            Indicates whether the entity is active
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.UpdateModifiedOn">
            <summary>
            Updates the ModifiedOn timestamp
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Deactivate">
            <summary>
            Marks the entity as inactive (soft delete)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.BaseEntity.Activate">
            <summary>
            Marks the entity as active
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.RefreshToken">
            <summary>
            Represents a refresh token for JWT authentication
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.Token">
            <summary>
            The refresh token value (encrypted)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.JwtId">
            <summary>
            The JTI (JWT ID) of the associated access token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ExpiryDate">
            <summary>
            When the refresh token expires
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsUsed">
            <summary>
            Whether the token has been used (one-time use)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsRevoked">
            <summary>
            Whether the token has been revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevokedDate">
            <summary>
            Date when the token was revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevocationReason">
            <summary>
            Reason for revocation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.CreatedByIp">
            <summary>
            IP address where the token was created
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.RevokedByIp">
            <summary>
            IP address where the token was revoked
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.UserAgent">
            <summary>
            User agent of the client that created the token
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.DeviceFingerprint">
            <summary>
            Device fingerprint for additional security
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.UserId">
            <summary>
            ID of the user this token belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.User">
            <summary>
            Navigation property to the user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacedByTokenId">
            <summary>
            ID of the token that replaced this one (for token rotation)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacedByToken">
            <summary>
            Navigation property to the token that replaced this one
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.ReplacesToken">
            <summary>
            Navigation property to the token this one replaced
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsValid">
            <summary>
            Checks if the refresh token is valid (not expired, used, or revoked)
            </summary>
            <returns>True if the token is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsExpired">
            <summary>
            Checks if the refresh token is expired
            </summary>
            <returns>True if the token is expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.MarkAsUsed(System.String)">
            <summary>
            Marks the token as used
            </summary>
            <param name="usedByIp">IP address where the token was used</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.Revoke(System.String,System.String)">
            <summary>
            Revokes the refresh token
            </summary>
            <param name="reason">Reason for revocation</param>
            <param name="revokedByIp">IP address where the token was revoked</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.CreateReplacementToken(System.String,System.String,System.DateTime,System.String,System.String,System.String)">
            <summary>
            Creates a replacement token for token rotation
            </summary>
            <param name="newToken">New token value</param>
            <param name="newJwtId">New JWT ID</param>
            <param name="expiryDate">Expiry date for the new token</param>
            <param name="createdByIp">IP address creating the new token</param>
            <param name="userAgent">User agent creating the new token</param>
            <param name="deviceFingerprint">Device fingerprint</param>
            <returns>New refresh token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.GetRemainingTime">
            <summary>
            Gets the remaining time until expiry
            </summary>
            <returns>TimeSpan until expiry, or null if expired</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.IsFromSameDevice(System.String)">
            <summary>
            Checks if the token is from the same device
            </summary>
            <param name="deviceFingerprint">Device fingerprint to compare</param>
            <returns>True if from the same device</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.RefreshToken.GetAge">
            <summary>
            Gets the token's age
            </summary>
            <returns>Time since token creation</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity">
            <summary>
            Base entity class that provides soft delete functionality
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.IsDeleted">
            <summary>
            Indicates whether the entity has been soft deleted
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedOn">
            <summary>
            Date and time when the entity was soft deleted (UTC)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedBy">
            <summary>
            ID of the user who soft deleted the entity
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DeletedByUser">
            <summary>
            Navigation property for the user who soft deleted the entity
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.SoftDelete(System.Int32)">
            <summary>
            Soft deletes the entity
            </summary>
            <param name="deletedBy">ID of the user performing the deletion</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.Restore(System.Int32)">
            <summary>
            Restores a soft deleted entity
            </summary>
            <param name="restoredBy">ID of the user performing the restoration</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.IsCurrentlyDeleted">
            <summary>
            Checks if the entity is currently deleted
            </summary>
            <returns>True if the entity is soft deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.SoftDeleteEntity.DaysSinceDeleted">
            <summary>
            Gets the number of days since the entity was deleted
            </summary>
            <returns>Number of days since deletion, or null if not deleted</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Entities.User">
            <summary>
            Represents a user in the system with authentication and authorization capabilities
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FirstName">
            <summary>
            User's first name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LastName">
            <summary>
            User's last name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Email">
            <summary>
            User's email address (unique identifier)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.NormalizedEmail">
            <summary>
            Normalized email for case-insensitive comparisons
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordHash">
            <summary>
            Hashed password
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordSalt">
            <summary>
            Salt used for password hashing
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PhoneNumber">
            <summary>
            User's phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Role">
            <summary>
            User's role in the system
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Status">
            <summary>
            User's current status
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Department">
            <summary>
            Department the user belongs to
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.JobTitle">
            <summary>
            Job title of the user
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.EmployeeId">
            <summary>
            Employee ID or badge number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.ProfilePhotoPath">
            <summary>
            User's profile photo path
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LastLoginDate">
            <summary>
            Date when the user last logged in
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FailedLoginAttempts">
            <summary>
            Number of failed login attempts
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.LockoutEnd">
            <summary>
            Date and time when the account is locked out until
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.IsLockedOut">
            <summary>
            Indicates whether the user account is locked out
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.MustChangePassword">
            <summary>
            Indicates whether the user must change password on next login
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.PasswordChangedDate">
            <summary>
            Date when the password was last changed
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.SecurityStamp">
            <summary>
            Security stamp for invalidating tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.TimeZone">
            <summary>
            User's timezone
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Language">
            <summary>
            User's preferred language
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.Theme">
            <summary>
            User's theme preference
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.RefreshTokens">
            <summary>
            Navigation property for refresh tokens
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.CreatedAuditLogs">
            <summary>
            Navigation property for audit logs where this user is the creator
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.FullName">
            <summary>
            Gets the user's full name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Entities.User.DisplayName">
            <summary>
            Gets the user's display name (full name or email if name is empty)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsCurrentlyLockedOut">
            <summary>
            Checks if the user account is currently locked out
            </summary>
            <returns>True if the account is locked out</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IncrementFailedLoginAttempts(System.Int32,System.TimeSpan)">
            <summary>
            Increments failed login attempts and locks account if threshold is reached
            </summary>
            <param name="maxAttempts">Maximum allowed failed attempts before lockout</param>
            <param name="lockoutDuration">Duration of lockout</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.ResetFailedLoginAttempts">
            <summary>
            Resets failed login attempts after successful login
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.LockAccount(System.TimeSpan)">
            <summary>
            Locks the user account for the specified duration
            </summary>
            <param name="lockoutDuration">Duration of the lockout</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UnlockAccount">
            <summary>
            Unlocks the user account
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.ChangePassword(System.String,System.String)">
            <summary>
            Changes the user's password
            </summary>
            <param name="newPasswordHash">New password hash</param>
            <param name="newPasswordSalt">New password salt</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UpdateSecurityStamp">
            <summary>
            Updates the user's security stamp to invalidate tokens
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.HasRole(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the user has the specified role
            </summary>
            <param name="role">Role to check</param>
            <returns>True if the user has the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsAdministrator">
            <summary>
            Checks if the user is an administrator
            </summary>
            <returns>True if the user is an administrator</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsStaff">
            <summary>
            Checks if the user is staff
            </summary>
            <returns>True if the user is staff</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsOperator">
            <summary>
            Checks if the user is an operator
            </summary>
            <returns>True if the user is an operator</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.IsValidForAuthentication">
            <summary>
            Validates the user's current state
            </summary>
            <returns>True if the user is valid for authentication</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Entities.User.UpdatePreferences(System.String,System.String,System.String)">
            <summary>
            Sets user preferences
            </summary>
            <param name="timeZone">User's timezone</param>
            <param name="language">User's preferred language</param>
            <param name="theme">User's theme preference</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.EventType">
            <summary>
            Represents the different types of events that can be logged in the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Authentication">
            <summary>
            Authentication related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Authorization">
            <summary>
            Authorization related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.UserManagement">
            <summary>
            User management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Invitation">
            <summary>
            Invitation related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Visitor">
            <summary>
            Visitor related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.CheckInOut">
            <summary>
            Check-in/Check-out events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.WalkIn">
            <summary>
            Walk-in related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.BulkImport">
            <summary>
            Bulk import events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Watchlist">
            <summary>
            Watchlist management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.CustomField">
            <summary>
            Custom field management events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.FacialRecognition">
            <summary>
            Facial recognition system events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.SystemConfiguration">
            <summary>
            System configuration events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Security">
            <summary>
            Security related events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.DataExportImport">
            <summary>
            Data export/import events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Notification">
            <summary>
            Notification events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Report">
            <summary>
            Report generation events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.SystemMaintenance">
            <summary>
            System maintenance events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.ApiAccess">
            <summary>
            API access events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Error">
            <summary>
            Error events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Performance">
            <summary>
            Performance events
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.Integration">
            <summary>
            Integration events (external systems)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.EventType.General">
            <summary>
            General events 
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions">
            <summary>
            Extension methods for EventType enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the display name for the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetSeverityLevel(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the severity level for the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Severity level (1 = Low, 5 = Critical)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.IsSecurityRelated(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type is security-related
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if security-related</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.RequiresImmediateAttention(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type requires immediate attention
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if requires immediate attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventColor(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the color associated with the event type for UI display
            </summary>
            <param name="eventType">Event type</param>
            <returns>Color hex code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventIcon(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the icon associated with the event type
            </summary>
            <param name="eventType">Event type</param>
            <returns>Icon class name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetCategory(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the category for grouping event types
            </summary>
            <param name="eventType">Event type</param>
            <returns>Category name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.ShouldRetainForCompliance(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Checks if the event type should be retained for compliance
            </summary>
            <param name="eventType">Event type</param>
            <returns>True if should be retained for compliance</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetRetentionPeriodDays(VisitorManagementSystem.Api.Domain.Enums.EventType)">
            <summary>
            Gets the default retention period for the event type in days
            </summary>
            <param name="eventType">Event type</param>
            <returns>Retention period in days</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetEventTypesByCategory(System.String)">
            <summary>
            Gets all event types in a specific category
            </summary>
            <param name="category">Category name</param>
            <returns>List of event types in the category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetAllEventTypes">
            <summary>
            Gets all available event types
            </summary>
            <returns>List of all event types</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetSecurityEventTypes">
            <summary>
            Gets all security-related event types
            </summary>
            <returns>List of security-related event types</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetCriticalEventTypes">
            <summary>
            Gets all event types that require immediate attention
            </summary>
            <returns>List of event types requiring immediate attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.EventTypeExtensions.GetAllCategories">
            <summary>
            Gets all unique categories
            </summary>
            <returns>List of all categories</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.PermissionType">
            <summary>
            Represents the different types of permissions that can be granted to users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions">
            <summary>
            Extension methods for PermissionType enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the display name for the permission type
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionString(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the permission string used in authorization policies
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Permission string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetCategory(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the category for grouping permissions
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Category name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetRiskLevel(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets the risk level associated with the permission
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>Risk level (1 = Low, 5 = Critical)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.IsAdministrative(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Checks if the permission is considered administrative
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>True if administrative permission</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionsByCategory(System.String)">
            <summary>
            Gets permissions by category
            </summary>
            <param name="category">Category name</param>
            <returns>List of permissions in the category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAllCategories">
            <summary>
            Gets all permission categories
            </summary>
            <returns>List of all categories</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetPermissionsForRole(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets all permissions for a specific user role
            </summary>
            <param name="role">User role</param>
            <returns>List of permissions for the role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.RequiresPermission(VisitorManagementSystem.Api.Domain.Enums.PermissionType,VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Checks if a permission requires another permission as a prerequisite
            </summary>
            <param name="permissionType">Permission to check</param>
            <param name="prerequisite">Potential prerequisite permission</param>
            <returns>True if prerequisite is required</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetMutuallyExclusivePermissions(VisitorManagementSystem.Api.Domain.Enums.PermissionType)">
            <summary>
            Gets all permissions that are mutually exclusive with the given permission
            </summary>
            <param name="permissionType">Permission type</param>
            <returns>List of mutually exclusive permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAllPermissions">
            <summary>
            Gets all available permissions
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetHighRiskPermissions">
            <summary>
            Gets high-risk permissions that require special approval
            </summary>
            <returns>List of high-risk permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.PermissionTypeExtensions.GetAdministrativePermissions">
            <summary>
            Gets administrative permissions
            </summary>
            <returns>List of administrative permissions</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserRole">
            <summary>
            Represents the different user roles in the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Staff">
            <summary>
            Staff member who can create and manage their own invitations
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Administrator">
            <summary>
            Administrator with full system access
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserRole.Operator">
            <summary>
            Operator who manages check-ins and walk-ins
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions">
            <summary>
            Extension methods for UserRole enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the display name for the user role
            </summary>
            <param name="role">User role</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetPermissionLevel(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the permission level for the user role
            </summary>
            <param name="role">User role</param>
            <returns>Permission level (higher number = more permissions)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsAdministrative(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role has administrative privileges
            </summary>
            <param name="role">User role</param>
            <returns>True if administrative role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageUsers(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can manage users
            </summary>
            <param name="role">User role</param>
            <returns>True if can manage users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanApproveInvitations(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can approve invitations
            </summary>
            <param name="role">User role</param>
            <returns>True if can approve invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanPerformCheckIns(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can perform check-ins
            </summary>
            <param name="role">User role</param>
            <returns>True if can perform check-ins</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanCreateInvitations(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can create invitations
            </summary>
            <param name="role">User role</param>
            <returns>True if can create invitations</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanAccessSystemConfig(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can access system configuration
            </summary>
            <param name="role">User role</param>
            <returns>True if can access system configuration</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanViewReports(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can view reports
            </summary>
            <param name="role">User role</param>
            <returns>True if can view reports</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageWatchlists(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can manage watchlists
            </summary>
            <param name="role">User role</param>
            <returns>True if can manage watchlists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanPerformBulkImports(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if the role can perform bulk imports
            </summary>
            <param name="role">User role</param>
            <returns>True if can perform bulk imports</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetAllRoles">
            <summary>
            Gets all available user roles
            </summary>
            <returns>List of all user roles</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetAssignableRoles(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets user roles that can be assigned by the specified role
            </summary>
            <param name="assignerRole">Role of the user doing the assignment</param>
            <returns>List of roles that can be assigned</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.CanManageRole(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role can manage another role
            </summary>
            <param name="managerRole">Role of the manager</param>
            <param name="targetRole">Role being managed</param>
            <returns>True if the manager role can manage the target role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetDefaultPermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the default permissions for a user role
            </summary>
            <param name="role">User role</param>
            <returns>List of default permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.GetHierarchyLevel(VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets the role hierarchy level
            </summary>
            <param name="role">User role</param>
            <returns>Hierarchy level (1 = lowest, 3 = highest)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsHigherThan(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role is higher than another in the hierarchy
            </summary>
            <param name="role">First role</param>
            <param name="otherRole">Second role</param>
            <returns>True if first role is higher than second role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserRoleExtensions.IsLowerThan(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Checks if one role is lower than another in the hierarchy
            </summary>
            <param name="role">First role</param>
            <param name="otherRole">Second role</param>
            <returns>True if first role is lower than second role</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserStatus">
            <summary>
            Represents the different statuses a user can have
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Active">
            <summary>
            User account is active and can access the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Inactive">
            <summary>
            User account is inactive and cannot access the system
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Pending">
            <summary>
            User account is pending activation
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Suspended">
            <summary>
            User account is suspended temporarily
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Locked">
            <summary>
            User account is locked due to security reasons
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.Archived">
            <summary>
            User account is archived (soft deleted)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.PasswordExpired">
            <summary>
            User password has expired
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Domain.Enums.UserStatus.PasswordChangeRequired">
            <summary>
            User account requires password change
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions">
            <summary>
            Extension methods for UserStatus enum
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetDisplayName(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the display name for the user status
            </summary>
            <param name="status">User status</param>
            <returns>Display name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.CanLogin(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status allows login
            </summary>
            <param name="status">User status</param>
            <returns>True if user can login</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.RequiresImmediateAction(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status requires immediate action
            </summary>
            <param name="status">User status</param>
            <returns>True if immediate action is required</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsTemporaryStatus(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status is temporary
            </summary>
            <param name="status">User status</param>
            <returns>True if status is temporary</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsDisabled(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the user status indicates the account is disabled
            </summary>
            <param name="status">User status</param>
            <returns>True if account is disabled</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetCssClass(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the CSS class for displaying the status
            </summary>
            <param name="status">User status</param>
            <returns>CSS class name</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusColor(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the color associated with the status
            </summary>
            <param name="status">User status</param>
            <returns>Color name or hex code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusIcon(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the icon associated with the status
            </summary>
            <param name="status">User status</param>
            <returns>Icon name or class</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetValidTransitions(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets valid status transitions from the current status
            </summary>
            <param name="currentStatus">Current user status</param>
            <returns>List of valid next statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.IsValidTransition(VisitorManagementSystem.Api.Domain.Enums.UserStatus,VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if transition from one status to another is valid
            </summary>
            <param name="fromStatus">Current status</param>
            <param name="toStatus">Target status</param>
            <returns>True if transition is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetStatusDescription(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the reason/description for the status
            </summary>
            <param name="status">User status</param>
            <returns>Status description</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetAllStatuses">
            <summary>
            Gets all available user statuses
            </summary>
            <returns>List of all user statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetActiveStatuses">
            <summary>
            Gets statuses that are considered "active" for business purposes
            </summary>
            <returns>List of active statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetBlockedStatuses">
            <summary>
            Gets statuses that prevent user from accessing the system
            </summary>
            <returns>List of blocked statuses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetAdminInterventionStatuses">
            <summary>
            Gets statuses that require administrator intervention
            </summary>
            <returns>List of statuses requiring admin action</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.CanChangePassword(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Checks if the status allows password changes
            </summary>
            <param name="status">User status</param>
            <returns>True if password can be changed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Enums.UserStatusExtensions.GetPriority(VisitorManagementSystem.Api.Domain.Enums.UserStatus)">
            <summary>
            Gets the priority level for status (higher number = higher priority)
            </summary>
            <param name="status">User status</param>
            <returns>Priority level</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1">
            <summary>
            Generic repository interface for common CRUD operations
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets an entity by ID
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetByIdAsync(System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Object}}[])">
            <summary>
            Gets an entity by ID with includes
            </summary>
            <param name="id">Entity ID</param>
            <param name="includes">Include expressions</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAllAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all entities
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of all entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets entities by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities matching specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetSingleAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets a single entity by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Entity if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with custom criteria
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities matching predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with ordering
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="orderBy">Order by expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Ordered list of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetDescendingAsync``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with ordering descending
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="orderByDesc">Order by descending expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Ordered list of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetPagedAsync``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Threading.CancellationToken)">
            <summary>
            Gets paginated entities
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="predicate">Optional predicate</param>
            <param name="orderBy">Optional order by expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated result with entities and total count</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetPagedAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Gets paginated entities with specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated result with entities and total count</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(System.Threading.CancellationToken)">
            <summary>
            Counts entities
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Total count of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Counts entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Count of entities matching predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.CountAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Counts entities by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Count of entities matching specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity matches predicate</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AnyAsync(VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification{`0},System.Threading.CancellationToken)">
            <summary>
            Checks if any entity exists by specification
            </summary>
            <param name="specification">Specification</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if any entity matches specification</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.FirstOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets first entity or default
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>First entity or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SingleOrDefaultAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets single entity or default
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Single entity or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new entity
            </summary>
            <param name="entity">Entity to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Added entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AddRangeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Adds multiple entities
            </summary>
            <param name="entities">Entities to add</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Update(`0)">
            <summary>
            Updates an entity
            </summary>
            <param name="entity">Entity to update</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.UpdateRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Updates multiple entities
            </summary>
            <param name="entities">Entities to update</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Remove(`0)">
            <summary>
            Removes an entity
            </summary>
            <param name="entity">Entity to remove</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Removes entities by ID
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes multiple entities
            </summary>
            <param name="entities">Entities to remove</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.RemoveAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Removes entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities removed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SoftDelete(`0,System.Int32)">
            <summary>
            Soft deletes an entity (if it inherits from SoftDeleteEntity)
            </summary>
            <param name="entity">Entity to soft delete</param>
            <param name="deletedBy">User performing the deletion</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SoftDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Soft deletes entities by predicate
            </summary>
            <param name="predicate">Predicate expression</param>
            <param name="deletedBy">User performing the deletion</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities soft deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Restore(`0,System.Int32)">
            <summary>
            Restores a soft deleted entity
            </summary>
            <param name="entity">Entity to restore</param>
            <param name="restoredBy">User performing the restoration</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.BulkUpdateAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0},Microsoft.EntityFrameworkCore.Query.SetPropertyCalls{`0}}},System.Threading.CancellationToken)">
            <summary>
            Bulk updates entities
            </summary>
            <param name="predicate">Predicate to match entities</param>
            <param name="updateExpression">Update expression</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.BulkDeleteAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Bulk deletes entities
            </summary>
            <param name="predicate">Predicate to match entities</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of entities deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.FromSqlAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes a raw SQL query
            </summary>
            <param name="sql">SQL query</param>
            <param name="parameters">Query parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ExecuteStoredProcedureAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a stored procedure
            </summary>
            <param name="procedureName">Stored procedure name</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GetAsNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets entities with tracking disabled (for read-only scenarios)
            </summary>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of entities (not tracked)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ProjectAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Projects entities to a different type
            </summary>
            <typeparam name="TResult">Result type</typeparam>
            <param name="selector">Projection selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of projected results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.GroupByAsync``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{System.Linq.IGrouping{``0,`0},``1}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Groups entities and projects the result
            </summary>
            <typeparam name="TKey">Group key type</typeparam>
            <typeparam name="TResult">Result type</typeparam>
            <param name="keySelector">Key selector for grouping</param>
            <param name="resultSelector">Result selector for projection</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of grouped and projected results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ExistsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if entity with ID exists
            </summary>
            <param name="id">Entity ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if entity exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.MaxAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets maximum value of a property
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Maximum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.MinAsync``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets minimum value of a property
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Minimum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.SumAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets sum of a numeric property
            </summary>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Sum value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.AverageAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Gets average of a numeric property
            </summary>
            <param name="selector">Property selector</param>
            <param name="predicate">Optional predicate</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Average value</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.ReloadAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Reloads an entity from the database
            </summary>
            <param name="entity">Entity to reload</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Detach(`0)">
            <summary>
            Detaches an entity from the context
            </summary>
            <param name="entity">Entity to detach</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IGenericRepository`1.Attach(`0)">
            <summary>
            Attaches an entity to the context
            </summary>
            <param name="entity">Entity to attach</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository">
            <summary>
            Repository interface for RefreshToken entity operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a refresh token by token value
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByJwtIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a refresh token by JWT ID
            </summary>
            <param name="jwtId">JWT ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Refresh token if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByUserIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens for the user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetValidTokensByUserIdAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets valid refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of valid refresh tokens for the user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetExpiredTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets expired refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of expired refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetRevokedTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets revoked refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of revoked refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetUsedTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets used refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of used refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByDeviceFingerprintAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens for the device</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetByIpAddressAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens by IP address
            </summary>
            <param name="ipAddress">IP address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens from the IP address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokensCreatedInPeriodAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens created within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens created in the date range</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokensExpiringWithinAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets refresh tokens expiring within a certain period
            </summary>
            <param name="expiryThreshold">Expiry threshold date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of refresh tokens expiring soon</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeAllTokensForUserAsync(System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes all refresh tokens for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeTokensByDeviceAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes refresh tokens by device fingerprint
            </summary>
            <param name="deviceFingerprint">Device fingerprint</param>
            <param name="reason">Revocation reason</param>
            <param name="revokedByIp">IP address performing revocation</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.RevokeExpiredTokensAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Revokes expired refresh tokens
            </summary>
            <param name="reason">Revocation reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.DeleteOldTokensAsync(System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Deletes old refresh tokens
            </summary>
            <param name="cutoffDate">Cutoff date for deletion</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of tokens deleted</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.MarkTokenAsUsedAsync(System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Marks a refresh token as used
            </summary>
            <param name="tokenId">Token ID</param>
            <param name="usedByIp">IP address where token was used</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if token was successfully marked as used</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.ValidateTokenAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a refresh token
            </summary>
            <param name="token">Token value</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Validation result with token details</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets refresh token statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenUsageAnalyticsAsync(System.Nullable{System.Int32},System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets token usage analytics
            </summary>
            <param name="userId">Optional user ID filter</param>
            <param name="days">Number of days to analyze</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token usage analytics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetSuspiciousActivityAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets suspicious token activity
            </summary>
            <param name="hours">Number of hours to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of suspicious activities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetTokenChainAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Checks if a token is part of a token chain (rotation)
            </summary>
            <param name="tokenId">Token ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Token chain information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.GetConcurrentSessionsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets concurrent sessions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of concurrent sessions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.LimitConcurrentSessionsAsync(System.Int32,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Limits concurrent sessions for a user
            </summary>
            <param name="userId">User ID</param>
            <param name="maxSessions">Maximum allowed sessions</param>
            <param name="reason">Revocation reason</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of sessions revoked</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IRefreshTokenRepository.PerformCleanupAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Performs token cleanup maintenance
            </summary>
            <param name="retentionDays">Number of days to retain old tokens</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Cleanup result</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.RefreshTokenValidationResult">
            <summary>
            Refresh token validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.RefreshTokenStatistics">
            <summary>
            Refresh token statistics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenUsageAnalytics">
            <summary>
            Token usage analytics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.SuspiciousTokenActivity">
            <summary>
            Suspicious token activity
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenChainInfo">
            <summary>
            Token chain information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserSession">
            <summary>
            User session information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.TokenCleanupResult">
            <summary>
            Token cleanup result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork">
            <summary>
            Unit of Work interface for managing database transactions and repositories
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Users">
            <summary>
            User repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RefreshTokens">
            <summary>
            Refresh token repository
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.AuditLogs">
            <summary>
            Audit log repository
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.Repository``1">
            <summary>
            Gets a generic repository for any entity type
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <returns>Generic repository instance</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            Saves all changes to the database
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected records</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SaveChanges">
            <summary>
            Saves all changes to the database synchronously
            </summary>
            <returns>Number of affected records</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Begins a database transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BeginTransaction">
            <summary>
            Begins a database transaction synchronously
            </summary>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Commits the current transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CommitTransaction">
            <summary>
            Commits the current transaction synchronously
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
            Rolls back the current transaction
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackTransaction">
            <summary>
            Rolls back the current transaction synchronously
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteInTransactionAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Executes a function within a transaction
            </summary>
            <typeparam name="TResult">Result type</typeparam>
            <param name="func">Function to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Result of the function</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteInTransactionAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Executes an action within a transaction
            </summary>
            <param name="action">Action to execute</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteSqlAsync(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes raw SQL command
            </summary>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ExecuteScalarAsync``1(System.String,System.Object[],System.Threading.CancellationToken)">
            <summary>
            Executes raw SQL command and returns scalar result
            </summary>
            <typeparam name="T">Result type</typeparam>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Scalar result</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.HasChanges">
            <summary>
            Checks if there are any pending changes
            </summary>
            <returns>True if there are pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.DiscardChanges">
            <summary>
            Discards all pending changes
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ReloadEntityAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Reloads an entity from the database
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to reload</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.DetachEntity``1(``0)">
            <summary>
            Detaches an entity from the context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to detach</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.AttachEntity``1(``0)">
            <summary>
            Attaches an entity to the context
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity to attach</param>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CurrentTransaction">
            <summary>
            Gets the current transaction if one exists
            </summary>
            <returns>Current transaction or null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout for database operations
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetChangeTrackingEnabled(System.Boolean)">
            <summary>
            Enables or disables change tracking
            </summary>
            <param name="enabled">Whether to enable change tracking</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetQueryTrackingEnabled(System.Boolean)">
            <summary>
            Enables or disables query tracking
            </summary>
            <param name="enabled">Whether to enable query tracking</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.MigrateAsync(System.Threading.CancellationToken)">
            <summary>
            Performs database migration
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CanConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Checks if database can connect
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if can connect</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetConnectionString">
            <summary>
            Gets database connection string
            </summary>
            <returns>Connection string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a savepoint in the current transaction
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Rolls back to a savepoint
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Releases a savepoint
            </summary>
            <param name="name">Savepoint name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetEntityEntry``1(``0)">
            <summary>
            Gets entity entry information
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entity">Entity</param>
            <returns>Entity entry information</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetPendingChanges">
            <summary>
            Gets all pending changes
            </summary>
            <returns>List of pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.ValidateEntities">
            <summary>
            Validates all entities in the context
            </summary>
            <returns>Validation results</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.BulkOperationAsync``1(System.Collections.Generic.IEnumerable{``0},VisitorManagementSystem.Api.Domain.Interfaces.Repositories.BulkOperation,System.Threading.CancellationToken)">
            <summary>
            Executes a bulk operation
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
            <param name="entities">Entities to process</param>
            <param name="operation">Operation type</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of affected entities</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.SetupAuditContext(System.Nullable{System.Int32},System.String,System.String,System.String)">
            <summary>
            Sets up audit logging for the current operation
            </summary>
            <param name="userId">User performing the operation</param>
            <param name="ipAddress">IP address</param>
            <param name="userAgent">User agent</param>
            <param name="correlationId">Correlation ID</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUnitOfWork.GetPerformanceMetrics">
            <summary>
            Gets performance metrics for the current context
            </summary>
            <returns>Performance metrics</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.EntityEntryInfo">
            <summary>
            Entity entry information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.PendingChange">
            <summary>
            Pending change information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.EntityValidationResult">
            <summary>
            Entity validation result
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.BulkOperation">
            <summary>
            Bulk operation types
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.PerformanceMetrics">
            <summary>
            Performance metrics
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.QueryMetric">
            <summary>
            Individual query metric
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository">
            <summary>
            Repository interface for User entity operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByEmailAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a user by email address
            </summary>
            <param name="email">Email address</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByEmployeeIdAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a user by employee ID
            </summary>
            <param name="employeeId">Employee ID</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User if found, null otherwise</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByRoleAsync(VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Threading.CancellationToken)">
            <summary>
            Gets users by role
            </summary>
            <param name="role">User role</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with the specified role</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByStatusAsync(VisitorManagementSystem.Api.Domain.Enums.UserStatus,System.Threading.CancellationToken)">
            <summary>
            Gets users by status
            </summary>
            <param name="status">User status</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with the specified status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetByDepartmentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets users by department
            </summary>
            <param name="department">Department name</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users in the specified department</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.SearchAsync(System.String,System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserRole},System.Nullable{VisitorManagementSystem.Api.Domain.Enums.UserStatus},System.String,System.Threading.CancellationToken)">
            <summary>
            Searches users by various criteria
            </summary>
            <param name="searchTerm">Search term to match against name, email, employee ID</param>
            <param name="role">Optional role filter</param>
            <param name="status">Optional status filter</param>
            <param name="department">Optional department filter</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of matching users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetPaginatedAsync(System.Int32,System.Int32,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets paginated users with sorting
            </summary>
            <param name="pageIndex">Page index (0-based)</param>
            <param name="pageSize">Page size</param>
            <param name="sortBy">Field to sort by</param>
            <param name="sortDescending">Sort direction</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Paginated list of users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetActiveUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets active users
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of active users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetLockedOutUsersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets locked out users
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of locked out users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithExpiredPasswordsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with expired passwords
            </summary>
            <param name="passwordExpiryDays">Number of days after which password expires</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with expired passwords</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersMustChangePasswordAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users who must change their password
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users who must change password</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersCreatedInPeriodAsync(System.DateTime,System.DateTime,System.Threading.CancellationToken)">
            <summary>
            Gets users created within a date range
            </summary>
            <param name="startDate">Start date</param>
            <param name="endDate">End date</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users created in the date range</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithRecentLoginAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with recent login activity
            </summary>
            <param name="recentDays">Number of recent days</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with recent login</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithFailedLoginAttemptsAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets users with failed login attempts above threshold
            </summary>
            <param name="minFailedAttempts">Minimum failed attempts</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with failed login attempts</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersRequiringSecurityAttentionAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users requiring security attention
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users requiring security attention</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersWithValidRefreshTokensAsync(System.Threading.CancellationToken)">
            <summary>
            Gets users with valid refresh tokens
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of users with valid refresh tokens</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetInactiveUsersForCleanupAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets inactive users for cleanup
            </summary>
            <param name="inactiveDays">Number of days of inactivity</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>List of inactive users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.EmailExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if email exists
            </summary>
            <param name="email">Email address</param>
            <param name="excludeUserId">User ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if email exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.EmployeeIdExistsAsync(System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Checks if employee ID exists
            </summary>
            <param name="employeeId">Employee ID</param>
            <param name="excludeUserId">User ID to exclude from check</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if employee ID exists</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUserStatisticsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets user statistics
            </summary>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User statistics</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUserActivitySummaryAsync(System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets user activity summary
            </summary>
            <param name="userId">User ID</param>
            <param name="days">Number of days to look back</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>User activity summary</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkUpdateStatusAsync(System.Collections.Generic.List{System.Int32},VisitorManagementSystem.Api.Domain.Enums.UserStatus,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk updates user status
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="status">New status</param>
            <param name="modifiedBy">User making the change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkUpdateRoleAsync(System.Collections.Generic.List{System.Int32},VisitorManagementSystem.Api.Domain.Enums.UserRole,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Bulk updates user roles
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="role">New role</param>
            <param name="modifiedBy">User making the change</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.BulkResetFailedLoginAttemptsAsync(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Bulk reset failed login attempts
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Number of users updated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.GetUsersByIdsAsync(System.Collections.Generic.List{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets users by multiple IDs efficiently
            </summary>
            <param name="userIds">List of user IDs</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Dictionary of user ID to user</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.IUserRepository.Delete(VisitorManagementSystem.Api.Domain.Entities.User)">
            <summary>
            Marks a user for deletion (hard delete)
            </summary>
            <param name="user">User to delete</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserStatistics">
            <summary>
            User statistics data transfer object
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Repositories.UserActivitySummary">
            <summary>
            User activity summary data transfer object
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher">
            <summary>
            Interface for publishing domain events
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes a domain event
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="domainEvent">Domain event</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAsync(System.Collections.Generic.IEnumerable{VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent},System.Threading.CancellationToken)">
            <summary>
            Publishes multiple domain events
            </summary>
            <param name="domainEvents">List of domain events</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEventPublisher.PublishAndWaitAsync``1(``0,System.Threading.CancellationToken)">
            <summary>
            Publishes a domain event and waits for completion
            </summary>
            <typeparam name="TEvent">Event type</typeparam>
            <param name="domainEvent">Domain event</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent">
            <summary>
            Base interface for domain events
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventId">
            <summary>
            Event ID
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.OccurredOn">
            <summary>
            When the event occurred
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventType">
            <summary>
            Event type name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.EventData">
            <summary>
            Event data as JSON
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.CorrelationId">
            <summary>
            Correlation ID for tracking related events
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDomainEvent.TriggeredBy">
            <summary>
            User who triggered the event
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.BaseDomainEvent">
            <summary>
            Base class for domain events
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Interfaces.Services.IDateTimeProvider">
            <summary>
            Provides an abstraction for date and time operations to support testability.
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1">
            <summary>
            Base specification class for implementing the specification pattern
            </summary>
            <typeparam name="T">Entity type</typeparam>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Criteria">
            <summary>
            The criteria expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Includes">
            <summary>
            List of include expressions for eager loading
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IncludeStrings">
            <summary>
            List of include string expressions for eager loading
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.OrderBy">
            <summary>
            Order by expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.OrderByDescending">
            <summary>
            Order by descending expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.GroupBy">
            <summary>
            Group by expression
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Take">
            <summary>
            Take count for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.Skip">
            <summary>
            Skip count for pagination
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.IsPagingEnabled">
            <summary>
            Whether paging is enabled
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AddInclude(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an include expression
            </summary>
            <param name="includeExpression">Include expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.AddInclude(System.String)">
            <summary>
            Adds an include string
            </summary>
            <param name="includeString">Include string</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyOrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies ordering
            </summary>
            <param name="orderByExpression">Order by expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyOrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies descending ordering
            </summary>
            <param name="orderByDescExpression">Order by descending expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyGroupBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Applies grouping
            </summary>
            <param name="groupByExpression">Group by expression</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.Specifications.BaseSpecification`1.ApplyPaging(System.Int32,System.Int32)">
            <summary>
            Applies paging
            </summary>
            <param name="skip">Skip count</param>
            <param name="take">Take count</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ActiveUsersSpecification">
            <summary>
            Specification for active users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByRoleSpecification">
            <summary>
            Specification for users by role
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByStatusSpecification">
            <summary>
            Specification for users by status
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserByEmailSpecification">
            <summary>
            Specification for users by email
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserByEmployeeIdSpecification">
            <summary>
            Specification for users by employee ID
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.LockedOutUsersSpecification">
            <summary>
            Specification for locked out users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithExpiredPasswordsSpecification">
            <summary>
            Specification for users with expired passwords
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersMustChangePasswordSpecification">
            <summary>
            Specification for users who must change password
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.InactiveUsersForCleanupSpecification">
            <summary>
            Specification for inactive users for cleanup
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UserSearchSpecification">
            <summary>
            Specification for searching users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersCreatedInPeriodSpecification">
            <summary>
            Specification for users created within a date range
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersByDepartmentSpecification">
            <summary>
            Specification for users by department
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithRecentLoginSpecification">
            <summary>
            Specification for users with recent login
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithFailedLoginAttemptsSpecification">
            <summary>
            Specification for users with failed login attempts
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.PaginatedUsersSpecification">
            <summary>
            Specification for paginated users
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersRequiringSecurityAttentionSpecification">
            <summary>
            Specification for users requiring security attention
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.UsersWithValidRefreshTokensSpecification">
            <summary>
            Specification for users with valid refresh tokens
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.Specifications.ParameterReplacer">
            <summary>
            Helper class for replacing parameters in expressions
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.Address">
            <summary>
            Value object representing a physical address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Street1">
            <summary>
            Street address line 1
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Street2">
            <summary>
            Street address line 2 (optional)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.City">
            <summary>
            City name
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.State">
            <summary>
            State or province
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.PostalCode">
            <summary>
            Postal or ZIP code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Country">
            <summary>
            Country name or code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Latitude">
            <summary>
            Optional latitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.Longitude">
            <summary>
            Optional longitude coordinate
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.AddressType">
            <summary>
            Address type (Home, Work, Billing, Shipping, etc.)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsValidated">
            <summary>
            Whether this address has been validated
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Creates a new Address value object
            </summary>
            <param name="street1">Street address line 1</param>
            <param name="city">City name</param>
            <param name="state">State or province</param>
            <param name="postalCode">Postal or ZIP code</param>
            <param name="country">Country</param>
            <param name="street2">Optional street address line 2</param>
            <param name="addressType">Type of address</param>
            <param name="latitude">Optional latitude</param>
            <param name="longitude">Optional longitude</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateCoordinates">
            <summary>
            Validates the coordinate values
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidatePostalCode">
            <summary>
            Validates the postal code format based on country
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateUSPostalCode">
            <summary>
            Validates US ZIP code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateCanadianPostalCode">
            <summary>
            Validates Canadian postal code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ValidateUKPostalCode">
            <summary>
            Validates UK postal code format
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetFullAddress(System.Boolean)">
            <summary>
            Gets the full address as a single string
            </summary>
            <param name="includeName">Whether to include address type</param>
            <returns>Formatted address string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetMailingFormat">
            <summary>
            Gets the address formatted for mailing labels
            </summary>
            <returns>Mailing label formatted address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetSingleLine">
            <summary>
            Gets a single line representation of the address
            </summary>
            <returns>Single line address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.HasCoordinates">
            <summary>
            Checks if the address has geographic coordinates
            </summary>
            <returns>True if both latitude and longitude are set</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.CalculateDistanceTo(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Calculates the distance to another address (if both have coordinates)
            </summary>
            <param name="other">Other address</param>
            <returns>Distance in kilometers, or null if coordinates are missing</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.CalculateHaversineDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates distance using the Haversine formula
            </summary>
            <param name="lat1">Latitude 1</param>
            <param name="lon1">Longitude 1</param>
            <param name="lat2">Latitude 2</param>
            <param name="lon2">Longitude 2</param>
            <returns>Distance in kilometers</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.ToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="degrees">Degrees</param>
            <returns>Radians</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.WithCoordinates(System.Double,System.Double)">
            <summary>
            Creates a new address with coordinates
            </summary>
            <param name="latitude">Latitude</param>
            <param name="longitude">Longitude</param>
            <returns>New address with coordinates</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.MarkAsValidated">
            <summary>
            Creates a new address marked as validated
            </summary>
            <returns>New address marked as validated</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsSameCity(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Checks if this address is in the same city as another address
            </summary>
            <param name="other">Other address</param>
            <returns>True if same city</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.IsSameCountry(VisitorManagementSystem.Api.Domain.ValueObjects.Address)">
            <summary>
            Checks if this address is in the same country as another address
            </summary>
            <param name="other">Other address</param>
            <returns>True if same country</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Address.GetCountryCode">
            <summary>
            Gets the country code (ISO format if possible)
            </summary>
            <returns>Country code</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo">
            <summary>
            Value object representing complete contact information
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryEmail">
            <summary>
            Primary email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.SecondaryEmail">
            <summary>
            Secondary email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryPhone">
            <summary>
            Primary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.SecondaryPhone">
            <summary>
            Secondary phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.MobilePhone">
            <summary>
            Mobile phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WorkPhone">
            <summary>
            Work phone number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.FaxNumber">
            <summary>
            Fax number
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PrimaryAddress">
            <summary>
            Primary address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WorkAddress">
            <summary>
            Work address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.BillingAddress">
            <summary>
            Billing address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.Website">
            <summary>
            Website URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LinkedIn">
            <summary>
            LinkedIn profile URL
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.Twitter">
            <summary>
            Twitter handle
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.PreferredContactMethod">
            <summary>
            Preferred contact method
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.BestTimeToContact">
            <summary>
            Best time to contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.TimeZone">
            <summary>
            Time zone for contact
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LanguagePreference">
            <summary>
            Language preference for communication
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ContactInstructions">
            <summary>
            Special contact instructions
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.IsVerified">
            <summary>
            Whether contact info has been verified
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.LastVerifiedDate">
            <summary>
            Date when contact info was last verified
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.#ctor(VisitorManagementSystem.Api.Domain.ValueObjects.Email,VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber,VisitorManagementSystem.Api.Domain.ValueObjects.Address,System.String,System.String)">
            <summary>
            Creates a new ContactInfo value object
            </summary>
            <param name="primaryEmail">Primary email address</param>
            <param name="primaryPhone">Primary phone number</param>
            <param name="primaryAddress">Primary address</param>
            <param name="preferredContactMethod">Preferred contact method</param>
            <param name="languagePreference">Language preference</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ValidateContactInfo">
            <summary>
            Validates that at least one contact method is provided
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.ValidatePreferredContactMethod">
            <summary>
            Validates the preferred contact method
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryEmail">
            <summary>
            Gets the primary email address
            </summary>
            <returns>Primary email or secondary if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryPhone">
            <summary>
            Gets the primary phone number
            </summary>
            <returns>Primary phone or mobile if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPrimaryAddress">
            <summary>
            Gets the primary address
            </summary>
            <returns>Primary address or work address if primary is null</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllEmails">
            <summary>
            Gets all email addresses
            </summary>
            <returns>List of all email addresses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllPhoneNumbers">
            <summary>
            Gets all phone numbers
            </summary>
            <returns>List of all phone numbers</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetAllAddresses">
            <summary>
            Gets all addresses
            </summary>
            <returns>List of all addresses</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.HasVerifiedContact">
            <summary>
            Checks if any contact method is verified
            </summary>
            <returns>True if any contact method is verified</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetPreferredContactInfo">
            <summary>
            Gets the preferred contact information based on the preferred method
            </summary>
            <returns>Contact information for preferred method</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithEmail(VisitorManagementSystem.Api.Domain.ValueObjects.Email,System.Boolean)">
            <summary>
            Creates a new ContactInfo with additional email
            </summary>
            <param name="email">Email to add</param>
            <param name="isPrimary">Whether this should be the primary email</param>
            <returns>New ContactInfo with the email added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithPhoneNumber(VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber,System.String)">
            <summary>
            Creates a new ContactInfo with additional phone number
            </summary>
            <param name="phoneNumber">Phone number to add</param>
            <param name="phoneType">Type of phone (Primary, Secondary, Mobile, Work, Fax)</param>
            <returns>New ContactInfo with the phone number added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithAddress(VisitorManagementSystem.Api.Domain.ValueObjects.Address,System.String)">
            <summary>
            Creates a new ContactInfo with additional address
            </summary>
            <param name="address">Address to add</param>
            <param name="addressType">Type of address (Primary, Work, Billing)</param>
            <returns>New ContactInfo with the address added</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.MarkAsVerified">
            <summary>
            Creates a new ContactInfo marked as verified
            </summary>
            <returns>New ContactInfo marked as verified</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.WithPreferredContactMethod(System.String)">
            <summary>
            Updates the preferred contact method
            </summary>
            <param name="preferredMethod">New preferred contact method</param>
            <returns>New ContactInfo with updated preferred method</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.ContactInfo.GetContactSummary">
            <summary>
            Gets a summary of all contact methods
            </summary>
            <returns>Summary string of contact methods</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.Email">
            <summary>
            Value object representing an email address with validation
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Value">
            <summary>
            The email address value
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Domain">
            <summary>
            The domain part of the email address
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.Email.LocalPart">
            <summary>
            The local part of the email address (before @)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.#ctor(System.String)">
            <summary>
            Creates a new Email value object
            </summary>
            <param name="value">The email address</param>
            <exception cref="T:System.ArgumentException">Thrown when email is invalid</exception>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsValidEmail(System.String)">
            <summary>
            Validates an email address format
            </summary>
            <param name="email">Email address to validate</param>
            <returns>True if the email format is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsCommonProvider">
            <summary>
            Checks if the email domain is from a common provider
            </summary>
            <returns>True if from a common email provider</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsBusinessEmail">
            <summary>
            Checks if the email appears to be a business email
            </summary>
            <returns>True if appears to be a business email</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.IsDisposableEmail">
            <summary>
            Checks if the email is from a known disposable email provider
            </summary>
            <returns>True if from a disposable email provider</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetNormalized">
            <summary>
            Gets the normalized version of the email (lowercase, trimmed)
            </summary>
            <returns>Normalized email address</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetMasked">
            <summary>
            Creates a masked version of the email for display purposes
            </summary>
            <returns>Masked email address (e.g., j***@example.com)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.GetDisplayName">
            <summary>
            Gets the display name part of the email (local part)
            </summary>
            <returns>Display name from email</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.Email.Matches(System.String)">
            <summary>
            Checks if this email matches another email (case-insensitive)
            </summary>
            <param name="other">Other email to compare</param>
            <returns>True if emails match</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber">
            <summary>
            Value object representing a phone number with validation and formatting
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.Value">
            <summary>
            The raw phone number value as provided
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.FormattedValue">
            <summary>
            The formatted phone number for display
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.DigitsOnly">
            <summary>
            The phone number with only digits
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.CountryCode">
            <summary>
            The country code (if detected)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.AreaCode">
            <summary>
            The area code
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.PhoneType">
            <summary>
            The phone number type (Mobile, Landline, Unknown)
            </summary>
        </member>
        <member name="P:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsVerified">
            <summary>
            Whether the phone number is verified
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.#ctor">
            <summary>
            Private constructor for Entity Framework
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.#ctor(System.String,System.String)">
            <summary>
            Creates a new PhoneNumber value object
            </summary>
            <param name="value">The phone number</param>
            <param name="countryCode">Optional country code if not included in the number</param>
            <exception cref="T:System.ArgumentException">Thrown when phone number is invalid</exception>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidPhoneNumber(System.String)">
            <summary>
            Validates a phone number format
            </summary>
            <param name="phoneNumber">Phone number to validate</param>
            <returns>True if the phone number format is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidInternationalFormat(System.String)">
            <summary>
            Checks if the phone number is in valid international format
            </summary>
            <param name="phoneNumber">Phone number to check</param>
            <returns>True if valid international format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidSimpleFormat(System.String)">
            <summary>
            Checks if the phone number is in valid simple format
            </summary>
            <param name="phoneNumber">Phone number to check</param>
            <returns>True if valid simple format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.ExtractDigitsOnly(System.String)">
            <summary>
            Extracts only digits from the phone number
            </summary>
            <param name="phoneNumber">Phone number</param>
            <returns>Digits only</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.ParsePhoneComponents(System.String,System.String)">
            <summary>
            Parses phone number components (country code, area code)
            </summary>
            <param name="phoneNumber">Phone number</param>
            <param name="defaultCountryCode">Default country code</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsValidCountryCode(System.String)">
            <summary>
            Checks if a string is a valid country code
            </summary>
            <param name="code">Potential country code</param>
            <returns>True if valid country code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.FormatPhoneNumber">
            <summary>
            Formats the phone number for display
            </summary>
            <returns>Formatted phone number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.DeterminePhoneType">
            <summary>
            Determines the type of phone number
            </summary>
            <returns>Phone type (Mobile, Landline, Unknown)</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.MarkAsVerified">
            <summary>
            Marks the phone number as verified
            </summary>
            <returns>New PhoneNumber instance with verified status</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.GetInternationalFormat">
            <summary>
            Gets the international format of the phone number
            </summary>
            <returns>Phone number in international format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.GetNationalFormat">
            <summary>
            Gets the national format of the phone number
            </summary>
            <returns>Phone number in national format</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsMobile">
            <summary>
            Checks if this is a mobile number
            </summary>
            <returns>True if mobile number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Domain.ValueObjects.PhoneNumber.IsLandline">
            <summary>
            Checks if this is a landline number
            </summary>
            <returns>True if landline number</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for IServiceCollection to register application services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers all application services
            </summary>
            <param name="services">Service collection</param>
            <param name="configuration">Configuration</param>
            <returns>Service collection for chaining</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterConfiguration(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers configuration sections
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers repository services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterBusinessServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers business logic services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterSecurityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers security services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterInfrastructureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers infrastructure services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterValidators(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers validators
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterExternalServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers external service interfaces (will be implemented in later chunks)
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.RegisterBackgroundServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers background services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureApiOptions(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures API options
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures security settings
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureRateLimiting(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures rate limiting
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureHealthChecks(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configures health checks
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Extensions.ServiceCollectionExtensions.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configures Swagger/OpenAPI documentation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext">
            <summary>
            Application database context
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.DetachAllEntities">
            <summary>
            Detaches all tracked entities
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.GetPendingChanges">
            <summary>
            Gets entities with pending changes
            </summary>
            <returns>List of entities with changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.HasPendingChanges">
            <summary>
            Checks if there are any pending changes
            </summary>
            <returns>True if there are pending changes</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout for the context
            </summary>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.BeginTransactionAsync">
            <summary>
            Begins a transaction
            </summary>
            <returns>Database transaction</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.ExecuteSqlAsync(System.String,System.Object[])">
            <summary>
            Executes raw SQL
            </summary>
            <param name="sql">SQL command</param>
            <param name="parameters">Parameters</param>
            <returns>Number of affected rows</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.GetConnectionString">
            <summary>
            Gets database connection string
            </summary>
            <returns>Connection string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.CanConnectAsync">
            <summary>
            Checks if database can connect
            </summary>
            <returns>True if can connect</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.MigrateAsync">
            <summary>
            Migrates the database
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.EnsureCreatedAsync">
            <summary>
            Ensures database is created
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext.ResetDatabaseAsync">
            <summary>
            Resets all database data (USE WITH CAUTION)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditableEntityConfiguration`1">
            <summary>
            Configuration for auditable entities
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditableEntityConfiguration`1.ConfigureAuditableEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to configure auditable entity-specific properties
            </summary>
            <param name="builder">Entity type builder</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.AuditLogConfiguration">
            <summary>
            Entity configuration for AuditLog
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.BaseEntityConfiguration`1">
            <summary>
            Base entity configuration for common properties
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.BaseEntityConfiguration`1.ConfigureDerivedEntity(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            Override this method to configure entity-specific properties
            </summary>
            <param name="builder">Entity type builder</param>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.RefreshTokenConfiguration">
            <summary>
            Entity configuration for RefreshToken
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Configurations.UserConfiguration">
            <summary>
            Entity configuration for User
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer">
            <summary>
            Database initializer for seeding initial data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.InitializeAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext,System.IServiceProvider)">
            <summary>
            Initializes the database with seed data
            </summary>
            <param name="context">Database context</param>
            <param name="serviceProvider">Service provider for dependency injection</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.SeedUsersAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Seeds initial users
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.SeedSystemConfigAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Seeds system configuration
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.MigrateAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Creates a migration if needed
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.ResetDatabaseAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Resets the database (USE WITH EXTREME CAUTION)
            </summary>
            <param name="context">Database context</param>
            <returns>Task</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.DbInitializer.CheckDatabaseHealthAsync(VisitorManagementSystem.Api.Infrastructure.Data.ApplicationDbContext)">
            <summary>
            Checks database health
            </summary>
            <param name="context">Database context</param>
            <returns>Database health status</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.DatabaseHealthStatus">
            <summary>
            Database health status information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.BaseRepository`1">
            <summary>
            Base repository implementation for common CRUD operations
            </summary>
            <typeparam name="TEntity">Entity type</typeparam>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.SpecificationEvaluator">
            <summary>
            Specification evaluator for applying specifications to queries
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.RefreshTokenRepository">
            <summary>
            Repository implementation for RefreshToken entity operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Repositories.UserRepository">
            <summary>
            Repository implementation for User entity operations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder">
            <summary>
            Seeder for permission and role-based access control data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetAllPermissions">
            <summary>
            Gets all available permissions in the system
            </summary>
            <returns>List of all permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionsByCategory">
            <summary>
            Gets permissions grouped by category
            </summary>
            <returns>Dictionary of permissions by category</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetRolePermissions">
            <summary>
            Gets default permissions for each role
            </summary>
            <returns>Dictionary of role to permissions mapping</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.ValidateRolePermissions">
            <summary>
            Validates that all role permissions are valid
            </summary>
            <returns>True if all permissions are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionDependencies">
            <summary>
            Gets permission hierarchy (which permissions depend on others)
            </summary>
            <returns>Dictionary of permission dependencies</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetHighRiskPermissions">
            <summary>
            Gets high-risk permissions that require special approval
            </summary>
            <returns>List of high-risk permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionsByRiskLevel">
            <summary>
            Gets permissions by risk level
            </summary>
            <returns>Dictionary of risk level to permissions</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetMutuallyExclusivePermissions">
            <summary>
            Gets permissions that are mutually exclusive
            </summary>
            <returns>Dictionary of mutually exclusive permission groups</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionTemplates">
            <summary>
            Gets permission templates for common scenarios
            </summary>
            <returns>Dictionary of permission templates</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.ValidatePermissionTemplates">
            <summary>
            Validates permission templates
            </summary>
            <returns>True if all templates are valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetRoleUpgradePermissions(VisitorManagementSystem.Api.Domain.Enums.UserRole,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Gets recommended permissions for a role upgrade
            </summary>
            <param name="currentRole">Current role</param>
            <param name="targetRole">Target role</param>
            <returns>List of additional permissions needed</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionSeeder.GetPermissionAuditInfo">
            <summary>
            Gets permission audit information
            </summary>
            <returns>Permission audit data</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.PermissionAuditInfo">
            <summary>
            Permission audit information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder">
            <summary>
            Seeder for initial user data
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetSeedUsers">
            <summary>
            Gets seed users for initial database setup
            </summary>
            <returns>List of seed users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.CreateUser(System.String,System.String,System.String,VisitorManagementSystem.Api.Domain.Enums.UserRole,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a user with hashed password
            </summary>
            <param name="firstName">First name</param>
            <param name="lastName">Last name</param>
            <param name="email">Email address</param>
            <param name="role">User role</param>
            <param name="department">Department</param>
            <param name="jobTitle">Job title</param>
            <param name="employeeId">Employee ID</param>
            <param name="password">Password (defaults to "Password123!")</param>
            <returns>User entity</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.HashPassword(System.String)">
            <summary>
            Hashes a password using PBKDF2
            </summary>
            <param name="password">Plain text password</param>
            <returns>Tuple of password hash and salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetTestUsers">
            <summary>
            Gets test users for development/testing
            </summary>
            <returns>List of test users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.CreateUserWithPhone(System.String,System.String,System.String,System.String,VisitorManagementSystem.Api.Domain.Enums.UserRole)">
            <summary>
            Creates a user with specific phone number
            </summary>
            <param name="firstName">First name</param>
            <param name="lastName">Last name</param>
            <param name="email">Email</param>
            <param name="phoneNumber">Phone number</param>
            <param name="role">User role</param>
            <returns>User with phone number</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.GetLoadTestUsers(System.Int32)">
            <summary>
            Gets users for load testing
            </summary>
            <param name="count">Number of users to create</param>
            <returns>List of load test users</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Data.Seeds.UserSeeder.ValidateSeedUsers(System.Collections.Generic.List{VisitorManagementSystem.Api.Domain.Entities.User})">
            <summary>
            Validates that all seed users have unique emails and employee IDs
            </summary>
            <param name="users">List of users to validate</param>
            <returns>True if all users are valid</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Data.UnitOfWork">
            <summary>
            Unit of Work implementation for managing database transactions and repositories
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyAuthenticationHandler">
            <summary>
            API Key authentication handler for external integrations
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyAuthenticationSchemeOptions">
            <summary>
            API Key authentication scheme options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.ApiKeyInfo">
            <summary>
            API Key information
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.JwtAuthenticationHandler">
            <summary>
            Custom JWT authentication handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authentication.JwtAuthenticationSchemeOptions">
            <summary>
            JWT authentication scheme options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PermissionHandler">
            <summary>
            Permission-based authorization handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultiplePermissionsRequirement">
            <summary>
            Multiple permissions requirement (user must have ALL permissions)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.AnyPermissionRequirement">
            <summary>
            Any permission requirement (user must have ANY of the permissions)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultiplePermissionsHandler">
            <summary>
            Handler for multiple permissions requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.AnyPermissionHandler">
            <summary>
            Handler for any permission requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PermissionRequirement">
            <summary>
            Permission requirement implementation (already defined in PermissionHandler.cs)
            This file exists to maintain clean separation if needed
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.ResourcePermissionRequirement">
            <summary>
            Resource-based permission requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.OwnerPermissionRequirement">
            <summary>
            Owner-based permission requirement (user can only access their own resources)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.TimeBasedPermissionRequirement">
            <summary>
            Time-based permission requirement (access only during certain hours)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.IPBasedPermissionRequirement">
            <summary>
            IP-based permission requirement (access only from certain IP addresses)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PolicyProvider">
            <summary>
            Custom authorization policy provider
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.PolicyNames">
            <summary>
            Authorization policy names for easy reference
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.RoleHandler">
            <summary>
            Role-based authorization handler
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.RoleRequirement">
            <summary>
            Role requirement for authorization
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultipleRolesRequirement">
            <summary>
            Multiple roles requirement (user must have ANY of the roles)
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Authorization.MultipleRolesHandler">
            <summary>
            Handler for multiple roles requirement
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.AESEncryptionService">
            <summary>
            AES encryption service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService">
            <summary>
            Interface for encryption and decryption services
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts data using AES encryption
            </summary>
            <param name="plainText">Data to encrypt</param>
            <returns>Encrypted data as base64 string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Decrypt(System.String)">
            <summary>
            Decrypts data using AES encryption
            </summary>
            <param name="cipherText">Encrypted data as base64 string</param>
            <returns>Decrypted plain text</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.EncryptWithKey(System.String,System.String)">
            <summary>
            Encrypts data with a specific key
            </summary>
            <param name="plainText">Data to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>Encrypted data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.DecryptWithKey(System.String,System.String)">
            <summary>
            Decrypts data with a specific key
            </summary>
            <param name="cipherText">Encrypted data</param>
            <param name="key">Decryption key</param>
            <returns>Decrypted data</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.GenerateKey(System.Int32)">
            <summary>
            Generates a secure random key
            </summary>
            <param name="keySize">Key size in bits</param>
            <returns>Base64 encoded key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.GenerateIV">
            <summary>
            Generates a secure random IV
            </summary>
            <returns>Base64 encoded IV</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.Hash(System.String)">
            <summary>
            Hashes data using SHA-256
            </summary>
            <param name="data">Data to hash</param>
            <returns>Hash as hex string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.HashWithSalt(System.String,System.String)">
            <summary>
            Hashes data with salt using SHA-256
            </summary>
            <param name="data">Data to hash</param>
            <param name="salt">Salt value</param>
            <returns>Hash as hex string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IEncryptionService.VerifyHash(System.String,System.String,System.String)">
            <summary>
            Verifies a hash against original data
            </summary>
            <param name="data">Original data</param>
            <param name="hash">Hash to verify</param>
            <param name="salt">Salt used in hashing</param>
            <returns>True if hash matches</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService">
            <summary>
            Interface for encryption key management
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetCurrentKeyAsync">
            <summary>
            Gets the current active encryption key
            </summary>
            <returns>Current encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.RotateKeyAsync">
            <summary>
            Rotates the encryption key
            </summary>
            <returns>New encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetKeyByIdAsync(System.String)">
            <summary>
            Gets a key by its ID
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>Encryption key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetActiveKeysAsync">
            <summary>
            Gets all active keys
            </summary>
            <returns>List of active keys with their IDs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.DeactivateKeyAsync(System.String)">
            <summary>
            Deactivates a key
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.ValidateKeyAsync(System.String)">
            <summary>
            Validates key integrity
            </summary>
            <param name="keyId">Key identifier</param>
            <returns>True if key is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.GetNextRotationDateAsync">
            <summary>
            Gets key rotation schedule
            </summary>
            <returns>Next rotation date</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.IKeyManagementService.ForceRotationAsync(System.String)">
            <summary>
            Forces immediate key rotation
            </summary>
            <param name="reason">Reason for rotation</param>
            <returns>New key ID</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.KeyManagementService">
            <summary>
            Key management service implementation
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Security.Encryption.KeyInfo">
            <summary>
            Key information structure
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper">
            <summary>
            Cryptographic utility helper for password hashing, token generation, and security operations
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateSalt(System.Int32)">
            <summary>
            Generates a cryptographically secure random salt
            </summary>
            <param name="size">Salt size in bytes</param>
            <returns>Base64 encoded salt</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.HashPassword(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Hashes a password using PBKDF2 with SHA-256
            </summary>
            <param name="password">Password to hash</param>
            <param name="salt">Salt for hashing</param>
            <param name="iterations">Number of iterations</param>
            <param name="hashSize">Hash size in bytes</param>
            <returns>Base64 encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyPassword(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Verifies a password against its hash
            </summary>
            <param name="password">Password to verify</param>
            <param name="hash">Stored hash</param>
            <param name="salt">Salt used for hashing</param>
            <param name="iterations">Number of iterations used</param>
            <param name="hashSize">Hash size in bytes</param>
            <returns>True if password matches</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GeneratePasswordHash(System.String,System.Int32)">
            <summary>
            Generates a complete password hash with embedded salt and parameters
            </summary>
            <param name="password">Password to hash</param>
            <param name="iterations">Number of iterations</param>
            <returns>Complete hash string with metadata</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyPasswordHash(System.String,System.String)">
            <summary>
            Verifies a password against a complete hash
            </summary>
            <param name="password">Password to verify</param>
            <param name="completeHash">Complete hash with metadata</param>
            <returns>True if password matches</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateSecureToken(System.Int32)">
            <summary>
            Generates a cryptographically secure random token
            </summary>
            <param name="length">Token length in bytes</param>
            <returns>Base64 encoded token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateUrlSafeToken(System.Int32)">
            <summary>
            Generates a URL-safe secure token
            </summary>
            <param name="length">Token length in bytes</param>
            <returns>URL-safe token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateNumericToken(System.Int32)">
            <summary>
            Generates a secure numeric token
            </summary>
            <param name="length">Number of digits</param>
            <returns>Numeric token</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeSha256Hash(System.String)">
            <summary>
            Computes SHA-256 hash of input
            </summary>
            <param name="input">Input string</param>
            <returns>Hex-encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeSha512Hash(System.String)">
            <summary>
            Computes SHA-512 hash of input
            </summary>
            <param name="input">Input string</param>
            <returns>Hex-encoded hash</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.ComputeHmacSha256(System.String,System.String)">
            <summary>
            Computes HMAC-SHA256 of input with key
            </summary>
            <param name="input">Input string</param>
            <param name="key">HMAC key</param>
            <returns>Hex-encoded HMAC</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyHmacSignature(System.String,System.String,System.String)">
            <summary>
            Verifies HMAC signature
            </summary>
            <param name="input">Input string</param>
            <param name="key">HMAC key</param>
            <param name="signature">Signature to verify</param>
            <returns>True if signature is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateApiKey(System.String)">
            <summary>
            Generates a secure API key
            </summary>
            <param name="prefix">Optional prefix</param>
            <returns>Secure API key</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateWebhookSignature(System.String,System.String)">
            <summary>
            Generates a webhook signature
            </summary>
            <param name="payload">Webhook payload</param>
            <param name="secret">Webhook secret</param>
            <returns>Webhook signature</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyWebhookSignature(System.String,System.String,System.String)">
            <summary>
            Verifies a webhook signature
            </summary>
            <param name="payload">Webhook payload</param>
            <param name="secret">Webhook secret</param>
            <param name="signature">Signature to verify</param>
            <returns>True if signature is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.EncryptAesGcm(System.String,System.String)">
            <summary>
            Encrypts data using AES-256-GCM
            </summary>
            <param name="plainText">Text to encrypt</param>
            <param name="key">Encryption key</param>
            <returns>Encrypted data with nonce and tag</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.DecryptAesGcm(System.String,System.String)">
            <summary>
            Decrypts data encrypted with AES-256-GCM
            </summary>
            <param name="cipherText">Encrypted data</param>
            <param name="key">Decryption key</param>
            <returns>Decrypted plain text</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateTotp(System.String,System.Int32,System.Int32)">
            <summary>
            Generates a time-based one-time password (TOTP)
            </summary>
            <param name="secret">Shared secret</param>
            <param name="timeStep">Time step in seconds</param>
            <param name="digits">Number of digits</param>
            <returns>TOTP code</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.VerifyTotp(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Verifies a TOTP code
            </summary>
            <param name="code">Code to verify</param>
            <param name="secret">Shared secret</param>
            <param name="windowSize">Allowed time window</param>
            <param name="timeStep">Time step in seconds</param>
            <param name="digits">Number of digits</param>
            <returns>True if code is valid</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateHotp(System.Byte[],System.Int64,System.Int32)">
            <summary>
            Generates HMAC-based one-time password
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.SlowEquals(System.String,System.String)">
            <summary>
            Constant-time string comparison to prevent timing attacks
            </summary>
            <param name="a">First string</param>
            <param name="b">Second string</param>
            <returns>True if strings are equal</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.GenerateDeviceFingerprint(System.String,System.String,System.String[])">
            <summary>
            Generates a secure device fingerprint
            </summary>
            <param name="userAgent">User agent string</param>
            <param name="ipAddress">IP address</param>
            <param name="additionalData">Additional fingerprint data</param>
            <returns>Device fingerprint</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.CryptoHelper.CalculatePasswordStrength(System.String)">
            <summary>
            Validates password strength
            </summary>
            <param name="password">Password to validate</param>
            <returns>Password strength score (0-100)</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.DateTimeProvider">
            <summary>
            Default implementation of date/time provider for production use
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator">
            <summary>
            Secure GUID generation utility with various formatting options
            </summary>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuid">
            <summary>
            Generates a new GUID
            </summary>
            <returns>New GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuidString(System.String)">
            <summary>
            Generates a new GUID as string
            </summary>
            <param name="format">GUID format (N, D, B, P, X)</param>
            <returns>GUID as formatted string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSecureGuid">
            <summary>
            Generates a cryptographically secure GUID
            </summary>
            <returns>Cryptographically secure GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSequentialGuid">
            <summary>
            Generates a sequential GUID for better database performance
            </summary>
            <returns>Sequential GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewShortGuid">
            <summary>
            Generates a short GUID (22 characters)
            </summary>
            <returns>Short GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewUrlSafeGuid">
            <summary>
            Generates a URL-safe short GUID
            </summary>
            <returns>URL-safe short GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuidFromString(System.String)">
            <summary>
            Generates a GUID from a string using SHA-1 hash (deterministic)
            </summary>
            <param name="input">Input string</param>
            <returns>Deterministic GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewNamespaceGuid(System.Guid,System.String)">
            <summary>
            Generates a GUID with specific namespace and name
            </summary>
            <param name="namespaceId">Namespace GUID</param>
            <param name="name">Name string</param>
            <returns>Namespaced GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewCorrelationId">
            <summary>
            Generates a correlation ID for request tracking
            </summary>
            <returns>Correlation ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewRequestId">
            <summary>
            Generates a request ID for API tracking
            </summary>
            <returns>Request ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSessionId">
            <summary>
            Generates a session ID
            </summary>
            <returns>Session ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewJwtId">
            <summary>
            Generates a JWT ID (JTI)
            </summary>
            <returns>JWT ID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewSecurityStamp">
            <summary>
            Generates a security stamp
            </summary>
            <returns>Security stamp string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewDeviceFingerprint">
            <summary>
            Generates a device fingerprint ID
            </summary>
            <returns>Device fingerprint string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewApiKey(System.String)">
            <summary>
            Generates an API key
            </summary>
            <param name="prefix">Optional prefix</param>
            <returns>API key string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewWebhookSecret">
            <summary>
            Generates a webhook secret
            </summary>
            <returns>Webhook secret string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.IsValidGuid(System.String)">
            <summary>
            Validates if string is a valid GUID
            </summary>
            <param name="guidString">String to validate</param>
            <returns>True if valid GUID</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.TryParseGuid(System.String,System.Guid@)">
            <summary>
            Tries to parse a GUID from string
            </summary>
            <param name="guidString">String to parse</param>
            <param name="guid">Parsed GUID</param>
            <returns>True if parsing succeeded</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.FormatGuid(System.Guid,VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat)">
            <summary>
            Converts GUID to different formats
            </summary>
            <param name="guid">GUID to convert</param>
            <param name="format">Target format</param>
            <returns>Formatted GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.ConvertToShortGuid(System.Guid)">
            <summary>
            Converts GUID to short format
            </summary>
            <param name="guid">GUID to convert</param>
            <returns>Short GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.ConvertToUrlSafeGuid(System.Guid)">
            <summary>
            Converts GUID to URL-safe format
            </summary>
            <param name="guid">GUID to convert</param>
            <returns>URL-safe GUID string</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.NewGuids(System.Int32)">
            <summary>
            Generates multiple GUIDs
            </summary>
            <param name="count">Number of GUIDs to generate</param>
            <returns>Array of GUIDs</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.IsEmpty(System.Guid)">
            <summary>
            Checks if GUID is empty
            </summary>
            <param name="guid">GUID to check</param>
            <returns>True if empty</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.GetGuidVersion(System.Guid)">
            <summary>
            Gets GUID version
            </summary>
            <param name="guid">GUID to check</param>
            <returns>GUID version</returns>
        </member>
        <member name="M:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidGenerator.GetGuidVariant(System.Guid)">
            <summary>
            Gets GUID variant
            </summary>
            <param name="guid">GUID to check</param>
            <returns>GUID variant</returns>
        </member>
        <member name="T:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat">
            <summary>
            GUID format options
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Digits">
            <summary>
            32 digits: 00000000000000000000000000000000
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Hyphens">
            <summary>
            32 digits with hyphens: 00000000-0000-0000-0000-000000000000
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Braces">
            <summary>
            32 digits with hyphens in braces: {00000000-0000-0000-0000-000000000000}
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Parentheses">
            <summary>
            32 digits with hyphens in parentheses: (00000000-0000-0000-0000-000000000000)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Hex">
            <summary>
            Hexadecimal format: {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.Short">
            <summary>
            Base64 encoded (22 characters)
            </summary>
        </member>
        <member name="F:VisitorManagementSystem.Api.Infrastructure.Utilities.GuidFormat.UrlSafe">
            <summary>
            URL-safe Base64 encoded
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuditLoggingMiddleware">
            <summary>
            Audit logging middleware for tracking all API activities
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuditLoggingOptions">
            <summary>
            Audit logging configuration options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.AuthenticationMiddleware">
            <summary>
            Custom authentication middleware for cookie-based authentication
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ExceptionHandlingMiddleware">
            <summary>
            Global exception handling middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ValidationException">
            <summary>
            Custom validation exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityException">
            <summary>
            Custom security exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.DatabaseException">
            <summary>
            Custom database exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ExternalServiceException">
            <summary>
            Custom external service exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.BusinessRuleException">
            <summary>
            Custom business rule exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.ConcurrencyException">
            <summary>
            Custom concurrency exception
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitingMiddleware">
            <summary>
            Rate limiting middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitOptions">
            <summary>
            Rate limiting options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RateLimitRule">
            <summary>
            Rate limiting rule
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.RequestLoggingMiddleware">
            <summary>
            Request logging middleware
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityHeadersMiddleware">
            <summary>
            Middleware to add security headers to all responses
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Middleware.SecurityHeadersOptions">
            <summary>
            Security headers configuration options
            </summary>
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable1">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable1.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable1.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.MakeAddressStreet1Nullable1.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.ExpandAuditLogMetadataColumn">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.ExpandAuditLogMetadataColumn.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.ExpandAuditLogMetadataColumn.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.ExpandAuditLogMetadataColumn.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:VisitorManagementSystem.Api.Migrations.FixAuditLogMetadataColumnSize">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.FixAuditLogMetadataColumnSize.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.FixAuditLogMetadataColumnSize.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:VisitorManagementSystem.Api.Migrations.FixAuditLogMetadataColumnSize.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:GetUserByIdQueryHandler">
            <summary>
            Handler for GetUserByIdQuery
            </summary>
        </member>
        <member name="T:GetUsersQueryHandler">
            <summary>
            Handler for GetUsersQuery
            </summary>
        </member>
    </members>
</doc>
